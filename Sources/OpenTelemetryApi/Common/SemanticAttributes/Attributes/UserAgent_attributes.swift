/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum UserAgent: String {

    /**
     Name of the user-agent extracted from original. Usually refers to the browser's name.

      - Examples:
      ```
      attributes[SemanticConventions.UserAgent.name.rawValue] = "Safari"
      attributes[SemanticConventions.UserAgent.name.rawValue] = "YourApp"
      ```

     - Note: [Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`

     - Requires: Value type should be `String`
    */
    case name = "user_agent.name"

    /**
     Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.

      - Examples:
      ```
      attributes[SemanticConventions.UserAgent.original.rawValue] = "CERN-LineMode/2.15 libwww/2.17b3"
      attributes[SemanticConventions.UserAgent.original.rawValue] = "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
      attributes[SemanticConventions.UserAgent.original.rawValue] = "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
      ```

     - Requires: Value type should be `String`
    */
    case original = "user_agent.original"

    /**
     Human readable operating system name.

      - Examples:
      ```
      attributes[SemanticConventions.UserAgent.osName.rawValue] = "iOS"
      attributes[SemanticConventions.UserAgent.osName.rawValue] = "Android"
      attributes[SemanticConventions.UserAgent.osName.rawValue] = "Ubuntu"
      ```

     - Note: For mapping user agent strings to OS names, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.

     - Requires: Value type should be `String`
    */
    case osName = "user_agent.os.name"

    /**
     The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).

      - Examples:
      ```
      attributes[SemanticConventions.UserAgent.osVersion.rawValue] = "14.2.1"
      attributes[SemanticConventions.UserAgent.osVersion.rawValue] = "18.04.1"
      ```

     - Note: For mapping user agent strings to OS versions, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.

     - Requires: Value type should be `String`
    */
    case osVersion = "user_agent.os.version"

    /**
     Specifies the category of synthetic traffic, such as tests or bots.

     - Note: This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.

     - Requires: Value should be one of ``SyntheticTypeValues`` (of type `String`)
    */
    case syntheticType = "user_agent.synthetic.type"

    /**
     Version of the user-agent extracted from original. Usually refers to the browser's version

      - Examples:
      ```
      attributes[SemanticConventions.UserAgent.version.rawValue] = "14.1.2"
      attributes[SemanticConventions.UserAgent.version.rawValue] = "1.0.0"
      ```

     - Note: [Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`

     - Requires: Value type should be `String`
    */
    case version = "user_agent.version"

    /** 
      Specifies the category of synthetic traffic, such as tests or bots.
    */
    public struct SyntheticTypeValues: CustomStringConvertible {
      
      /// Bot source.
      public static let bot = SyntheticTypeValues("bot") 
      
      /// Synthetic test source.
      public static let test = SyntheticTypeValues("test") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}