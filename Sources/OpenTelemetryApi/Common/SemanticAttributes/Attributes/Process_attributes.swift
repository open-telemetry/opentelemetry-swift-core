/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Process: String {

    /**
     Length of the process.command_args array

      - Examples:
      ```
      attributes[SemanticConventions.Process.argsCount.rawValue] = 4
      ```

     - Note: This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.

     - Requires: Value type should be `Int`
    */
    case argsCount = "process.args_count"

    /**
     The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.

      - Examples:
      ```
      attributes[SemanticConventions.Process.command.rawValue] = "cmd/otelcol"
      ```

     - Requires: Value type should be `String`
    */
    case command = "process.command"

    /**
     All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.

      - Examples:
      ```
      attributes[SemanticConventions.Process.commandArgs.rawValue] = ["cmd/otecol", "--config=config.yaml"]
      ```

     - Requires: Value type should be `[String]`
    */
    case commandArgs = "process.command_args"

    /**
     The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.

      - Examples:
      ```
      attributes[SemanticConventions.Process.commandLine.rawValue] = "C:\cmd\otecol --config=\"my directory\config.yaml\""
      ```

     - Requires: Value type should be `String`
    */
    case commandLine = "process.command_line"

    /**
     Specifies whether the context switches for this data point were voluntary or involuntary.

     - Requires: Value should be one of ``ContextSwitchTypeValues`` (of type `String`)
    */
    case contextSwitchType = "process.context_switch_type"

    /**
     The date and time the process was created, in ISO 8601 format.

      - Examples:
      ```
      attributes[SemanticConventions.Process.creationTime.rawValue] = "2023-11-21T09:25:34.853Z"
      ```

     - Requires: Value type should be `String`
    */
    case creationTime = "process.creation.time"

    /**
     Process environment variables, `<key>` being the environment variable name, the value being the environment variable value.

      - Examples:
      ```
      attributes[SemanticConventions.Process.environmentVariable.rawValue] = "ubuntu"
      attributes[SemanticConventions.Process.environmentVariable.rawValue] = "/usr/local/bin:/usr/bin"
      ```

     - Note: Examples:

       - an environment variable `USER` with value `"ubuntu"` SHOULD be recorded
         as the `process.environment_variable.USER` attribute with value `"ubuntu"`.
       - an environment variable `PATH` with value `"/usr/local/bin:/usr/bin"`
         SHOULD be recorded as the `process.environment_variable.PATH` attribute
         with value `"/usr/local/bin:/usr/bin"`.

     - Requires: Value type should be `template[string]`
    */
    case environmentVariable = "process.environment_variable"

    /**
     The GNU build ID as found in the `.note.gnu.build-id` ELF section (hex string).

      - Examples:
      ```
      attributes[SemanticConventions.Process.executableBuildIdGnu.rawValue] = "c89b11207f6479603b0d49bf291c092c2b719293"
      ```

     - Requires: Value type should be `String`
    */
    case executableBuildIdGnu = "process.executable.build_id.gnu"

    /**
     The Go build ID as retrieved by `go tool buildid <go executable>`.

      - Examples:
      ```
      attributes[SemanticConventions.Process.executableBuildIdGo.rawValue] = "foh3mEXu7BLZjsN9pOwG/kATcXlYVCDEFouRMQed_/WwRFB1hPo9LBkekthSPG/x8hMC8emW2cCjXD0_1aY"
      ```

     - Requires: Value type should be `String`
    */
    case executableBuildIdGo = "process.executable.build_id.go"

    /**
     Profiling specific build ID for executables. See the OTel specification for Profiles for more information.

      - Examples:
      ```
      attributes[SemanticConventions.Process.executableBuildIdHtlhash.rawValue] = "600DCAFE4A110000F2BF38C493F5FB92"
      ```

     - Requires: Value type should be `String`
    */
    case executableBuildIdHtlhash = "process.executable.build_id.htlhash"

    /**
     The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.

      - Examples:
      ```
      attributes[SemanticConventions.Process.executableName.rawValue] = "otelcol"
      ```

     - Requires: Value type should be `String`
    */
    case executableName = "process.executable.name"

    /**
     The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.

      - Examples:
      ```
      attributes[SemanticConventions.Process.executablePath.rawValue] = "/usr/bin/cmd/otelcol"
      ```

     - Requires: Value type should be `String`
    */
    case executablePath = "process.executable.path"

    /**
     The exit code of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.exitCode.rawValue] = 127
      ```

     - Requires: Value type should be `Int`
    */
    case exitCode = "process.exit.code"

    /**
     The date and time the process exited, in ISO 8601 format.

      - Examples:
      ```
      attributes[SemanticConventions.Process.exitTime.rawValue] = "2023-11-21T09:26:12.315Z"
      ```

     - Requires: Value type should be `String`
    */
    case exitTime = "process.exit.time"

    /**
     The PID of the process's group leader. This is also the process group ID (PGID) of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.groupLeaderPid.rawValue] = 23
      ```

     - Requires: Value type should be `Int`
    */
    case groupLeaderPid = "process.group_leader.pid"

    /**
     Whether the process is connected to an interactive shell.

     - Requires: Value type should be `Bool`
    */
    case interactive = "process.interactive"

    /**
     The control group associated with the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.linuxCgroup.rawValue] = "1:name=systemd:/user.slice/user-1000.slice/session-3.scope"
      attributes[SemanticConventions.Process.linuxCgroup.rawValue] = "0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope"
      ```

     - Note: Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the [/proc/[PID]/cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) file.

     - Requires: Value type should be `String`
    */
    case linuxCgroup = "process.linux.cgroup"

    /**
     The username of the user that owns the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.owner.rawValue] = "root"
      ```

     - Requires: Value type should be `String`
    */
    case owner = "process.owner"

    /**
     The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.

     - Requires: Value should be one of ``PagingFaultTypeValues`` (of type `String`)
    */
    case pagingFaultType = "process.paging.fault_type"

    /**
     Parent Process identifier (PPID).

      - Examples:
      ```
      attributes[SemanticConventions.Process.parentPid.rawValue] = 111
      ```

     - Requires: Value type should be `Int`
    */
    case parentPid = "process.parent_pid"

    /**
     Process identifier (PID).

      - Examples:
      ```
      attributes[SemanticConventions.Process.pid.rawValue] = 1234
      ```

     - Requires: Value type should be `Int`
    */
    case pid = "process.pid"

    /**
     The real user ID (RUID) of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.realUserId.rawValue] = 1000
      ```

     - Requires: Value type should be `Int`
    */
    case realUserId = "process.real_user.id"

    /**
     The username of the real user of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.realUserName.rawValue] = "operator"
      ```

     - Requires: Value type should be `String`
    */
    case realUserName = "process.real_user.name"

    /**
     An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.

      - Examples:
      ```
      attributes[SemanticConventions.Process.runtimeDescription.rawValue] = "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0"
      ```

     - Requires: Value type should be `String`
    */
    case runtimeDescription = "process.runtime.description"

    /**
     The name of the runtime of this process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.runtimeName.rawValue] = "OpenJDK Runtime Environment"
      ```

     - Requires: Value type should be `String`
    */
    case runtimeName = "process.runtime.name"

    /**
     The version of the runtime of this process, as returned by the runtime without modification.

      - Examples:
      ```
      attributes[SemanticConventions.Process.runtimeVersion.rawValue] = "14.0.2"
      ```

     - Requires: Value type should be `String`
    */
    case runtimeVersion = "process.runtime.version"

    /**
     The saved user ID (SUID) of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.savedUserId.rawValue] = 1002
      ```

     - Requires: Value type should be `Int`
    */
    case savedUserId = "process.saved_user.id"

    /**
     The username of the saved user.

      - Examples:
      ```
      attributes[SemanticConventions.Process.savedUserName.rawValue] = "operator"
      ```

     - Requires: Value type should be `String`
    */
    case savedUserName = "process.saved_user.name"

    /**
     The PID of the process's session leader. This is also the session ID (SID) of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.sessionLeaderPid.rawValue] = 14
      ```

     - Requires: Value type should be `Int`
    */
    case sessionLeaderPid = "process.session_leader.pid"

    /**
     Process title (proctitle)

      - Examples:
      ```
      attributes[SemanticConventions.Process.title.rawValue] = "cat /etc/hostname"
      attributes[SemanticConventions.Process.title.rawValue] = "xfce4-session"
      attributes[SemanticConventions.Process.title.rawValue] = "bash"
      ```

     - Note: In many Unix-like systems, process title (proctitle), is the string that represents the name or command line of a running process, displayed by system monitoring tools like ps, top, and htop.

     - Requires: Value type should be `String`
    */
    case title = "process.title"

    /**
     The effective user ID (EUID) of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.userId.rawValue] = 1001
      ```

     - Requires: Value type should be `Int`
    */
    case userId = "process.user.id"

    /**
     The username of the effective user of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.userName.rawValue] = "root"
      ```

     - Requires: Value type should be `String`
    */
    case userName = "process.user.name"

    /**
     Virtual process identifier.

      - Examples:
      ```
      attributes[SemanticConventions.Process.vpid.rawValue] = 12
      ```

     - Note: The process ID within a PID namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.

     - Requires: Value type should be `Int`
    */
    case vpid = "process.vpid"

    /**
     The working directory of the process.

      - Examples:
      ```
      attributes[SemanticConventions.Process.workingDirectory.rawValue] = "/root"
      ```

     - Requires: Value type should be `String`
    */
    case workingDirectory = "process.working_directory"

    /** 
      Specifies whether the context switches for this data point were voluntary or involuntary.
    */
    public struct ContextSwitchTypeValues: CustomStringConvertible {
      public static let voluntary = ContextSwitchTypeValues("voluntary") 
      public static let involuntary = ContextSwitchTypeValues("involuntary") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.
    */
    public struct PagingFaultTypeValues: CustomStringConvertible {
      public static let major = PagingFaultTypeValues("major") 
      public static let minor = PagingFaultTypeValues("minor") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}