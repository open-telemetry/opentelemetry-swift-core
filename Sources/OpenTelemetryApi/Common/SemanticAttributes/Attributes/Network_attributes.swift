/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Network: String {

    /**
     The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.

      - Examples:
      ```
      attributes[SemanticConventions.Network.carrierIcc.rawValue] = "DE"
      ```

     - Requires: Value type should be `String`
    */
    case carrierIcc = "network.carrier.icc"

    /**
     The mobile carrier country code.

      - Examples:
      ```
      attributes[SemanticConventions.Network.carrierMcc.rawValue] = "310"
      ```

     - Requires: Value type should be `String`
    */
    case carrierMcc = "network.carrier.mcc"

    /**
     The mobile carrier network code.

      - Examples:
      ```
      attributes[SemanticConventions.Network.carrierMnc.rawValue] = "001"
      ```

     - Requires: Value type should be `String`
    */
    case carrierMnc = "network.carrier.mnc"

    /**
     The name of the mobile carrier.

      - Examples:
      ```
      attributes[SemanticConventions.Network.carrierName.rawValue] = "sprint"
      ```

     - Requires: Value type should be `String`
    */
    case carrierName = "network.carrier.name"

    /**
     The state of network connection

      - Examples:
      ```
      attributes[SemanticConventions.Network.connectionState.rawValue] = .close_wait
      ```

     - Note: Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)

     - Requires: Value should be one of ``ConnectionStateValues`` (of type `String`)
    */
    case connectionState = "network.connection.state"

    /**
     This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.

      - Examples:
      ```
      attributes[SemanticConventions.Network.connectionSubtype.rawValue] = .LTE
      ```

     - Requires: Value should be one of ``ConnectionSubtypeValues`` (of type `String`)
    */
    case connectionSubtype = "network.connection.subtype"

    /**
     The internet connection type.

      - Examples:
      ```
      attributes[SemanticConventions.Network.connectionType.rawValue] = .wifi
      ```

     - Requires: Value should be one of ``ConnectionTypeValues`` (of type `String`)
    */
    case connectionType = "network.connection.type"

    /**
     The network interface name.

      - Examples:
      ```
      attributes[SemanticConventions.Network.interfaceName.rawValue] = "lo"
      attributes[SemanticConventions.Network.interfaceName.rawValue] = "eth0"
      ```

     - Requires: Value type should be `String`
    */
    case interfaceName = "network.interface.name"

    /**
     The network IO operation direction.

      - Examples:
      ```
      attributes[SemanticConventions.Network.ioDirection.rawValue] = .transmit
      ```

     - Requires: Value should be one of ``IoDirectionValues`` (of type `String`)
    */
    case ioDirection = "network.io.direction"

    /**
     Local address of the network connection - IP address or Unix domain socket name.

      - Examples:
      ```
      attributes[SemanticConventions.Network.localAddress.rawValue] = "10.1.2.80"
      attributes[SemanticConventions.Network.localAddress.rawValue] = "/tmp/my.sock"
      ```

     - Requires: Value type should be `String`
    */
    case localAddress = "network.local.address"

    /**
     Local port number of the network connection.

      - Examples:
      ```
      attributes[SemanticConventions.Network.localPort.rawValue] = 65123
      ```

     - Requires: Value type should be `Int`
    */
    case localPort = "network.local.port"

    /**
     Peer address of the network connection - IP address or Unix domain socket name.

      - Examples:
      ```
      attributes[SemanticConventions.Network.peerAddress.rawValue] = "10.1.2.80"
      attributes[SemanticConventions.Network.peerAddress.rawValue] = "/tmp/my.sock"
      ```

     - Requires: Value type should be `String`
    */
    case peerAddress = "network.peer.address"

    /**
     Peer port number of the network connection.

      - Examples:
      ```
      attributes[SemanticConventions.Network.peerPort.rawValue] = 65123
      ```

     - Requires: Value type should be `Int`
    */
    case peerPort = "network.peer.port"

    /**
     [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.

      - Examples:
      ```
      attributes[SemanticConventions.Network.protocolName.rawValue] = "amqp"
      attributes[SemanticConventions.Network.protocolName.rawValue] = "http"
      attributes[SemanticConventions.Network.protocolName.rawValue] = "mqtt"
      ```

     - Note: The value SHOULD be normalized to lowercase.

     - Requires: Value type should be `String`
    */
    case protocolName = "network.protocol.name"

    /**
     The actual version of the protocol used for network communication.

      - Examples:
      ```
      attributes[SemanticConventions.Network.protocolVersion.rawValue] = "1.1"
      attributes[SemanticConventions.Network.protocolVersion.rawValue] = "2"
      ```

     - Note: If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.

     - Requires: Value type should be `String`
    */
    case protocolVersion = "network.protocol.version"

    /**
     [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).

      - Examples:
      ```
      attributes[SemanticConventions.Network.transport.rawValue] = .tcp
      attributes[SemanticConventions.Network.transport.rawValue] = .udp
      ```

     - Note: The value SHOULD be normalized to lowercase.

       Consider always setting the transport when setting a port number, since
       a port number is ambiguous without knowing the transport. For example
       different processes could be listening on TCP port 12345 and UDP port 12345.

     - Requires: Value should be one of ``TransportValues`` (of type `String`)
    */
    case transport = "network.transport"

    /**
     [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.

      - Examples:
      ```
      attributes[SemanticConventions.Network.type.rawValue] = .ipv4
      attributes[SemanticConventions.Network.type.rawValue] = .ipv6
      ```

     - Note: The value SHOULD be normalized to lowercase.

     - Requires: Value should be one of ``TypeValues`` (of type `String`)
    */
    case type = "network.type"

    /** 
      The state of network connection
    */
    public struct ConnectionStateValues: CustomStringConvertible {
      public static let closed = ConnectionStateValues("closed") 
      public static let closeWait = ConnectionStateValues("close_wait") 
      public static let closing = ConnectionStateValues("closing") 
      public static let established = ConnectionStateValues("established") 
      public static let finWait1 = ConnectionStateValues("fin_wait_1") 
      public static let finWait2 = ConnectionStateValues("fin_wait_2") 
      public static let lastAck = ConnectionStateValues("last_ack") 
      public static let listen = ConnectionStateValues("listen") 
      public static let synReceived = ConnectionStateValues("syn_received") 
      public static let synSent = ConnectionStateValues("syn_sent") 
      public static let timeWait = ConnectionStateValues("time_wait") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
    */
    public struct ConnectionSubtypeValues: CustomStringConvertible {
      
      /// GPRS
      public static let gprs = ConnectionSubtypeValues("gprs") 
      
      /// EDGE
      public static let edge = ConnectionSubtypeValues("edge") 
      
      /// UMTS
      public static let umts = ConnectionSubtypeValues("umts") 
      
      /// CDMA
      public static let cdma = ConnectionSubtypeValues("cdma") 
      
      /// EVDO Rel. 0
      public static let evdo0 = ConnectionSubtypeValues("evdo_0") 
      
      /// EVDO Rev. A
      public static let evdoA = ConnectionSubtypeValues("evdo_a") 
      
      /// CDMA2000 1XRTT
      public static let cdma20001xrtt = ConnectionSubtypeValues("cdma2000_1xrtt") 
      
      /// HSDPA
      public static let hsdpa = ConnectionSubtypeValues("hsdpa") 
      
      /// HSUPA
      public static let hsupa = ConnectionSubtypeValues("hsupa") 
      
      /// HSPA
      public static let hspa = ConnectionSubtypeValues("hspa") 
      
      /// IDEN
      public static let iden = ConnectionSubtypeValues("iden") 
      
      /// EVDO Rev. B
      public static let evdoB = ConnectionSubtypeValues("evdo_b") 
      
      /// LTE
      public static let lte = ConnectionSubtypeValues("lte") 
      
      /// EHRPD
      public static let ehrpd = ConnectionSubtypeValues("ehrpd") 
      
      /// HSPAP
      public static let hspap = ConnectionSubtypeValues("hspap") 
      
      /// GSM
      public static let gsm = ConnectionSubtypeValues("gsm") 
      
      /// TD-SCDMA
      public static let tdScdma = ConnectionSubtypeValues("td_scdma") 
      
      /// IWLAN
      public static let iwlan = ConnectionSubtypeValues("iwlan") 
      
      /// 5G NR (New Radio)
      public static let nr = ConnectionSubtypeValues("nr") 
      
      /// 5G NRNSA (New Radio Non-Standalone)
      public static let nrnsa = ConnectionSubtypeValues("nrnsa") 
      
      /// LTE CA
      public static let lteCa = ConnectionSubtypeValues("lte_ca") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The internet connection type.
    */
    public struct ConnectionTypeValues: CustomStringConvertible {
      public static let wifi = ConnectionTypeValues("wifi") 
      public static let wired = ConnectionTypeValues("wired") 
      public static let cell = ConnectionTypeValues("cell") 
      public static let unavailable = ConnectionTypeValues("unavailable") 
      public static let unknown = ConnectionTypeValues("unknown") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The network IO operation direction.
    */
    public struct IoDirectionValues: CustomStringConvertible {
      public static let transmit = IoDirectionValues("transmit") 
      public static let receive = IoDirectionValues("receive") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    */
    public struct TransportValues: CustomStringConvertible {
      
      /// TCP
      public static let tcp = TransportValues("tcp") 
      
      /// UDP
      public static let udp = TransportValues("udp") 
      
      /// Named or anonymous pipe.
      public static let pipe = TransportValues("pipe") 
      
      /// Unix domain socket
      public static let unix = TransportValues("unix") 
      
      /// QUIC
      public static let quic = TransportValues("quic") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.
    */
    public struct TypeValues: CustomStringConvertible {
      
      /// IPv4
      public static let ipv4 = TypeValues("ipv4") 
      
      /// IPv6
      public static let ipv6 = TypeValues("ipv6") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}