/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Jvm: String {
    /**
     Name of the buffer pool.
      // Examples
      attributes[.jvmBufferPoolName] = "mapped"
      attributes[.jvmBufferPoolName] = "direct"
     - Note: Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
     - Requires: Value type should be `String`
    */
    case jvmBufferPoolName = "jvm.buffer.pool.name"

    /**
     Name of the garbage collector action.
      // Examples
      attributes[.jvmGcAction] = "end of minor GC"
      attributes[.jvmGcAction] = "end of major GC"
     - Note: Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).
     - Requires: Value type should be `String`
    */
    case jvmGcAction = "jvm.gc.action"

    /**
     Name of the garbage collector cause.
      // Examples
      attributes[.jvmGcCause] = "System.gc()"
      attributes[.jvmGcCause] = "Allocation Failure"
     - Note: Garbage collector cause is generally obtained via [GarbageCollectionNotificationInfo#getGcCause()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcCause()).
     - Requires: Value type should be `String`
    */
    case jvmGcCause = "jvm.gc.cause"

    /**
     Name of the garbage collector.
      // Examples
      attributes[.jvmGcName] = "G1 Young Generation"
      attributes[.jvmGcName] = "G1 Old Generation"
     - Note: Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).
     - Requires: Value type should be `String`
    */
    case jvmGcName = "jvm.gc.name"

    /**
     Name of the memory pool.
      // Examples
      attributes[.jvmMemoryPoolName] = "G1 Old Gen"
      attributes[.jvmMemoryPoolName] = "G1 Eden space"
      attributes[.jvmMemoryPoolName] = "G1 Survivor Space"
     - Note: Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
     - Requires: Value type should be `String`
    */
    case jvmMemoryPoolName = "jvm.memory.pool.name"

    /**
     The type of memory.
      // Examples
      attributes[.jvmMemoryType] = heap
      attributes[.jvmMemoryType] = non_heap
     - Requires: Value should be one of [`/output/Attributes/Jvm_attributes.swift.JvmMemoryTypeValues`](x-source-tag://otelJvmMemoryTypeValues) (of type `String`)
    */
    case jvmMemoryType = "jvm.memory.type"

    /**
     Whether the thread is daemon or not.
     - Requires: Value type should be `Bool`
    */
    case jvmThreadDaemon = "jvm.thread.daemon"

    /**
     State of the thread.
      // Examples
      attributes[.jvmThreadState] = runnable
      attributes[.jvmThreadState] = blocked
     - Requires: Value should be one of [`/output/Attributes/Jvm_attributes.swift.JvmThreadStateValues`](x-source-tag://otelJvmThreadStateValues) (of type `String`)
    */
    case jvmThreadState = "jvm.thread.state"


    /** 
      The type of memory.
    */
    /// - Tag: otelJvmMemoryTypeValues
    public struct JvmMemoryTypeValues: CustomStringConvertible {
      /**
      Heap memory.
      */
      public static let heap = JvmMemoryTypeValues("heap") 
      /**
      Non-heap memory
      */
      public static let nonHeap = JvmMemoryTypeValues("non_heap") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      State of the thread.
    */
    /// - Tag: otelJvmThreadStateValues
    public struct JvmThreadStateValues: CustomStringConvertible {
      /**
      A thread that has not yet started is in this state.
      */
      public static let new = JvmThreadStateValues("new") 
      /**
      A thread executing in the Java virtual machine is in this state.
      */
      public static let runnable = JvmThreadStateValues("runnable") 
      /**
      A thread that is blocked waiting for a monitor lock is in this state.
      */
      public static let blocked = JvmThreadStateValues("blocked") 
      /**
      A thread that is waiting indefinitely for another thread to perform a particular action is in this state.
      */
      public static let waiting = JvmThreadStateValues("waiting") 
      /**
      A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.
      */
      public static let timedWaiting = JvmThreadStateValues("timed_waiting") 
      /**
      A thread that has exited is in this state.
      */
      public static let terminated = JvmThreadStateValues("terminated") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}