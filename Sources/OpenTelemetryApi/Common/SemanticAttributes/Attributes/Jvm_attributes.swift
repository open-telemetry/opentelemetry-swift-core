/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Jvm: String {

    /**
     Name of the buffer pool.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.bufferPoolName.rawValue] = "mapped"
      attributes[SemanticConventions.Jvm.bufferPoolName.rawValue] = "direct"
      ```

     - Note: Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).

     - Requires: Value type should be `String`
    */
    case bufferPoolName = "jvm.buffer.pool.name"

    /**
     Name of the garbage collector action.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.gcAction.rawValue] = "end of minor GC"
      attributes[SemanticConventions.Jvm.gcAction.rawValue] = "end of major GC"
      ```

     - Note: Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).

     - Requires: Value type should be `String`
    */
    case gcAction = "jvm.gc.action"

    /**
     Name of the garbage collector cause.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.gcCause.rawValue] = "System.gc()"
      attributes[SemanticConventions.Jvm.gcCause.rawValue] = "Allocation Failure"
      ```

     - Note: Garbage collector cause is generally obtained via [GarbageCollectionNotificationInfo#getGcCause()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcCause()).

     - Requires: Value type should be `String`
    */
    case gcCause = "jvm.gc.cause"

    /**
     Name of the garbage collector.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.gcName.rawValue] = "G1 Young Generation"
      attributes[SemanticConventions.Jvm.gcName.rawValue] = "G1 Old Generation"
      ```

     - Note: Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).

     - Requires: Value type should be `String`
    */
    case gcName = "jvm.gc.name"

    /**
     Name of the memory pool.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.memoryPoolName.rawValue] = "G1 Old Gen"
      attributes[SemanticConventions.Jvm.memoryPoolName.rawValue] = "G1 Eden space"
      attributes[SemanticConventions.Jvm.memoryPoolName.rawValue] = "G1 Survivor Space"
      ```

     - Note: Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).

     - Requires: Value type should be `String`
    */
    case memoryPoolName = "jvm.memory.pool.name"

    /**
     The type of memory.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.memoryType.rawValue] = .heap
      attributes[SemanticConventions.Jvm.memoryType.rawValue] = .non_heap
      ```

     - Requires: Value should be one of ``MemoryTypeValues`` (of type `String`)
    */
    case memoryType = "jvm.memory.type"

    /**
     Whether the thread is daemon or not.

     - Requires: Value type should be `Bool`
    */
    case threadDaemon = "jvm.thread.daemon"

    /**
     State of the thread.

      - Examples:
      ```
      attributes[SemanticConventions.Jvm.threadState.rawValue] = .runnable
      attributes[SemanticConventions.Jvm.threadState.rawValue] = .blocked
      ```

     - Requires: Value should be one of ``ThreadStateValues`` (of type `String`)
    */
    case threadState = "jvm.thread.state"

    /** 
      The type of memory.
    */
    public struct MemoryTypeValues: CustomStringConvertible {
      
      /// Heap memory.
      public static let heap = MemoryTypeValues("heap") 
      
      /// Non-heap memory
      public static let nonHeap = MemoryTypeValues("non_heap") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      State of the thread.
    */
    public struct ThreadStateValues: CustomStringConvertible {
      
      /// A thread that has not yet started is in this state.
      public static let new = ThreadStateValues("new") 
      
      /// A thread executing in the Java virtual machine is in this state.
      public static let runnable = ThreadStateValues("runnable") 
      
      /// A thread that is blocked waiting for a monitor lock is in this state.
      public static let blocked = ThreadStateValues("blocked") 
      
      /// A thread that is waiting indefinitely for another thread to perform a particular action is in this state.
      public static let waiting = ThreadStateValues("waiting") 
      
      /// A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.
      public static let timedWaiting = ThreadStateValues("timed_waiting") 
      
      /// A thread that has exited is in this state.
      public static let terminated = ThreadStateValues("terminated") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}