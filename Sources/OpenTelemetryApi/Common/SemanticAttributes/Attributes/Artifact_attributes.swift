/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Artifact: String {

    /**
     The provenance filename of the built attestation which directly relates to the build artifact filename. This filename SHOULD accompany the artifact at publish time. See the [SLSA Relationship](https://slsa.dev/spec/v1.0/distributing-provenance#relationship-between-artifacts-and-attestations) specification for more information.

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.attestationFilename.rawValue] = "golang-binary-amd64-v0.1.0.attestation"
      attributes[SemanticConventions.Artifact.attestationFilename.rawValue] = "docker-image-amd64-v0.1.0.intoto.json1"
      attributes[SemanticConventions.Artifact.attestationFilename.rawValue] = "release-1.tar.gz.attestation"
      attributes[SemanticConventions.Artifact.attestationFilename.rawValue] = "file-name-package.tar.gz.intoto.json1"
      ```

     - Requires: Value type should be `String`
    */
    case attestationFilename = "artifact.attestation.filename"

    /**
     The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the built attestation. Some envelopes in the [software attestation space](https://github.com/in-toto/attestation/tree/main/spec) also refer to this as the **digest**.

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.attestationHash.rawValue] = "1b31dfcd5b7f9267bf2ff47651df1cfb9147b9e4df1f335accf65b4cda498408"
      ```

     - Requires: Value type should be `String`
    */
    case attestationHash = "artifact.attestation.hash"

    /**
     The id of the build [software attestation](https://slsa.dev/attestation-model).

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.attestationId.rawValue] = "123"
      ```

     - Requires: Value type should be `String`
    */
    case attestationId = "artifact.attestation.id"

    /**
     The human readable file name of the artifact, typically generated during build and release processes. Often includes the package name and version in the file name.

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.filename.rawValue] = "golang-binary-amd64-v0.1.0"
      attributes[SemanticConventions.Artifact.filename.rawValue] = "docker-image-amd64-v0.1.0"
      attributes[SemanticConventions.Artifact.filename.rawValue] = "release-1.tar.gz"
      attributes[SemanticConventions.Artifact.filename.rawValue] = "file-name-package.tar.gz"
      ```

     - Note: This file name can also act as the [Package Name](https://slsa.dev/spec/v1.0/terminology#package-model)
       in cases where the package ecosystem maps accordingly.
       Additionally, the artifact [can be published](https://slsa.dev/spec/v1.0/terminology#software-supply-chain)
       for others, but that is not a guarantee.

     - Requires: Value type should be `String`
    */
    case filename = "artifact.filename"

    /**
     The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), often found in checksum.txt on a release of the artifact and used to verify package integrity.

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.hash.rawValue] = "9ff4c52759e2c4ac70b7d517bc7fcdc1cda631ca0045271ddd1b192544f8a3e9"
      ```

     - Note: The specific algorithm used to create the cryptographic hash value is
       not defined. In situations where an artifact has multiple
       cryptographic hashes, it is up to the implementer to choose which
       hash value to set here; this should be the most secure hash algorithm
       that is suitable for the situation and consistent with the
       corresponding attestation. The implementer can then provide the other
       hash values through an additional set of attribute extensions as they
       deem necessary.

     - Requires: Value type should be `String`
    */
    case hash = "artifact.hash"

    /**
     The [Package URL](https://github.com/package-url/purl-spec) of the [package artifact](https://slsa.dev/spec/v1.0/terminology#package-model) provides a standard way to identify and locate the packaged artifact.

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.purl.rawValue] = "pkg:github/package-url/purl-spec@1209109710924"
      attributes[SemanticConventions.Artifact.purl.rawValue] = "pkg:npm/foo@12.12.3"
      ```

     - Requires: Value type should be `String`
    */
    case purl = "artifact.purl"

    /**
     The version of the artifact.

      - Examples:
      ```
      attributes[SemanticConventions.Artifact.version.rawValue] = "v0.1.0"
      attributes[SemanticConventions.Artifact.version.rawValue] = "1.2.1"
      attributes[SemanticConventions.Artifact.version.rawValue] = "122691-build"
      ```

     - Requires: Value type should be `String`
    */
    case version = "artifact.version"
  }
}