/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Geo: String {

    /**
     Two-letter code representing continent’s name.

     - Requires: Value should be one of ``ContinentCodeValues`` (of type `String`)
    */
    case continentCode = "geo.continent.code"

    /**
     Two-letter ISO Country Code ([ISO 3166-1 alpha2](https://wikipedia.org/wiki/ISO_3166-1#Codes)).

      - Examples:
      ```
      attributes[SemanticConventions.Geo.countryIsoCode.rawValue] = "CA"
      ```

     - Requires: Value type should be `String`
    */
    case countryIsoCode = "geo.country.iso_code"

    /**
     Locality name. Represents the name of a city, town, village, or similar populated place.

      - Examples:
      ```
      attributes[SemanticConventions.Geo.localityName.rawValue] = "Montreal"
      attributes[SemanticConventions.Geo.localityName.rawValue] = "Berlin"
      ```

     - Requires: Value type should be `String`
    */
    case localityName = "geo.locality.name"

    /**
     Latitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).

      - Examples:
      ```
      attributes[SemanticConventions.Geo.locationLat.rawValue] = 45.505918
      ```

     - Requires: Value type should be `Double`
    */
    case locationLat = "geo.location.lat"

    /**
     Longitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).

      - Examples:
      ```
      attributes[SemanticConventions.Geo.locationLon.rawValue] = -73.61483
      ```

     - Requires: Value type should be `Double`
    */
    case locationLon = "geo.location.lon"

    /**
     Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

      - Examples:
      ```
      attributes[SemanticConventions.Geo.postalCode.rawValue] = "94040"
      ```

     - Requires: Value type should be `String`
    */
    case postalCode = "geo.postal_code"

    /**
     Region ISO code ([ISO 3166-2](https://wikipedia.org/wiki/ISO_3166-2)).

      - Examples:
      ```
      attributes[SemanticConventions.Geo.regionIsoCode.rawValue] = "CA-QC"
      ```

     - Requires: Value type should be `String`
    */
    case regionIsoCode = "geo.region.iso_code"

    /** 
      Two-letter code representing continent’s name.
    */
    public struct ContinentCodeValues: CustomStringConvertible {
      
      /// Africa
      public static let af = ContinentCodeValues("AF") 
      
      /// Antarctica
      public static let an = ContinentCodeValues("AN") 
      
      /// Asia
      public static let _as = ContinentCodeValues("AS") 
      
      /// Europe
      public static let eu = ContinentCodeValues("EU") 
      
      /// North America
      public static let na = ContinentCodeValues("NA") 
      
      /// Oceania
      public static let oc = ContinentCodeValues("OC") 
      
      /// South America
      public static let sa = ContinentCodeValues("SA") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}