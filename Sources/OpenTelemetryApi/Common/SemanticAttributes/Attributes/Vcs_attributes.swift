/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Vcs: String {
    /**
     The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
      // Examples
      attributes[.vcsChangeId] = "123"
     - Requires: Value type should be `String`
    */
    case vcsChangeId = "vcs.change.id"

    /**
     The state of the change (pull request/merge request/changelist).
      // Examples
      attributes[.vcsChangeState] = open
      attributes[.vcsChangeState] = closed
      attributes[.vcsChangeState] = merged
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsChangeStateValues`](x-source-tag://otelVcsChangeStateValues) (of type `String`)
    */
    case vcsChangeState = "vcs.change.state"

    /**
     The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.
      // Examples
      attributes[.vcsChangeTitle] = "Fixes broken thing"
      attributes[.vcsChangeTitle] = "feat: add my new feature"
      attributes[.vcsChangeTitle] = "[chore] update dependency"
     - Requires: Value type should be `String`
    */
    case vcsChangeTitle = "vcs.change.title"

    /**
     The type of line change being measured on a branch or change.
      // Examples
      attributes[.vcsLineChangeType] = added
      attributes[.vcsLineChangeType] = removed
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsLineChangeTypeValues`](x-source-tag://otelVcsLineChangeTypeValues) (of type `String`)
    */
    case vcsLineChangeType = "vcs.line_change.type"

    /**
     The group owner within the version control system.
      // Examples
      attributes[.vcsOwnerName] = "my-org"
      attributes[.vcsOwnerName] = "myteam"
      attributes[.vcsOwnerName] = "business-unit"
     - Requires: Value type should be `String`
    */
    case vcsOwnerName = "vcs.owner.name"

    /**
     The name of the version control system provider.
      // Examples
      attributes[.vcsProviderName] = github
      attributes[.vcsProviderName] = gitlab
      attributes[.vcsProviderName] = gitea
      attributes[.vcsProviderName] = bitbucket
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsProviderNameValues`](x-source-tag://otelVcsProviderNameValues) (of type `String`)
    */
    case vcsProviderName = "vcs.provider.name"

    /**
     The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
      // Examples
      attributes[.vcsRefBaseName] = "my-feature-branch"
      attributes[.vcsRefBaseName] = "tag-1-test"
     - Note: `base` refers to the starting point of a change. For example, `main`
     would be the base reference of type branch if you've created a new
     reference of type branch from it and created new commits.
     - Requires: Value type should be `String`
    */
    case vcsRefBaseName = "vcs.ref.base.name"

    /**
     The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
      // Examples
      attributes[.vcsRefBaseRevision] = "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc"
      attributes[.vcsRefBaseRevision] = "main"
      attributes[.vcsRefBaseRevision] = "123"
      attributes[.vcsRefBaseRevision] = "HEAD"
     - Note: `base` refers to the starting point of a change. For example, `main`
     would be the base reference of type branch if you've created a new
     reference of type branch from it and created new commits. The
     revision can be a full [hash value (see
     glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
     of the recorded change to a ref within a repository pointing to a
     commit [commit](https://git-scm.com/docs/git-commit) object. It does
     not necessarily have to be a hash; it can simply define a [revision
     number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
     which is an integer that is monotonically increasing. In cases where
     it is identical to the `ref.base.name`, it SHOULD still be included.
     It is up to the implementer to decide which value to set as the
     revision based on the VCS system and situational context.
     - Requires: Value type should be `String`
    */
    case vcsRefBaseRevision = "vcs.ref.base.revision"

    /**
     The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
      // Examples
      attributes[.vcsRefBaseType] = branch
      attributes[.vcsRefBaseType] = tag
     - Note: `base` refers to the starting point of a change. For example, `main`
     would be the base reference of type branch if you've created a new
     reference of type branch from it and created new commits.
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsRefBaseTypeValues`](x-source-tag://otelVcsRefBaseTypeValues) (of type `String`)
    */
    case vcsRefBaseType = "vcs.ref.base.type"

    /**
     The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
      // Examples
      attributes[.vcsRefHeadName] = "my-feature-branch"
      attributes[.vcsRefHeadName] = "tag-1-test"
     - Note: `head` refers to where you are right now; the current reference at a
     given time.
     - Requires: Value type should be `String`
    */
    case vcsRefHeadName = "vcs.ref.head.name"

    /**
     The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
      // Examples
      attributes[.vcsRefHeadRevision] = "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc"
      attributes[.vcsRefHeadRevision] = "main"
      attributes[.vcsRefHeadRevision] = "123"
      attributes[.vcsRefHeadRevision] = "HEAD"
     - Note: `head` refers to where you are right now; the current reference at a
     given time.The revision can be a full [hash value (see
     glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
     of the recorded change to a ref within a repository pointing to a
     commit [commit](https://git-scm.com/docs/git-commit) object. It does
     not necessarily have to be a hash; it can simply define a [revision
     number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
     which is an integer that is monotonically increasing. In cases where
     it is identical to the `ref.head.name`, it SHOULD still be included.
     It is up to the implementer to decide which value to set as the
     revision based on the VCS system and situational context.
     - Requires: Value type should be `String`
    */
    case vcsRefHeadRevision = "vcs.ref.head.revision"

    /**
     The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
      // Examples
      attributes[.vcsRefHeadType] = branch
      attributes[.vcsRefHeadType] = tag
     - Note: `head` refers to where you are right now; the current reference at a
     given time.
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsRefHeadTypeValues`](x-source-tag://otelVcsRefHeadTypeValues) (of type `String`)
    */
    case vcsRefHeadType = "vcs.ref.head.type"

    /**
     The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
      // Examples
      attributes[.vcsRefType] = branch
      attributes[.vcsRefType] = tag
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsRefTypeValues`](x-source-tag://otelVcsRefTypeValues) (of type `String`)
    */
    case vcsRefType = "vcs.ref.type"

    /**
     The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
      // Examples
      attributes[.vcsRepositoryName] = "semantic-conventions"
      attributes[.vcsRepositoryName] = "my-cool-repo"
     - Note: Due to it only being the name, it can clash with forks of the same
     repository if collecting telemetry across multiple orgs or groups in
     the same backends.
     - Requires: Value type should be `String`
    */
    case vcsRepositoryName = "vcs.repository.name"

    /**
     The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
      // Examples
      attributes[.vcsRepositoryUrlFull] = "https://github.com/opentelemetry/open-telemetry-collector-contrib"
      attributes[.vcsRepositoryUrlFull] = "https://gitlab.com/my-org/my-project/my-projects-project/repo"
     - Note: In Git Version Control Systems, the canonical URL SHOULD NOT include
     the `.git` extension.
     - Requires: Value type should be `String`
    */
    case vcsRepositoryUrlFull = "vcs.repository.url.full"

    /**
     The type of revision comparison.
      // Examples
      attributes[.vcsRevisionDeltaDirection] = ahead
      attributes[.vcsRevisionDeltaDirection] = behind
     - Requires: Value should be one of [`/output/Attributes/Vcs_attributes.swift.VcsRevisionDeltaDirectionValues`](x-source-tag://otelVcsRevisionDeltaDirectionValues) (of type `String`)
    */
    case vcsRevisionDeltaDirection = "vcs.revision_delta.direction"


    /** 
      The state of the change (pull request/merge request/changelist).
    */
    /// - Tag: otelVcsChangeStateValues
    public struct VcsChangeStateValues: CustomStringConvertible {
      /**
      Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
      */
      public static let open = VcsChangeStateValues("open") 
      /**
      WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
      */
      public static let wip = VcsChangeStateValues("wip") 
      /**
      Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
      */
      public static let closed = VcsChangeStateValues("closed") 
      /**
      Merged indicates that the change has been successfully integrated into the target codebase.
      */
      public static let merged = VcsChangeStateValues("merged") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of line change being measured on a branch or change.
    */
    /// - Tag: otelVcsLineChangeTypeValues
    public struct VcsLineChangeTypeValues: CustomStringConvertible {
      /**
      How many lines were added.
      */
      public static let added = VcsLineChangeTypeValues("added") 
      /**
      How many lines were removed.
      */
      public static let removed = VcsLineChangeTypeValues("removed") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The name of the version control system provider.
    */
    /// - Tag: otelVcsProviderNameValues
    public struct VcsProviderNameValues: CustomStringConvertible {
      /**
      [GitHub](https://github.com)
      */
      public static let github = VcsProviderNameValues("github") 
      /**
      [GitLab](https://gitlab.com)
      */
      public static let gitlab = VcsProviderNameValues("gitlab") 
      /**
      [Gitea](https://gitea.io)
      */
      public static let gitea = VcsProviderNameValues("gitea") 
      /**
      [Bitbucket](https://bitbucket.org)
      */
      public static let bitbucket = VcsProviderNameValues("bitbucket") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    */
    /// - Tag: otelVcsRefBaseTypeValues
    public struct VcsRefBaseTypeValues: CustomStringConvertible {
      /**
      [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
      */
      public static let branch = VcsRefBaseTypeValues("branch") 
      /**
      [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
      */
      public static let tag = VcsRefBaseTypeValues("tag") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    */
    /// - Tag: otelVcsRefHeadTypeValues
    public struct VcsRefHeadTypeValues: CustomStringConvertible {
      /**
      [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
      */
      public static let branch = VcsRefHeadTypeValues("branch") 
      /**
      [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
      */
      public static let tag = VcsRefHeadTypeValues("tag") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    */
    /// - Tag: otelVcsRefTypeValues
    public struct VcsRefTypeValues: CustomStringConvertible {
      /**
      [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
      */
      public static let branch = VcsRefTypeValues("branch") 
      /**
      [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
      */
      public static let tag = VcsRefTypeValues("tag") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of revision comparison.
    */
    /// - Tag: otelVcsRevisionDeltaDirectionValues
    public struct VcsRevisionDeltaDirectionValues: CustomStringConvertible {
      /**
      How many revisions the change is behind the target ref.
      */
      public static let behind = VcsRevisionDeltaDirectionValues("behind") 
      /**
      How many revisions the change is ahead of the target ref.
      */
      public static let ahead = VcsRevisionDeltaDirectionValues("ahead") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}