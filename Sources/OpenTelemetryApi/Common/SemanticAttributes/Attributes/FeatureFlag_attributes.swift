/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum FeatureFlag: String {

    /**
     The unique identifier for the flag evaluation context. For example, the targeting key.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.contextId.rawValue] = "5157782b-2203-4c80-a857-dbbd5e7761db"
      ```

     - Requires: Value type should be `String`
    */
    case contextId = "feature_flag.context.id"

    /**
     The lookup key of the feature flag.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.key.rawValue] = "logo-color"
      ```

     - Requires: Value type should be `String`
    */
    case key = "feature_flag.key"

    /**
     Identifies the feature flag provider.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.providerName.rawValue] = "Flag Manager"
      ```

     - Requires: Value type should be `String`
    */
    case providerName = "feature_flag.provider.name"

    /**
     The reason code which shows how a feature flag value was determined.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.resultReason.rawValue] = .static
      attributes[SemanticConventions.FeatureFlag.resultReason.rawValue] = .targeting_match
      attributes[SemanticConventions.FeatureFlag.resultReason.rawValue] = .error
      attributes[SemanticConventions.FeatureFlag.resultReason.rawValue] = .default
      ```

     - Requires: Value should be one of ``ResultReasonValues`` (of type `String`)
    */
    case resultReason = "feature_flag.result.reason"

    /**
     The evaluated value of the feature flag.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.resultValue.rawValue] = #ff0000
      attributes[SemanticConventions.FeatureFlag.resultValue.rawValue] = true
      attributes[SemanticConventions.FeatureFlag.resultValue.rawValue] = 3
      ```

     - Note: With some feature flag providers, feature flag results can be quite large or contain private or sensitive details.
       Because of this, `feature_flag.result.variant` is often the preferred attribute if it is available.

       It may be desirable to redact or otherwise limit the size and scope of `feature_flag.result.value` if possible.
       Because the evaluated flag value is unstructured and may be any type, it is left to the instrumentation author to determine how best to achieve this.

     - Requires: Value type should be `any`
    */
    case resultValue = "feature_flag.result.value"

    /**
     A semantic identifier for an evaluated flag value.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.resultVariant.rawValue] = "red"
      attributes[SemanticConventions.FeatureFlag.resultVariant.rawValue] = "true"
      attributes[SemanticConventions.FeatureFlag.resultVariant.rawValue] = "on"
      ```

     - Note: A semantic identifier, commonly referred to as a variant, provides a means
       for referring to a value without including the value itself. This can
       provide additional context for understanding the meaning behind a value.
       For example, the variant `red` maybe be used for the value `#c05543`.

     - Requires: Value type should be `String`
    */
    case resultVariant = "feature_flag.result.variant"

    /**
     The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to which the feature flag belongs.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.setId.rawValue] = "proj-1"
      attributes[SemanticConventions.FeatureFlag.setId.rawValue] = "ab98sgs"
      attributes[SemanticConventions.FeatureFlag.setId.rawValue] = "service1/dev"
      ```

     - Requires: Value type should be `String`
    */
    case setId = "feature_flag.set.id"

    /**
     The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.

      - Examples:
      ```
      attributes[SemanticConventions.FeatureFlag.version.rawValue] = "1"
      attributes[SemanticConventions.FeatureFlag.version.rawValue] = "01ABCDEF"
      ```

     - Requires: Value type should be `String`
    */
    case version = "feature_flag.version"

    /** 
      The reason code which shows how a feature flag value was determined.
    */
    public struct ResultReasonValues: CustomStringConvertible {
      
      /// The resolved value is static (no dynamic evaluation).
      public static let _static = ResultReasonValues("static") 
      
      /// The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).
      public static let _default = ResultReasonValues("default") 
      
      /// The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.
      public static let targetingMatch = ResultReasonValues("targeting_match") 
      
      /// The resolved value was the result of pseudorandom assignment.
      public static let split = ResultReasonValues("split") 
      
      /// The resolved value was retrieved from cache.
      public static let cached = ResultReasonValues("cached") 
      
      /// The resolved value was the result of the flag being disabled in the management system.
      public static let disabled = ResultReasonValues("disabled") 
      
      /// The reason for the resolved value could not be determined.
      public static let unknown = ResultReasonValues("unknown") 
      
      /// The resolved value is non-authoritative or possibly out of date
      public static let stale = ResultReasonValues("stale") 
      
      /// The resolved value was the result of an error.
      public static let error = ResultReasonValues("error") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}