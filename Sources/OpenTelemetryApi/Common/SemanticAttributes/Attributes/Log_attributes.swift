/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Log: String {
    /**
     The basename of the file.
      // Examples
      attributes[.logFileName] = "audit.log"
     - Requires: Value type should be `String`
    */
    case logFileName = "log.file.name"

    /**
     The basename of the file, with symlinks resolved.
      // Examples
      attributes[.logFileNameResolved] = "uuid.log"
     - Requires: Value type should be `String`
    */
    case logFileNameResolved = "log.file.name_resolved"

    /**
     The full path to the file.
      // Examples
      attributes[.logFilePath] = "/var/log/mysql/audit.log"
     - Requires: Value type should be `String`
    */
    case logFilePath = "log.file.path"

    /**
     The full path to the file, with symlinks resolved.
      // Examples
      attributes[.logFilePathResolved] = "/var/lib/docker/uuid.log"
     - Requires: Value type should be `String`
    */
    case logFilePathResolved = "log.file.path_resolved"

    /**
     The stream associated with the log. See below for a list of well-known values.
     - Requires: Value should be one of [`/output/Attributes/Log_attributes.swift.LogIostreamValues`](x-source-tag://otelLogIostreamValues) (of type `String`)
    */
    case logIostream = "log.iostream"

    /**
     The complete original Log Record.
      // Examples
      attributes[.logRecordOriginal] = "77 <86>1 2015-08-06T21:58:59.694Z 192.168.2.133 inactive - - - Something happened"
      attributes[.logRecordOriginal] = "[INFO] 8/3/24 12:34:56 Something happened"
     - Note: This value MAY be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)
     - Requires: Value type should be `String`
    */
    case logRecordOriginal = "log.record.original"

    /**
     A unique identifier for the Log Record.
      // Examples
      attributes[.logRecordUid] = "01ARZ3NDEKTSV4RRFFQ69G5FAV"
     - Note: If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.
     The id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.
     - Requires: Value type should be `String`
    */
    case logRecordUid = "log.record.uid"


    /** 
      The stream associated with the log. See below for a list of well-known values.
    */
    /// - Tag: otelLogIostreamValues
    public struct LogIostreamValues: CustomStringConvertible {
      /**
      Logs from stdout stream
      */
      public static let stdout = LogIostreamValues("stdout") 
      /**
      Events from stderr stream
      */
      public static let stderr = LogIostreamValues("stderr") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}