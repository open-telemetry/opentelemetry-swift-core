/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum System: String {
    /**
     Deprecated, use `cpu.logical_number` instead.

      - Examples:
      ```
      attributes[SemanticConventions.System.cpuLogicalNumber.rawValue] = 1
      ```

     - Requires: Value type should be `Int`
    */
    case cpuLogicalNumber = "system.cpu.logical_number"

    /**
     The device identifier

      - Examples:
      ```
      attributes[SemanticConventions.System.device.rawValue] = "(identifier)"
      ```

     - Requires: Value type should be `String`
    */
    case device = "system.device"

    /**
     The filesystem mode

      - Examples:
      ```
      attributes[SemanticConventions.System.fileMode.rawValue] = "rw, ro"
      ```

     - Requires: Value type should be `String`
    */
    case fileMode = "system.filesystem.mode"

    /**
     The filesystem mount path

      - Examples:
      ```
      attributes[SemanticConventions.System.fileMountpoint.rawValue] = "/mnt/data"
      ```

     - Requires: Value type should be `String`
    */
    case fileMountpoint = "system.filesystem.mountpoint"

    /**
     The filesystem state

      - Examples:
      ```
      attributes[SemanticConventions.System.fileState.rawValue] = .used
      ```

     - Requires: Value should be one of [`SemanticContentions.System.FileStateValues`](x-source-tag://SemanticConventions.system.FileStateValues) (of type `String`)
    */
    case fileState = "system.filesystem.state"

    /**
     The filesystem type

      - Examples:
      ```
      attributes[SemanticConventions.System.fileType.rawValue] = .ext4
      ```

     - Requires: Value should be one of [`SemanticContentions.System.FileTypeValues`](x-source-tag://SemanticConventions.system.FileTypeValues) (of type `String`)
    */
    case fileType = "system.filesystem.type"

    /**
     The memory state

      - Examples:
      ```
      attributes[SemanticConventions.System.memoryState.rawValue] = .free
      attributes[SemanticConventions.System.memoryState.rawValue] = .cached
      ```

     - Requires: Value should be one of [`SemanticContentions.System.MemoryStateValues`](x-source-tag://SemanticConventions.system.MemoryStateValues) (of type `String`)
    */
    case memoryState = "system.memory.state"

    /**
     The paging access direction

      - Examples:
      ```
      attributes[SemanticConventions.System.pagingDirection.rawValue] = .in
      ```

     - Requires: Value should be one of [`SemanticContentions.System.PagingDirectionValues`](x-source-tag://SemanticConventions.system.PagingDirectionValues) (of type `String`)
    */
    case pagingDirection = "system.paging.direction"

    /**
     The memory paging state

      - Examples:
      ```
      attributes[SemanticConventions.System.pagingState.rawValue] = .free
      ```

     - Requires: Value should be one of [`SemanticContentions.System.PagingStateValues`](x-source-tag://SemanticConventions.system.PagingStateValues) (of type `String`)
    */
    case pagingState = "system.paging.state"

    /**
     The memory paging type

      - Examples:
      ```
      attributes[SemanticConventions.System.pagingType.rawValue] = .minor
      ```

     - Requires: Value should be one of [`SemanticContentions.System.PagingTypeValues`](x-source-tag://SemanticConventions.system.PagingTypeValues) (of type `String`)
    */
    case pagingType = "system.paging.type"

    /**
     The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)

      - Examples:
      ```
      attributes[SemanticConventions.System.processStatus.rawValue] = .running
      ```

     - Requires: Value should be one of [`SemanticContentions.System.ProcessStatusValues`](x-source-tag://SemanticConventions.system.ProcessStatusValues) (of type `String`)
    */
    case processStatus = "system.process.status"


    /** 
      The filesystem state
    */
    /// - Tag: SemanticConventions.System.FileStateValues
    public struct FileStateValues: CustomStringConvertible {
      public static let used = FileStateValues("used") 
      public static let free = FileStateValues("free") 
      public static let reserved = FileStateValues("reserved") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The filesystem type
    */
    /// - Tag: SemanticConventions.System.FileTypeValues
    public struct FileTypeValues: CustomStringConvertible {
      public static let fat32 = FileTypeValues("fat32") 
      public static let exfat = FileTypeValues("exfat") 
      public static let ntfs = FileTypeValues("ntfs") 
      public static let refs = FileTypeValues("refs") 
      public static let hfsplus = FileTypeValues("hfsplus") 
      public static let ext4 = FileTypeValues("ext4") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The memory state
    */
    /// - Tag: SemanticConventions.System.MemoryStateValues
    public struct MemoryStateValues: CustomStringConvertible {
      /**
      Actual used virtual memory in bytes.
      */
      public static let used = MemoryStateValues("used") 
      public static let free = MemoryStateValues("free") 
      public static let buffers = MemoryStateValues("buffers") 
      public static let cached = MemoryStateValues("cached") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The paging access direction
    */
    /// - Tag: SemanticConventions.System.PagingDirectionValues
    public struct PagingDirectionValues: CustomStringConvertible {
      public static let _in = PagingDirectionValues("in") 
      public static let out = PagingDirectionValues("out") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The memory paging state
    */
    /// - Tag: SemanticConventions.System.PagingStateValues
    public struct PagingStateValues: CustomStringConvertible {
      public static let used = PagingStateValues("used") 
      public static let free = PagingStateValues("free") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The memory paging type
    */
    /// - Tag: SemanticConventions.System.PagingTypeValues
    public struct PagingTypeValues: CustomStringConvertible {
      public static let major = PagingTypeValues("major") 
      public static let minor = PagingTypeValues("minor") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)
    */
    /// - Tag: SemanticConventions.System.ProcessStatusValues
    public struct ProcessStatusValues: CustomStringConvertible {
      public static let running = ProcessStatusValues("running") 
      public static let sleeping = ProcessStatusValues("sleeping") 
      public static let stopped = ProcessStatusValues("stopped") 
      public static let defunct = ProcessStatusValues("defunct") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}