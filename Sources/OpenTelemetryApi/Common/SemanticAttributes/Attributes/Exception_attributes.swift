/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Exception: String {
    /**
     The exception message.
      // Examples
      attributes[.exceptionMessage] = "Division by zero"
      attributes[.exceptionMessage] = "Can't convert 'int' object to str implicitly"
     - Requires: Value type should be `String`
    */
    case exceptionMessage = "exception.message"

    /**
     A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
      // Examples
  
   attributes[.exceptionStacktrace] = "Exception in thread \"main\" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)
   "
     - Requires: Value type should be `String`
    */
    case exceptionStacktrace = "exception.stacktrace"

    /**
     The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
      // Examples
      attributes[.exceptionType] = "java.net.ConnectException"
      attributes[.exceptionType] = "OSError"
     - Requires: Value type should be `String`
    */
    case exceptionType = "exception.type"

  }
}