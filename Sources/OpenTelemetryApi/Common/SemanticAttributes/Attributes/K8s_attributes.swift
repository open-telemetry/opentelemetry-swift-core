/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum K8s: String {
    /**
     The name of the cluster.
      // Examples
      attributes[.k8sClusterName] = "opentelemetry-cluster"
     - Requires: Value type should be `String`
    */
    case k8sClusterName = "k8s.cluster.name"

    /**
     A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.
      // Examples
      attributes[.k8sClusterUid] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
     - Note: K8s doesn't have support for obtaining a cluster ID. If this is ever
     added, we will recommend collecting the `k8s.cluster.uid` through the
     official APIs. In the meantime, we are able to use the `uid` of the
     `kube-system` namespace as a proxy for cluster ID. Read on for the
     rationale.

     Every object created in a K8s cluster is assigned a distinct UID. The
     `kube-system` namespace is used by Kubernetes itself and will exist
     for the lifetime of the cluster. Using the `uid` of the `kube-system`
     namespace is a reasonable proxy for the K8s ClusterID as it will only
     change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
     UUIDs as standardized by
     [ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).
     Which states:

     > If generated according to one of the mechanisms defined in Rec.
     > ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
     > different from all other UUIDs generated before 3603 A.D., or is
     > extremely likely to be different (depending on the mechanism chosen).

     Therefore, UIDs between clusters should be extremely unlikely to
     conflict.
     - Requires: Value type should be `String`
    */
    case k8sClusterUid = "k8s.cluster.uid"

    /**
     The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
      // Examples
      attributes[.k8sContainerName] = "redis"
     - Requires: Value type should be `String`
    */
    case k8sContainerName = "k8s.container.name"

    /**
     Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
     - Requires: Value type should be `Int`
    */
    case k8sContainerRestartCount = "k8s.container.restart_count"

    /**
     Last terminated reason of the Container.
      // Examples
      attributes[.k8sContainerStatusLastTerminatedReason] = "Evicted"
      attributes[.k8sContainerStatusLastTerminatedReason] = "Error"
     - Requires: Value type should be `String`
    */
    case k8sContainerStatusLastTerminatedReason = "k8s.container.status.last_terminated_reason"

    /**
     The reason for the container state. Corresponds to the `reason` field of the: [K8s ContainerStateWaiting](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatewaiting-v1-core) or [K8s ContainerStateTerminated](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstateterminated-v1-core)
      // Examples
      attributes[.k8sContainerStatusReason] = ContainerCreating
      attributes[.k8sContainerStatusReason] = CrashLoopBackOff
      attributes[.k8sContainerStatusReason] = CreateContainerConfigError
      attributes[.k8sContainerStatusReason] = ErrImagePull
      attributes[.k8sContainerStatusReason] = ImagePullBackOff
      attributes[.k8sContainerStatusReason] = OOMKilled
      attributes[.k8sContainerStatusReason] = Completed
      attributes[.k8sContainerStatusReason] = Error
      attributes[.k8sContainerStatusReason] = ContainerCannotRun
     - Requires: Value should be one of [`/output/Attributes/K8s_attributes.swift.K8sContainerStatusReasonValues`](x-source-tag://otelK8sContainerStatusReasonValues) (of type `String`)
    */
    case k8sContainerStatusReason = "k8s.container.status.reason"

    /**
     The state of the container. [K8s ContainerState](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstate-v1-core)
      // Examples
      attributes[.k8sContainerStatusState] = terminated
      attributes[.k8sContainerStatusState] = running
      attributes[.k8sContainerStatusState] = waiting
     - Requires: Value should be one of [`/output/Attributes/K8s_attributes.swift.K8sContainerStatusStateValues`](x-source-tag://otelK8sContainerStatusStateValues) (of type `String`)
    */
    case k8sContainerStatusState = "k8s.container.status.state"

    /**
     The cronjob annotation placed on the CronJob, the `<key>` being the annotation name, the value being the annotation value.
      // Examples
      attributes[.k8sCronjobAnnotation] = "4"
      attributes[.k8sCronjobAnnotation] = ""
     - Note: Examples:

     - An annotation `retries` with value `4` SHOULD be recorded as the
       `k8s.cronjob.annotation.retries` attribute with value `"4"`.
     - An annotation `data` with empty string value SHOULD be recorded as
       the `k8s.cronjob.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sCronjobAnnotation = "k8s.cronjob.annotation"

    /**
     The label placed on the CronJob, the `<key>` being the label name, the value being the label value.
      // Examples
      attributes[.k8sCronjobLabel] = "weekly"
      attributes[.k8sCronjobLabel] = ""
     - Note: Examples:

     - A label `type` with value `weekly` SHOULD be recorded as the
       `k8s.cronjob.label.type` attribute with value `"weekly"`.
     - A label `automated` with empty string value SHOULD be recorded as
       the `k8s.cronjob.label.automated` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sCronjobLabel = "k8s.cronjob.label"

    /**
     The name of the CronJob.
      // Examples
      attributes[.k8sCronjobName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sCronjobName = "k8s.cronjob.name"

    /**
     The UID of the CronJob.
      // Examples
      attributes[.k8sCronjobUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sCronjobUid = "k8s.cronjob.uid"

    /**
     The annotation placed on the DaemonSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sDaemonsetAnnotation] = "1"
      attributes[.k8sDaemonsetAnnotation] = ""
     - Note: Examples:

     - A label `replicas` with value `1` SHOULD be recorded
       as the `k8s.daemonset.annotation.replicas` attribute with value `"1"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.daemonset.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sDaemonsetAnnotation = "k8s.daemonset.annotation"

    /**
     The label placed on the DaemonSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sDaemonsetLabel] = "guestbook"
      attributes[.k8sDaemonsetLabel] = ""
     - Note: Examples:

     - A label `app` with value `guestbook` SHOULD be recorded
       as the `k8s.daemonset.label.app` attribute with value `"guestbook"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.daemonset.label.injected` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sDaemonsetLabel = "k8s.daemonset.label"

    /**
     The name of the DaemonSet.
      // Examples
      attributes[.k8sDaemonsetName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sDaemonsetName = "k8s.daemonset.name"

    /**
     The UID of the DaemonSet.
      // Examples
      attributes[.k8sDaemonsetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sDaemonsetUid = "k8s.daemonset.uid"

    /**
     The annotation placed on the Deployment, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sDeploymentAnnotation] = "1"
      attributes[.k8sDeploymentAnnotation] = ""
     - Note: Examples:

     - A label `replicas` with value `1` SHOULD be recorded
       as the `k8s.deployment.annotation.replicas` attribute with value `"1"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.deployment.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sDeploymentAnnotation = "k8s.deployment.annotation"

    /**
     The label placed on the Deployment, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sDeploymentLabel] = "guestbook"
      attributes[.k8sDeploymentLabel] = ""
     - Note: Examples:

     - A label `replicas` with value `0` SHOULD be recorded
       as the `k8s.deployment.label.app` attribute with value `"guestbook"`.
     - A label `injected` with empty string value SHOULD be recorded as
       the `k8s.deployment.label.injected` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sDeploymentLabel = "k8s.deployment.label"

    /**
     The name of the Deployment.
      // Examples
      attributes[.k8sDeploymentName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sDeploymentName = "k8s.deployment.name"

    /**
     The UID of the Deployment.
      // Examples
      attributes[.k8sDeploymentUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sDeploymentUid = "k8s.deployment.uid"

    /**
     The type of metric source for the horizontal pod autoscaler.
      // Examples
      attributes[.k8sHpaMetricType] = "Resource"
      attributes[.k8sHpaMetricType] = "ContainerResource"
     - Note: This attribute reflects the `type` field of spec.metrics[] in the HPA.
     - Requires: Value type should be `String`
    */
    case k8sHpaMetricType = "k8s.hpa.metric.type"

    /**
     The name of the horizontal pod autoscaler.
      // Examples
      attributes[.k8sHpaName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sHpaName = "k8s.hpa.name"

    /**
     The API version of the target resource to scale for the HorizontalPodAutoscaler.
      // Examples
      attributes[.k8sHpaScaletargetrefApiVersion] = "apps/v1"
      attributes[.k8sHpaScaletargetrefApiVersion] = "autoscaling/v2"
     - Note: This maps to the `apiVersion` field in the `scaleTargetRef` of the HPA spec.
     - Requires: Value type should be `String`
    */
    case k8sHpaScaletargetrefApiVersion = "k8s.hpa.scaletargetref.api_version"

    /**
     The kind of the target resource to scale for the HorizontalPodAutoscaler.
      // Examples
      attributes[.k8sHpaScaletargetrefKind] = "Deployment"
      attributes[.k8sHpaScaletargetrefKind] = "StatefulSet"
     - Note: This maps to the `kind` field in the `scaleTargetRef` of the HPA spec.
     - Requires: Value type should be `String`
    */
    case k8sHpaScaletargetrefKind = "k8s.hpa.scaletargetref.kind"

    /**
     The name of the target resource to scale for the HorizontalPodAutoscaler.
      // Examples
      attributes[.k8sHpaScaletargetrefName] = "my-deployment"
      attributes[.k8sHpaScaletargetrefName] = "my-statefulset"
     - Note: This maps to the `name` field in the `scaleTargetRef` of the HPA spec.
     - Requires: Value type should be `String`
    */
    case k8sHpaScaletargetrefName = "k8s.hpa.scaletargetref.name"

    /**
     The UID of the horizontal pod autoscaler.
      // Examples
      attributes[.k8sHpaUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sHpaUid = "k8s.hpa.uid"

    /**
     The size (identifier) of the K8s huge page.
      // Examples
      attributes[.k8sHugepageSize] = "2Mi"
     - Requires: Value type should be `String`
    */
    case k8sHugepageSize = "k8s.hugepage.size"

    /**
     The annotation placed on the Job, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sJobAnnotation] = "1"
      attributes[.k8sJobAnnotation] = ""
     - Note: Examples:

     - A label `number` with value `1` SHOULD be recorded
       as the `k8s.job.annotation.number` attribute with value `"1"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.job.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sJobAnnotation = "k8s.job.annotation"

    /**
     The label placed on the Job, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sJobLabel] = "ci"
      attributes[.k8sJobLabel] = ""
     - Note: Examples:

     - A label `jobtype` with value `ci` SHOULD be recorded
       as the `k8s.job.label.jobtype` attribute with value `"ci"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.job.label.automated` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sJobLabel = "k8s.job.label"

    /**
     The name of the Job.
      // Examples
      attributes[.k8sJobName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sJobName = "k8s.job.name"

    /**
     The UID of the Job.
      // Examples
      attributes[.k8sJobUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sJobUid = "k8s.job.uid"

    /**
     The annotation placed on the Namespace, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sNamespaceAnnotation] = "0"
      attributes[.k8sNamespaceAnnotation] = ""
     - Note: Examples:

     - A label `ttl` with value `0` SHOULD be recorded
       as the `k8s.namespace.annotation.ttl` attribute with value `"0"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.namespace.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sNamespaceAnnotation = "k8s.namespace.annotation"

    /**
     The label placed on the Namespace, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sNamespaceLabel] = "default"
      attributes[.k8sNamespaceLabel] = ""
     - Note: Examples:

     - A label `kubernetes.io/metadata.name` with value `default` SHOULD be recorded
       as the `k8s.namespace.label.kubernetes.io/metadata.name` attribute with value `"default"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.namespace.label.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sNamespaceLabel = "k8s.namespace.label"

    /**
     The name of the namespace that the pod is running in.
      // Examples
      attributes[.k8sNamespaceName] = "default"
     - Requires: Value type should be `String`
    */
    case k8sNamespaceName = "k8s.namespace.name"

    /**
     The phase of the K8s namespace.
      // Examples
      attributes[.k8sNamespacePhase] = active
      attributes[.k8sNamespacePhase] = terminating
     - Note: This attribute aligns with the `phase` field of the
     [K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)
     - Requires: Value should be one of [`/output/Attributes/K8s_attributes.swift.K8sNamespacePhaseValues`](x-source-tag://otelK8sNamespacePhaseValues) (of type `String`)
    */
    case k8sNamespacePhase = "k8s.namespace.phase"

    /**
     The annotation placed on the Node, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sNodeAnnotation] = "0"
      attributes[.k8sNodeAnnotation] = ""
     - Note: Examples:

     - An annotation `node.alpha.kubernetes.io/ttl` with value `0` SHOULD be recorded as
       the `k8s.node.annotation.node.alpha.kubernetes.io/ttl` attribute with value `"0"`.
     - An annotation `data` with empty string value SHOULD be recorded as
       the `k8s.node.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sNodeAnnotation = "k8s.node.annotation"

    /**
     The status of the condition, one of True, False, Unknown.
      // Examples
      attributes[.k8sNodeConditionStatus] = true
      attributes[.k8sNodeConditionStatus] = false
      attributes[.k8sNodeConditionStatus] = unknown
     - Note: This attribute aligns with the `status` field of the
     [NodeCondition](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core)
     - Requires: Value should be one of [`/output/Attributes/K8s_attributes.swift.K8sNodeConditionStatusValues`](x-source-tag://otelK8sNodeConditionStatusValues) (of type `String`)
    */
    case k8sNodeConditionStatus = "k8s.node.condition.status"

    /**
     The condition type of a K8s Node.
      // Examples
      attributes[.k8sNodeConditionType] = Ready
      attributes[.k8sNodeConditionType] = DiskPressure
     - Note: K8s Node conditions as described
     by [K8s documentation](https://v1-32.docs.kubernetes.io/docs/reference/node/node-status/#condition).

     This attribute aligns with the `type` field of the
     [NodeCondition](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core)

     The set of possible values is not limited to those listed here. Managed Kubernetes environments,
     or custom controllers MAY introduce additional node condition types.
     When this occurs, the exact value as reported by the Kubernetes API SHOULD be used.
     - Requires: Value should be one of [`/output/Attributes/K8s_attributes.swift.K8sNodeConditionTypeValues`](x-source-tag://otelK8sNodeConditionTypeValues) (of type `String`)
    */
    case k8sNodeConditionType = "k8s.node.condition.type"

    /**
     The label placed on the Node, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sNodeLabel] = "arm64"
      attributes[.k8sNodeLabel] = ""
     - Note: Examples:

     - A label `kubernetes.io/arch` with value `arm64` SHOULD be recorded
       as the `k8s.node.label.kubernetes.io/arch` attribute with value `"arm64"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.node.label.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sNodeLabel = "k8s.node.label"

    /**
     The name of the Node.
      // Examples
      attributes[.k8sNodeName] = "node-1"
     - Requires: Value type should be `String`
    */
    case k8sNodeName = "k8s.node.name"

    /**
     The UID of the Node.
      // Examples
      attributes[.k8sNodeUid] = "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
     - Requires: Value type should be `String`
    */
    case k8sNodeUid = "k8s.node.uid"

    /**
     The annotation placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.
      // Examples
      attributes[.k8sPodAnnotation] = "true"
      attributes[.k8sPodAnnotation] = "x64"
      attributes[.k8sPodAnnotation] = ""
     - Note: Examples:

     - An annotation `kubernetes.io/enforce-mountable-secrets` with value `true` SHOULD be recorded as
       the `k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets` attribute with value `"true"`.
     - An annotation `mycompany.io/arch` with value `x64` SHOULD be recorded as
       the `k8s.pod.annotation.mycompany.io/arch` attribute with value `"x64"`.
     - An annotation `data` with empty string value SHOULD be recorded as
       the `k8s.pod.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sPodAnnotation = "k8s.pod.annotation"

    /**
     The label placed on the Pod, the `<key>` being the label name, the value being the label value.
      // Examples
      attributes[.k8sPodLabel] = "my-app"
      attributes[.k8sPodLabel] = "x64"
      attributes[.k8sPodLabel] = ""
     - Note: Examples:

     - A label `app` with value `my-app` SHOULD be recorded as
       the `k8s.pod.label.app` attribute with value `"my-app"`.
     - A label `mycompany.io/arch` with value `x64` SHOULD be recorded as
       the `k8s.pod.label.mycompany.io/arch` attribute with value `"x64"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.pod.label.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sPodLabel = "k8s.pod.label"

    /**
     The name of the Pod.
      // Examples
      attributes[.k8sPodName] = "opentelemetry-pod-autoconf"
     - Requires: Value type should be `String`
    */
    case k8sPodName = "k8s.pod.name"

    /**
     The UID of the Pod.
      // Examples
      attributes[.k8sPodUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sPodUid = "k8s.pod.uid"

    /**
     The annotation placed on the ReplicaSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sReplicasetAnnotation] = "0"
      attributes[.k8sReplicasetAnnotation] = ""
     - Note: Examples:

     - A label `replicas` with value `0` SHOULD be recorded
       as the `k8s.replicaset.annotation.replicas` attribute with value `"0"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.replicaset.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sReplicasetAnnotation = "k8s.replicaset.annotation"

    /**
     The label placed on the ReplicaSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sReplicasetLabel] = "guestbook"
      attributes[.k8sReplicasetLabel] = ""
     - Note: Examples:

     - A label `app` with value `guestbook` SHOULD be recorded
       as the `k8s.replicaset.label.app` attribute with value `"guestbook"`.
     - A label `injected` with empty string value SHOULD be recorded as
       the `k8s.replicaset.label.injected` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sReplicasetLabel = "k8s.replicaset.label"

    /**
     The name of the ReplicaSet.
      // Examples
      attributes[.k8sReplicasetName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sReplicasetName = "k8s.replicaset.name"

    /**
     The UID of the ReplicaSet.
      // Examples
      attributes[.k8sReplicasetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sReplicasetUid = "k8s.replicaset.uid"

    /**
     The name of the replication controller.
      // Examples
      attributes[.k8sReplicationcontrollerName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sReplicationcontrollerName = "k8s.replicationcontroller.name"

    /**
     The UID of the replication controller.
      // Examples
      attributes[.k8sReplicationcontrollerUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sReplicationcontrollerUid = "k8s.replicationcontroller.uid"

    /**
     The name of the resource quota.
      // Examples
      attributes[.k8sResourcequotaName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sResourcequotaName = "k8s.resourcequota.name"

    /**
     The name of the K8s resource a resource quota defines.
      // Examples
      attributes[.k8sResourcequotaResourceName] = "count/replicationcontrollers"
     - Note: The value for this attribute can be either the full `count/<resource>[.<group>]` string (e.g., count/deployments.apps, count/pods), or, for certain core Kubernetes resources, just the resource name (e.g., pods, services, configmaps). Both forms are supported by Kubernetes for object count quotas. See [Kubernetes Resource Quotas documentation](https://kubernetes.io/docs/concepts/policy/resource-quotas/#object-count-quota) for more details.
     - Requires: Value type should be `String`
    */
    case k8sResourcequotaResourceName = "k8s.resourcequota.resource_name"

    /**
     The UID of the resource quota.
      // Examples
      attributes[.k8sResourcequotaUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sResourcequotaUid = "k8s.resourcequota.uid"

    /**
     The annotation placed on the StatefulSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
      // Examples
      attributes[.k8sStatefulsetAnnotation] = "1"
      attributes[.k8sStatefulsetAnnotation] = ""
     - Note: Examples:

     - A label `replicas` with value `1` SHOULD be recorded
       as the `k8s.statefulset.annotation.replicas` attribute with value `"1"`.
     - A label `data` with empty string value SHOULD be recorded as
       the `k8s.statefulset.annotation.data` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sStatefulsetAnnotation = "k8s.statefulset.annotation"

    /**
     The label placed on the StatefulSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
      // Examples
      attributes[.k8sStatefulsetLabel] = "guestbook"
      attributes[.k8sStatefulsetLabel] = ""
     - Note: Examples:

     - A label `replicas` with value `0` SHOULD be recorded
       as the `k8s.statefulset.label.app` attribute with value `"guestbook"`.
     - A label `injected` with empty string value SHOULD be recorded as
       the `k8s.statefulset.label.injected` attribute with value `""`.
     - Requires: Value type should be `template[string]`
    */
    case k8sStatefulsetLabel = "k8s.statefulset.label"

    /**
     The name of the StatefulSet.
      // Examples
      attributes[.k8sStatefulsetName] = "opentelemetry"
     - Requires: Value type should be `String`
    */
    case k8sStatefulsetName = "k8s.statefulset.name"

    /**
     The UID of the StatefulSet.
      // Examples
      attributes[.k8sStatefulsetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
     - Requires: Value type should be `String`
    */
    case k8sStatefulsetUid = "k8s.statefulset.uid"

    /**
     The name of K8s [StorageClass](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io) object.
      // Examples
      attributes[.k8sStorageclassName] = "gold.storageclass.storage.k8s.io"
     - Requires: Value type should be `String`
    */
    case k8sStorageclassName = "k8s.storageclass.name"

    /**
     The name of the K8s volume.
      // Examples
      attributes[.k8sVolumeName] = "volume0"
     - Requires: Value type should be `String`
    */
    case k8sVolumeName = "k8s.volume.name"

    /**
     The type of the K8s volume.
      // Examples
      attributes[.k8sVolumeType] = emptyDir
      attributes[.k8sVolumeType] = persistentVolumeClaim
     - Requires: Value should be one of [`/output/Attributes/K8s_attributes.swift.K8sVolumeTypeValues`](x-source-tag://otelK8sVolumeTypeValues) (of type `String`)
    */
    case k8sVolumeType = "k8s.volume.type"


    /** 
      The reason for the container state. Corresponds to the `reason` field of the: [K8s ContainerStateWaiting](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatewaiting-v1-core) or [K8s ContainerStateTerminated](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstateterminated-v1-core)
    */
    /// - Tag: otelK8sContainerStatusReasonValues
    public struct K8sContainerStatusReasonValues: CustomStringConvertible {
      /**
      The container is being created.
      */
      public static let containerCreating = K8sContainerStatusReasonValues("ContainerCreating") 
      /**
      The container is in a crash loop back off state.
      */
      public static let crashLoopBackOff = K8sContainerStatusReasonValues("CrashLoopBackOff") 
      /**
      There was an error creating the container configuration.
      */
      public static let createContainerConfigError = K8sContainerStatusReasonValues("CreateContainerConfigError") 
      /**
      There was an error pulling the container image.
      */
      public static let errImagePull = K8sContainerStatusReasonValues("ErrImagePull") 
      /**
      The container image pull is in back off state.
      */
      public static let imagePullBackOff = K8sContainerStatusReasonValues("ImagePullBackOff") 
      /**
      The container was killed due to out of memory.
      */
      public static let oomKilled = K8sContainerStatusReasonValues("OOMKilled") 
      /**
      The container has completed execution.
      */
      public static let completed = K8sContainerStatusReasonValues("Completed") 
      /**
      There was an error with the container.
      */
      public static let error = K8sContainerStatusReasonValues("Error") 
      /**
      The container cannot run.
      */
      public static let containerCannotRun = K8sContainerStatusReasonValues("ContainerCannotRun") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The state of the container. [K8s ContainerState](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstate-v1-core)
    */
    /// - Tag: otelK8sContainerStatusStateValues
    public struct K8sContainerStatusStateValues: CustomStringConvertible {
      /**
      The container has terminated.
      */
      public static let terminated = K8sContainerStatusStateValues("terminated") 
      /**
      The container is running.
      */
      public static let running = K8sContainerStatusStateValues("running") 
      /**
      The container is waiting.
      */
      public static let waiting = K8sContainerStatusStateValues("waiting") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The phase of the K8s namespace.
    */
    /// - Tag: otelK8sNamespacePhaseValues
    public struct K8sNamespacePhaseValues: CustomStringConvertible {
      /**
      Active namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)
      */
      public static let active = K8sNamespacePhaseValues("active") 
      /**
      Terminating namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)
      */
      public static let terminating = K8sNamespacePhaseValues("terminating") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The status of the condition, one of True, False, Unknown.
    */
    /// - Tag: otelK8sNodeConditionStatusValues
    public struct K8sNodeConditionStatusValues: CustomStringConvertible {
      public static let conditionTrue = K8sNodeConditionStatusValues("true") 
      public static let conditionFalse = K8sNodeConditionStatusValues("false") 
      public static let conditionUnknown = K8sNodeConditionStatusValues("unknown") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The condition type of a K8s Node.
    */
    /// - Tag: otelK8sNodeConditionTypeValues
    public struct K8sNodeConditionTypeValues: CustomStringConvertible {
      /**
      The node is healthy and ready to accept pods
      */
      public static let ready = K8sNodeConditionTypeValues("Ready") 
      /**
      Pressure exists on the disk size—that is, if the disk capacity is low
      */
      public static let diskPressure = K8sNodeConditionTypeValues("DiskPressure") 
      /**
      Pressure exists on the node memory—that is, if the node memory is low
      */
      public static let memoryPressure = K8sNodeConditionTypeValues("MemoryPressure") 
      /**
      Pressure exists on the processes—that is, if there are too many processes on the node
      */
      public static let pidPressure = K8sNodeConditionTypeValues("PIDPressure") 
      /**
      The network for the node is not correctly configured
      */
      public static let networkUnavailable = K8sNodeConditionTypeValues("NetworkUnavailable") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of the K8s volume.
    */
    /// - Tag: otelK8sVolumeTypeValues
    public struct K8sVolumeTypeValues: CustomStringConvertible {
      /**
      A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
      */
      public static let persistentVolumeClaim = K8sVolumeTypeValues("persistentVolumeClaim") 
      /**
      A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
      */
      public static let configMap = K8sVolumeTypeValues("configMap") 
      /**
      A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
      */
      public static let downwardApi = K8sVolumeTypeValues("downwardAPI") 
      /**
      An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
      */
      public static let emptyDir = K8sVolumeTypeValues("emptyDir") 
      /**
      A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
      */
      public static let secret = K8sVolumeTypeValues("secret") 
      /**
      A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
      */
      public static let local = K8sVolumeTypeValues("local") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}