/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Cpu: String {
    /**
     The logical CPU number [0..n-1]
      // Examples
      attributes[.cpuLogicalNumber] = 1
     - Requires: Value type should be `Int`
    */
    case cpuLogicalNumber = "cpu.logical_number"

    /**
     The mode of the CPU
      // Examples
      attributes[.cpuMode] = user
      attributes[.cpuMode] = system
     - Requires: Value should be one of [`/output/Attributes/Cpu_attributes.swift.CpuModeValues`](x-source-tag://otelCpuModeValues) (of type `String`)
    */
    case cpuMode = "cpu.mode"


    /** 
      The mode of the CPU
    */
    /// - Tag: otelCpuModeValues
    public struct CpuModeValues: CustomStringConvertible {
      /**
      User
      */
      public static let user = CpuModeValues("user") 
      /**
      System
      */
      public static let system = CpuModeValues("system") 
      /**
      Nice
      */
      public static let nice = CpuModeValues("nice") 
      /**
      Idle
      */
      public static let idle = CpuModeValues("idle") 
      /**
      IO Wait
      */
      public static let iowait = CpuModeValues("iowait") 
      /**
      Interrupt
      */
      public static let interrupt = CpuModeValues("interrupt") 
      /**
      Steal
      */
      public static let steal = CpuModeValues("steal") 
      /**
      Kernel
      */
      public static let kernel = CpuModeValues("kernel") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}