/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Cpu: String {

    /**
     The logical CPU number [0..n-1]

      - Examples:
      ```
      attributes[SemanticConventions.Cpu.logicalNumber.rawValue] = 1
      ```

     - Requires: Value type should be `Int`
    */
    case logicalNumber = "cpu.logical_number"

    /**
     The mode of the CPU

      - Examples:
      ```
      attributes[SemanticConventions.Cpu.mode.rawValue] = .user
      attributes[SemanticConventions.Cpu.mode.rawValue] = .system
      ```

     - Requires: Value should be one of ``ModeValues`` (of type `String`)
    */
    case mode = "cpu.mode"

    /** 
      The mode of the CPU
    */
    public struct ModeValues: CustomStringConvertible {
      
      /// User
      public static let user = ModeValues("user") 
      
      /// System
      public static let system = ModeValues("system") 
      
      /// Nice
      public static let nice = ModeValues("nice") 
      
      /// Idle
      public static let idle = ModeValues("idle") 
      
      /// IO Wait
      public static let iowait = ModeValues("iowait") 
      
      /// Interrupt
      public static let interrupt = ModeValues("interrupt") 
      
      /// Steal
      public static let steal = ModeValues("steal") 
      
      /// Kernel
      public static let kernel = ModeValues("kernel") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}