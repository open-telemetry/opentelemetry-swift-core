/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Signalr: String {

    /**
     SignalR HTTP connection closure status.

      - Examples:
      ```
      attributes[SemanticConventions.Signalr.connectionStatus.rawValue] = .app_shutdown
      attributes[SemanticConventions.Signalr.connectionStatus.rawValue] = .timeout
      ```

     - Requires: Value should be one of ``ConnectionStatusValues`` (of type `String`)
    */
    case connectionStatus = "signalr.connection.status"

    /**
     [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)

      - Examples:
      ```
      attributes[SemanticConventions.Signalr.transport.rawValue] = .web_sockets
      attributes[SemanticConventions.Signalr.transport.rawValue] = .long_polling
      ```

     - Requires: Value should be one of ``TransportValues`` (of type `String`)
    */
    case transport = "signalr.transport"

    /** 
      SignalR HTTP connection closure status.
    */
    public struct ConnectionStatusValues: CustomStringConvertible {
      
      /// The connection was closed normally.
      public static let normalClosure = ConnectionStatusValues("normal_closure") 
      
      /// The connection was closed due to a timeout.
      public static let timeout = ConnectionStatusValues("timeout") 
      
      /// The connection was closed because the app is shutting down.
      public static let appShutdown = ConnectionStatusValues("app_shutdown") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)
    */
    public struct TransportValues: CustomStringConvertible {
      
      /// ServerSentEvents protocol
      public static let serverSentEvents = TransportValues("server_sent_events") 
      
      /// LongPolling protocol
      public static let longPolling = TransportValues("long_polling") 
      
      /// WebSockets protocol
      public static let webSockets = TransportValues("web_sockets") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}