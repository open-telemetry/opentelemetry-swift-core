/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Graphql: String {

    /**
     The GraphQL document being executed.

      - Examples:
      ```
      attributes[SemanticConventions.Graphql.document.rawValue] = "query findBookById { bookById(id: ?) { name } }"
      ```

     - Note: The value may be sanitized to exclude sensitive information.

     - Requires: Value type should be `String`
    */
    case document = "graphql.document"

    /**
     The name of the operation being executed.

      - Examples:
      ```
      attributes[SemanticConventions.Graphql.operationName.rawValue] = "findBookById"
      ```

     - Requires: Value type should be `String`
    */
    case operationName = "graphql.operation.name"

    /**
     The type of the operation being executed.

      - Examples:
      ```
      attributes[SemanticConventions.Graphql.operationType.rawValue] = .query
      attributes[SemanticConventions.Graphql.operationType.rawValue] = .mutation
      attributes[SemanticConventions.Graphql.operationType.rawValue] = .subscription
      ```

     - Requires: Value should be one of ``OperationTypeValues`` (of type `String`)
    */
    case operationType = "graphql.operation.type"

    /** 
      The type of the operation being executed.
    */
    public struct OperationTypeValues: CustomStringConvertible {
      
      /// GraphQL query
      public static let query = OperationTypeValues("query") 
      
      /// GraphQL mutation
      public static let mutation = OperationTypeValues("mutation") 
      
      /// GraphQL subscription
      public static let subscription = OperationTypeValues("subscription") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}