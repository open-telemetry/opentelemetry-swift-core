/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum File: String {

    /**
     Time when the file was last accessed, in ISO 8601 format.

      - Examples:
      ```
      attributes[SemanticConventions.File.accessed.rawValue] = "2021-01-01T12:00:00Z"
      ```

     - Note: This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.

     - Requires: Value type should be `String`
    */
    case accessed = "file.accessed"

    /**
     Array of file attributes.

      - Examples:
      ```
      attributes[SemanticConventions.File.attributes.rawValue] = ["readonly", "hidden"]
      ```

     - Note: Attributes names depend on the OS or file system. Here’s a non-exhaustive list of values expected for this attribute: `archive`, `compressed`, `directory`, `encrypted`, `execute`, `hidden`, `immutable`, `journaled`, `read`, `readonly`, `symbolic link`, `system`, `temporary`, `write`.

     - Requires: Value type should be `[String]`
    */
    case attributes = "file.attributes"

    /**
     Time when the file attributes or metadata was last changed, in ISO 8601 format.

      - Examples:
      ```
      attributes[SemanticConventions.File.changed.rawValue] = "2021-01-01T12:00:00Z"
      ```

     - Note: `file.changed` captures the time when any of the file's properties or attributes (including the content) are changed, while `file.modified` captures the timestamp when the file content is modified.

     - Requires: Value type should be `String`
    */
    case changed = "file.changed"

    /**
     Time when the file was created, in ISO 8601 format.

      - Examples:
      ```
      attributes[SemanticConventions.File.created.rawValue] = "2021-01-01T12:00:00Z"
      ```

     - Note: This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.

     - Requires: Value type should be `String`
    */
    case created = "file.created"

    /**
     Directory where the file is located. It should include the drive letter, when appropriate.

      - Examples:
      ```
      attributes[SemanticConventions.File.directory.rawValue] = "/home/user"
      attributes[SemanticConventions.File.directory.rawValue] = "C:\Program Files\MyApp"
      ```

     - Requires: Value type should be `String`
    */
    case directory = "file.directory"

    /**
     File extension, excluding the leading dot.

      - Examples:
      ```
      attributes[SemanticConventions.File.extension.rawValue] = "png"
      attributes[SemanticConventions.File.extension.rawValue] = "gz"
      ```

     - Note: When the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

     - Requires: Value type should be `String`
    */
    case _extension = "file.extension"

    /**
     Name of the fork. A fork is additional data associated with a filesystem object.

      - Examples:
      ```
      attributes[SemanticConventions.File.forkName.rawValue] = "Zone.Identifier"
      ```

     - Note: On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
       On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: C:\path\to\filename.extension:some_fork_name, and some_fork_name is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.

     - Requires: Value type should be `String`
    */
    case forkName = "file.fork_name"

    /**
     Primary Group ID (GID) of the file.

      - Examples:
      ```
      attributes[SemanticConventions.File.groupId.rawValue] = "1000"
      ```

     - Requires: Value type should be `String`
    */
    case groupId = "file.group.id"

    /**
     Primary group name of the file.

      - Examples:
      ```
      attributes[SemanticConventions.File.groupName.rawValue] = "users"
      ```

     - Requires: Value type should be `String`
    */
    case groupName = "file.group.name"

    /**
     Inode representing the file in the filesystem.

      - Examples:
      ```
      attributes[SemanticConventions.File.inode.rawValue] = "256383"
      ```

     - Requires: Value type should be `String`
    */
    case inode = "file.inode"

    /**
     Mode of the file in octal representation.

      - Examples:
      ```
      attributes[SemanticConventions.File.mode.rawValue] = "0640"
      ```

     - Requires: Value type should be `String`
    */
    case mode = "file.mode"

    /**
     Time when the file content was last modified, in ISO 8601 format.

      - Examples:
      ```
      attributes[SemanticConventions.File.modified.rawValue] = "2021-01-01T12:00:00Z"
      ```

     - Requires: Value type should be `String`
    */
    case modified = "file.modified"

    /**
     Name of the file including the extension, without the directory.

      - Examples:
      ```
      attributes[SemanticConventions.File.name.rawValue] = "example.png"
      ```

     - Requires: Value type should be `String`
    */
    case name = "file.name"

    /**
     The user ID (UID) or security identifier (SID) of the file owner.

      - Examples:
      ```
      attributes[SemanticConventions.File.ownerId.rawValue] = "1000"
      ```

     - Requires: Value type should be `String`
    */
    case ownerId = "file.owner.id"

    /**
     Username of the file owner.

      - Examples:
      ```
      attributes[SemanticConventions.File.ownerName.rawValue] = "root"
      ```

     - Requires: Value type should be `String`
    */
    case ownerName = "file.owner.name"

    /**
     Full path to the file, including the file name. It should include the drive letter, when appropriate.

      - Examples:
      ```
      attributes[SemanticConventions.File.path.rawValue] = "/home/alice/example.png"
      attributes[SemanticConventions.File.path.rawValue] = "C:\Program Files\MyApp\myapp.exe"
      ```

     - Requires: Value type should be `String`
    */
    case path = "file.path"

    /**
     File size in bytes.

     - Requires: Value type should be `Int`
    */
    case size = "file.size"

    /**
     Path to the target of a symbolic link.

      - Examples:
      ```
      attributes[SemanticConventions.File.symbolicLinkTargetPath.rawValue] = "/usr/bin/python3"
      ```

     - Note: This attribute is only applicable to symbolic links.

     - Requires: Value type should be `String`
    */
    case symbolicLinkTargetPath = "file.symbolic_link.target_path"
  }
}