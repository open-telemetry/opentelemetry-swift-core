/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Cloudfoundry: String {

    /**
     The guid of the application.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.appId.rawValue] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.application_id`. This is the same value as
       reported by `cf app <app-name> --guid`.

     - Requires: Value type should be `String`
    */
    case appId = "cloudfoundry.app.id"

    /**
     The index of the application instance. 0 when just one instance is active.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.appInstanceId.rawValue] = "0"
      attributes[SemanticConventions.Cloudfoundry.appInstanceId.rawValue] = "1"
      ```

     - Note: CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
       It is used for logs and metrics emitted by CloudFoundry. It is
       supposed to contain the application instance index for applications
       deployed on the runtime.

       Application instrumentation should use the value from environment
       variable `CF_INSTANCE_INDEX`.

     - Requires: Value type should be `String`
    */
    case appInstanceId = "cloudfoundry.app.instance.id"

    /**
     The name of the application.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.appName.rawValue] = "my-app-name"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.application_name`. This is the same value
       as reported by `cf apps`.

     - Requires: Value type should be `String`
    */
    case appName = "cloudfoundry.app.name"

    /**
     The guid of the CloudFoundry org the application is running in.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.orgId.rawValue] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.org_id`. This is the same value as
       reported by `cf org <org-name> --guid`.

     - Requires: Value type should be `String`
    */
    case orgId = "cloudfoundry.org.id"

    /**
     The name of the CloudFoundry organization the app is running in.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.orgName.rawValue] = "my-org-name"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.org_name`. This is the same value as
       reported by `cf orgs`.

     - Requires: Value type should be `String`
    */
    case orgName = "cloudfoundry.org.name"

    /**
     The UID identifying the process.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.processId.rawValue] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.process_id`. It is supposed to be equal to
       `VCAP_APPLICATION.app_id` for applications deployed to the runtime.
       For system components, this could be the actual PID.

     - Requires: Value type should be `String`
    */
    case processId = "cloudfoundry.process.id"

    /**
     The type of process.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.processType.rawValue] = "web"
      ```

     - Note: CloudFoundry applications can consist of multiple jobs. Usually the
       main process will be of type `web`. There can be additional background
       tasks or side-cars with different process types.

     - Requires: Value type should be `String`
    */
    case processType = "cloudfoundry.process.type"

    /**
     The guid of the CloudFoundry space the application is running in.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.spaceId.rawValue] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.space_id`. This is the same value as
       reported by `cf space <space-name> --guid`.

     - Requires: Value type should be `String`
    */
    case spaceId = "cloudfoundry.space.id"

    /**
     The name of the CloudFoundry space the application is running in.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.spaceName.rawValue] = "my-space-name"
      ```

     - Note: Application instrumentation should use the value from environment
       variable `VCAP_APPLICATION.space_name`. This is the same value as
       reported by `cf spaces`.

     - Requires: Value type should be `String`
    */
    case spaceName = "cloudfoundry.space.name"

    /**
     A guid or another name describing the event source.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.systemId.rawValue] = "cf/gorouter"
      ```

     - Note: CloudFoundry defines the `source_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
       It is used for logs and metrics emitted by CloudFoundry. It is
       supposed to contain the component name, e.g. "gorouter", for
       CloudFoundry components.

       When system components are instrumented, values from the
       [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
       should be used. The `system.id` should be set to
       `spec.deployment/spec.name`.

     - Requires: Value type should be `String`
    */
    case systemId = "cloudfoundry.system.id"

    /**
     A guid describing the concrete instance of the event source.

      - Examples:
      ```
      attributes[SemanticConventions.Cloudfoundry.systemInstanceId.rawValue] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
      ```

     - Note: CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
       It is used for logs and metrics emitted by CloudFoundry. It is
       supposed to contain the vm id for CloudFoundry components.

       When system components are instrumented, values from the
       [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
       should be used. The `system.instance.id` should be set to `spec.id`.

     - Requires: Value type should be `String`
    */
    case systemInstanceId = "cloudfoundry.system.instance.id"
  }
}