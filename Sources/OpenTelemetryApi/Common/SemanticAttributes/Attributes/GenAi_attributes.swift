/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum GenAi: String {

    /**
     Free-form description of the GenAI agent provided by the application.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.agentDescription.rawValue] = "Helps with math problems"
      attributes[SemanticConventions.GenAi.agentDescription.rawValue] = "Generates fiction stories"
      ```

     - Requires: Value type should be `String`
    */
    case agentDescription = "gen_ai.agent.description"

    /**
     The unique identifier of the GenAI agent.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.agentId.rawValue] = "asst_5j66UpCpwteGg4YSxUnt7lPY"
      ```

     - Requires: Value type should be `String`
    */
    case agentId = "gen_ai.agent.id"

    /**
     Human-readable name of the GenAI agent provided by the application.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.agentName.rawValue] = "Math Tutor"
      attributes[SemanticConventions.GenAi.agentName.rawValue] = "Fiction Writer"
      ```

     - Requires: Value type should be `String`
    */
    case agentName = "gen_ai.agent.name"

    /**
     The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.conversationId.rawValue] = "conv_5j66UpCpwteGg4YSxUnt7lPY"
      ```

     - Requires: Value type should be `String`
    */
    case conversationId = "gen_ai.conversation.id"

    /**
     The data source identifier.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.dataSourceId.rawValue] = "H7STPQYOND"
      ```

     - Note: Data sources are used by AI agents and RAG applications to store grounding data. A data source may be an external database, object store, document collection, website, or any other storage system used by the GenAI agent or application. The `gen_ai.data_source.id` SHOULD match the identifier used by the GenAI system rather than a name specific to the external storage, such as a database or object store. Semantic conventions referencing `gen_ai.data_source.id` MAY also leverage additional attributes, such as `db.*`, to further identify and describe the data source.

     - Requires: Value type should be `String`
    */
    case dataSourceId = "gen_ai.data_source.id"

    /**
     The chat history provided to the model as an input.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.inputMessages.rawValue] = [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
      ```

     - Note: Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
       When the attribute is recorded on events, it MUST be recorded in structured
       form. When recorded on spans, it MAY be recorded as a JSON string if structured
       format is not supported and SHOULD be recorded in structured form otherwise.

       Messages MUST be provided in the order they were sent to the model.
       Instrumentations MAY provide a way for users to filter or truncate
       input messages.

       > [!Warning]
       > This attribute is likely to contain sensitive information including user/PII data.

       See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
       section for more details.

     - Requires: Value type should be `any`
    */
    case inputMessages = "gen_ai.input.messages"

    /**
     The name of the operation being performed.

     - Note: If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.

     - Requires: Value should be one of ``OperationNameValues`` (of type `String`)
    */
    case operationName = "gen_ai.operation.name"

    /**
     Messages returned by the model where each message represents a specific model response (choice, candidate).

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.outputMessages.rawValue] = [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
      ```

     - Note: Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

       Each message represents a single output choice/candidate generated by
       the model. Each message corresponds to exactly one generation
       (choice/candidate) and vice versa - one choice cannot be split across
       multiple messages or one message cannot contain parts from multiple choices.

       When the attribute is recorded on events, it MUST be recorded in structured
       form. When recorded on spans, it MAY be recorded as a JSON string if structured
       format is not supported and SHOULD be recorded in structured form otherwise.

       Instrumentations MAY provide a way for users to filter or truncate
       output messages.

       > [!Warning]
       > This attribute is likely to contain sensitive information including user/PII data.

       See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
       section for more details.

     - Requires: Value type should be `any`
    */
    case outputMessages = "gen_ai.output.messages"

    /**
     Represents the content type requested by the client.

     - Note: This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
       This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
       Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.

     - Requires: Value should be one of ``OutputTypeValues`` (of type `String`)
    */
    case outputType = "gen_ai.output.type"

    /**
     The Generative AI provider as identified by the client or server instrumentation.

     - Note: The attribute SHOULD be set based on the instrumentation's best
       knowledge and may differ from the actual model provider.

       Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
       are accessible using the OpenAI REST API and corresponding client libraries,
       but may proxy or host models from different providers.

       The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
       attributes may help identify the actual system in use.

       The `gen_ai.provider.name` attribute acts as a discriminator that
       identifies the GenAI telemetry format flavor specific to that provider
       within GenAI semantic conventions.
       It SHOULD be set consistently with provider-specific attributes and signals.
       For example, GenAI spans, metrics, and events related to AWS Bedrock
       should have the `gen_ai.provider.name` set to `aws.bedrock` and include
       applicable `aws.bedrock.*` attributes and are not expected to include
       `openai.*` attributes.

     - Requires: Value should be one of ``ProviderNameValues`` (of type `String`)
    */
    case providerName = "gen_ai.provider.name"

    /**
     The target number of candidate completions to return.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestChoiceCount.rawValue] = 3
      ```

     - Requires: Value type should be `Int`
    */
    case requestChoiceCount = "gen_ai.request.choice.count"

    /**
     The encoding formats requested in an embeddings operation, if specified.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestEncodingFormats.rawValue] = ["base64"]
      attributes[SemanticConventions.GenAi.requestEncodingFormats.rawValue] = ["float", "binary"]
      ```

     - Note: In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.

     - Requires: Value type should be `[String]`
    */
    case requestEncodingFormats = "gen_ai.request.encoding_formats"

    /**
     The frequency penalty setting for the GenAI request.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestFrequencyPenalty.rawValue] = 0.1
      ```

     - Requires: Value type should be `Double`
    */
    case requestFrequencyPenalty = "gen_ai.request.frequency_penalty"

    /**
     The maximum number of tokens the model generates for a request.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestMaxTokens.rawValue] = 100
      ```

     - Requires: Value type should be `Int`
    */
    case requestMaxTokens = "gen_ai.request.max_tokens"

    /**
     The name of the GenAI model a request is being made to.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestModel.rawValue] = "gpt-4"
      ```

     - Requires: Value type should be `String`
    */
    case requestModel = "gen_ai.request.model"

    /**
     The presence penalty setting for the GenAI request.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestPresencePenalty.rawValue] = 0.1
      ```

     - Requires: Value type should be `Double`
    */
    case requestPresencePenalty = "gen_ai.request.presence_penalty"

    /**
     Requests with same seed value more likely to return same result.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestSeed.rawValue] = 100
      ```

     - Requires: Value type should be `Int`
    */
    case requestSeed = "gen_ai.request.seed"

    /**
     List of sequences that the model will use to stop generating further tokens.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestStopSequences.rawValue] = ["forest", "lived"]
      ```

     - Requires: Value type should be `[String]`
    */
    case requestStopSequences = "gen_ai.request.stop_sequences"

    /**
     The temperature setting for the GenAI request.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestTemperature.rawValue] = 0.0
      ```

     - Requires: Value type should be `Double`
    */
    case requestTemperature = "gen_ai.request.temperature"

    /**
     The top_k sampling setting for the GenAI request.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestTopK.rawValue] = 1.0
      ```

     - Requires: Value type should be `Double`
    */
    case requestTopK = "gen_ai.request.top_k"

    /**
     The top_p sampling setting for the GenAI request.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.requestTopP.rawValue] = 1.0
      ```

     - Requires: Value type should be `Double`
    */
    case requestTopP = "gen_ai.request.top_p"

    /**
     Array of reasons the model stopped generating tokens, corresponding to each generation received.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.responseFinishReasons.rawValue] = ["stop"]
      attributes[SemanticConventions.GenAi.responseFinishReasons.rawValue] = ["stop", "length"]
      ```

     - Requires: Value type should be `[String]`
    */
    case responseFinishReasons = "gen_ai.response.finish_reasons"

    /**
     The unique identifier for the completion.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.responseId.rawValue] = "chatcmpl-123"
      ```

     - Requires: Value type should be `String`
    */
    case responseId = "gen_ai.response.id"

    /**
     The name of the model that generated the response.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.responseModel.rawValue] = "gpt-4-0613"
      ```

     - Requires: Value type should be `String`
    */
    case responseModel = "gen_ai.response.model"

    /**
     The system message or instructions provided to the GenAI model separately from the chat history.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.systemInstructions.rawValue] = [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
      attributes[SemanticConventions.GenAi.systemInstructions.rawValue] = [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
      ```

     - Note: This attribute SHOULD be used when the corresponding provider or API
       allows to provide system instructions or messages separately from the
       chat history.

       Instructions that are part of the chat history SHOULD be recorded in
       `gen_ai.input.messages` attribute instead.

       Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

       When recorded on spans, it MAY be recorded as a JSON string if structured
       format is not supported and SHOULD be recorded in structured form otherwise.

       Instrumentations MAY provide a way for users to filter or truncate
       system instructions.

       > [!Warning]
       > This attribute may contain sensitive information.

       See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
       section for more details.

     - Requires: Value type should be `any`
    */
    case systemInstructions = "gen_ai.system_instructions"

    /**
     The type of token being counted.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.tokenType.rawValue] = .input
      attributes[SemanticConventions.GenAi.tokenType.rawValue] = .output
      ```

     - Requires: Value should be one of ``TokenTypeValues`` (of type `String`)
    */
    case tokenType = "gen_ai.token.type"

    /**
     The tool call identifier.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.toolCallId.rawValue] = "call_mszuSIzqtI65i1wAUOE8w5H4"
      ```

     - Requires: Value type should be `String`
    */
    case toolCallId = "gen_ai.tool.call.id"

    /**
     The tool description.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.toolDescription.rawValue] = "Multiply two numbers"
      ```

     - Requires: Value type should be `String`
    */
    case toolDescription = "gen_ai.tool.description"

    /**
     Name of the tool utilized by the agent.

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.toolName.rawValue] = "Flights"
      ```

     - Requires: Value type should be `String`
    */
    case toolName = "gen_ai.tool.name"

    /**
     Type of the tool utilized by the agent

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.toolType.rawValue] = "function"
      attributes[SemanticConventions.GenAi.toolType.rawValue] = "extension"
      attributes[SemanticConventions.GenAi.toolType.rawValue] = "datastore"
      ```

     - Note: Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.
       Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.
       Function: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.
       Client-side operations are actions taken on the user's end or within the client application.
       Datastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.

     - Requires: Value type should be `String`
    */
    case toolType = "gen_ai.tool.type"

    /**
     The number of tokens used in the GenAI input (prompt).

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.usageInputTokens.rawValue] = 100
      ```

     - Requires: Value type should be `Int`
    */
    case usageInputTokens = "gen_ai.usage.input_tokens"

    /**
     The number of tokens used in the GenAI response (completion).

      - Examples:
      ```
      attributes[SemanticConventions.GenAi.usageOutputTokens.rawValue] = 180
      ```

     - Requires: Value type should be `Int`
    */
    case usageOutputTokens = "gen_ai.usage.output_tokens"

    /** 
      The name of the operation being performed.
    */
    public struct OperationNameValues: CustomStringConvertible {
      
      /// Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
      public static let chat = OperationNameValues("chat") 
      
      /// Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
      public static let generateContent = OperationNameValues("generate_content") 
      
      /// Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
      public static let textCompletion = OperationNameValues("text_completion") 
      
      /// Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
      public static let embeddings = OperationNameValues("embeddings") 
      
      /// Create GenAI agent
      public static let createAgent = OperationNameValues("create_agent") 
      
      /// Invoke GenAI agent
      public static let invokeAgent = OperationNameValues("invoke_agent") 
      
      /// Execute a tool
      public static let executeTool = OperationNameValues("execute_tool") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Represents the content type requested by the client.
    */
    public struct OutputTypeValues: CustomStringConvertible {
      
      /// Plain text
      public static let text = OutputTypeValues("text") 
      
      /// JSON object with known or unknown schema
      public static let json = OutputTypeValues("json") 
      
      /// Image
      public static let image = OutputTypeValues("image") 
      
      /// Speech
      public static let speech = OutputTypeValues("speech") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The Generative AI provider as identified by the client or server instrumentation.
    */
    public struct ProviderNameValues: CustomStringConvertible {
      
      /// [OpenAI](https://openai.com/)
      public static let openai = ProviderNameValues("openai") 
      
      /// Any Google generative AI endpoint
      public static let gcpGenAi = ProviderNameValues("gcp.gen_ai") 
      
      /// [Vertex AI](https://cloud.google.com/vertex-ai)
      public static let gcpVertexAi = ProviderNameValues("gcp.vertex_ai") 
      
      /// [Gemini](https://cloud.google.com/products/gemini)
      public static let gcpGemini = ProviderNameValues("gcp.gemini") 
      
      /// [Anthropic](https://www.anthropic.com/)
      public static let anthropic = ProviderNameValues("anthropic") 
      
      /// [Cohere](https://cohere.com/)
      public static let cohere = ProviderNameValues("cohere") 
      
      /// Azure AI Inference
      public static let azureAiInference = ProviderNameValues("azure.ai.inference") 
      
      /// [Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)
      public static let azureAiOpenai = ProviderNameValues("azure.ai.openai") 
      
      /// [IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)
      public static let ibmWatsonxAi = ProviderNameValues("ibm.watsonx.ai") 
      
      /// [AWS Bedrock](https://aws.amazon.com/bedrock)
      public static let awsBedrock = ProviderNameValues("aws.bedrock") 
      
      /// [Perplexity](https://www.perplexity.ai/)
      public static let perplexity = ProviderNameValues("perplexity") 
      
      /// [xAI](https://x.ai/)
      public static let xAi = ProviderNameValues("x_ai") 
      
      /// [DeepSeek](https://www.deepseek.com/)
      public static let deepseek = ProviderNameValues("deepseek") 
      
      /// [Groq](https://groq.com/)
      public static let groq = ProviderNameValues("groq") 
      
      /// [Mistral AI](https://mistral.ai/)
      public static let mistralAi = ProviderNameValues("mistral_ai") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of token being counted.
    */
    public struct TokenTypeValues: CustomStringConvertible {
      
      /// Input tokens (prompt, input, etc.)
      public static let input = TokenTypeValues("input") 
      
      /// Output tokens (completion, response, etc.)
      public static let output = TokenTypeValues("output") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}