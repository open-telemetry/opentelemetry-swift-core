/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum GenAi: String {
    /**
     Free-form description of the GenAI agent provided by the application.
      // Examples
      attributes[.genAiAgentDescription] = "Helps with math problems"
      attributes[.genAiAgentDescription] = "Generates fiction stories"
     - Requires: Value type should be `String`
    */
    case genAiAgentDescription = "gen_ai.agent.description"

    /**
     The unique identifier of the GenAI agent.
      // Examples
      attributes[.genAiAgentId] = "asst_5j66UpCpwteGg4YSxUnt7lPY"
     - Requires: Value type should be `String`
    */
    case genAiAgentId = "gen_ai.agent.id"

    /**
     Human-readable name of the GenAI agent provided by the application.
      // Examples
      attributes[.genAiAgentName] = "Math Tutor"
      attributes[.genAiAgentName] = "Fiction Writer"
     - Requires: Value type should be `String`
    */
    case genAiAgentName = "gen_ai.agent.name"

    /**
     The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
      // Examples
      attributes[.genAiConversationId] = "conv_5j66UpCpwteGg4YSxUnt7lPY"
     - Requires: Value type should be `String`
    */
    case genAiConversationId = "gen_ai.conversation.id"

    /**
     The data source identifier.
      // Examples
      attributes[.genAiDataSourceId] = "H7STPQYOND"
     - Note: Data sources are used by AI agents and RAG applications to store grounding data. A data source may be an external database, object store, document collection, website, or any other storage system used by the GenAI agent or application. The `gen_ai.data_source.id` SHOULD match the identifier used by the GenAI system rather than a name specific to the external storage, such as a database or object store. Semantic conventions referencing `gen_ai.data_source.id` MAY also leverage additional attributes, such as `db.*`, to further identify and describe the data source.
     - Requires: Value type should be `String`
    */
    case genAiDataSourceId = "gen_ai.data_source.id"

    /**
     The chat history provided to the model as an input.
      // Examples
      attributes[.genAiInputMessages] = [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
     - Note: Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
     When the attribute is recorded on events, it MUST be recorded in structured
     form. When recorded on spans, it MAY be recorded as a JSON string if structured
     format is not supported and SHOULD be recorded in structured form otherwise.

     Messages MUST be provided in the order they were sent to the model.
     Instrumentations MAY provide a way for users to filter or truncate
     input messages.

     > [!Warning]
     > This attribute is likely to contain sensitive information including user/PII data.

     See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
     section for more details.
     - Requires: Value type should be `any`
    */
    case genAiInputMessages = "gen_ai.input.messages"

    /**
     The name of the operation being performed.
     - Note: If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
     - Requires: Value should be one of [`/output/Attributes/GenAi_attributes.swift.GenAiOperationNameValues`](x-source-tag://otelGenAiOperationNameValues) (of type `String`)
    */
    case genAiOperationName = "gen_ai.operation.name"

    /**
     Messages returned by the model where each message represents a specific model response (choice, candidate).
      // Examples
      attributes[.genAiOutputMessages] = [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
     - Note: Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

     Each message represents a single output choice/candidate generated by
     the model. Each message corresponds to exactly one generation
     (choice/candidate) and vice versa - one choice cannot be split across
     multiple messages or one message cannot contain parts from multiple choices.

     When the attribute is recorded on events, it MUST be recorded in structured
     form. When recorded on spans, it MAY be recorded as a JSON string if structured
     format is not supported and SHOULD be recorded in structured form otherwise.

     Instrumentations MAY provide a way for users to filter or truncate
     output messages.

     > [!Warning]
     > This attribute is likely to contain sensitive information including user/PII data.

     See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
     section for more details.
     - Requires: Value type should be `any`
    */
    case genAiOutputMessages = "gen_ai.output.messages"

    /**
     Represents the content type requested by the client.
     - Note: This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
     This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
     Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
     - Requires: Value should be one of [`/output/Attributes/GenAi_attributes.swift.GenAiOutputTypeValues`](x-source-tag://otelGenAiOutputTypeValues) (of type `String`)
    */
    case genAiOutputType = "gen_ai.output.type"

    /**
     The Generative AI provider as identified by the client or server instrumentation.
     - Note: The attribute SHOULD be set based on the instrumentation's best
     knowledge and may differ from the actual model provider.

     Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
     are accessible using the OpenAI REST API and corresponding client libraries,
     but may proxy or host models from different providers.

     The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
     attributes may help identify the actual system in use.

     The `gen_ai.provider.name` attribute acts as a discriminator that
     identifies the GenAI telemetry format flavor specific to that provider
     within GenAI semantic conventions.
     It SHOULD be set consistently with provider-specific attributes and signals.
     For example, GenAI spans, metrics, and events related to AWS Bedrock
     should have the `gen_ai.provider.name` set to `aws.bedrock` and include
     applicable `aws.bedrock.*` attributes and are not expected to include
     `openai.*` attributes.
     - Requires: Value should be one of [`/output/Attributes/GenAi_attributes.swift.GenAiProviderNameValues`](x-source-tag://otelGenAiProviderNameValues) (of type `String`)
    */
    case genAiProviderName = "gen_ai.provider.name"

    /**
     The target number of candidate completions to return.
      // Examples
      attributes[.genAiRequestChoiceCount] = 3
     - Requires: Value type should be `Int`
    */
    case genAiRequestChoiceCount = "gen_ai.request.choice.count"

    /**
     The encoding formats requested in an embeddings operation, if specified.
      // Examples
      attributes[.genAiRequestEncodingFormats] = ["base64"]
      attributes[.genAiRequestEncodingFormats] = ["float", "binary"]
     - Note: In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.
     - Requires: Value type should be `[String]`
    */
    case genAiRequestEncodingFormats = "gen_ai.request.encoding_formats"

    /**
     The frequency penalty setting for the GenAI request.
      // Examples
      attributes[.genAiRequestFrequencyPenalty] = 0.1
     - Requires: Value type should be `Double`
    */
    case genAiRequestFrequencyPenalty = "gen_ai.request.frequency_penalty"

    /**
     The maximum number of tokens the model generates for a request.
      // Examples
      attributes[.genAiRequestMaxTokens] = 100
     - Requires: Value type should be `Int`
    */
    case genAiRequestMaxTokens = "gen_ai.request.max_tokens"

    /**
     The name of the GenAI model a request is being made to.
      // Examples
  
   attributes[.genAiRequestModel] = "gpt-4"
     - Requires: Value type should be `String`
    */
    case genAiRequestModel = "gen_ai.request.model"

    /**
     The presence penalty setting for the GenAI request.
      // Examples
      attributes[.genAiRequestPresencePenalty] = 0.1
     - Requires: Value type should be `Double`
    */
    case genAiRequestPresencePenalty = "gen_ai.request.presence_penalty"

    /**
     Requests with same seed value more likely to return same result.
      // Examples
      attributes[.genAiRequestSeed] = 100
     - Requires: Value type should be `Int`
    */
    case genAiRequestSeed = "gen_ai.request.seed"

    /**
     List of sequences that the model will use to stop generating further tokens.
      // Examples
      attributes[.genAiRequestStopSequences] = ["forest", "lived"]
     - Requires: Value type should be `[String]`
    */
    case genAiRequestStopSequences = "gen_ai.request.stop_sequences"

    /**
     The temperature setting for the GenAI request.
      // Examples
      attributes[.genAiRequestTemperature] = 0.0
     - Requires: Value type should be `Double`
    */
    case genAiRequestTemperature = "gen_ai.request.temperature"

    /**
     The top_k sampling setting for the GenAI request.
      // Examples
      attributes[.genAiRequestTopK] = 1.0
     - Requires: Value type should be `Double`
    */
    case genAiRequestTopK = "gen_ai.request.top_k"

    /**
     The top_p sampling setting for the GenAI request.
      // Examples
      attributes[.genAiRequestTopP] = 1.0
     - Requires: Value type should be `Double`
    */
    case genAiRequestTopP = "gen_ai.request.top_p"

    /**
     Array of reasons the model stopped generating tokens, corresponding to each generation received.
      // Examples
      attributes[.genAiResponseFinishReasons] = ["stop"]
      attributes[.genAiResponseFinishReasons] = ["stop", "length"]
     - Requires: Value type should be `[String]`
    */
    case genAiResponseFinishReasons = "gen_ai.response.finish_reasons"

    /**
     The unique identifier for the completion.
      // Examples
      attributes[.genAiResponseId] = "chatcmpl-123"
     - Requires: Value type should be `String`
    */
    case genAiResponseId = "gen_ai.response.id"

    /**
     The name of the model that generated the response.
      // Examples
      attributes[.genAiResponseModel] = "gpt-4-0613"
     - Requires: Value type should be `String`
    */
    case genAiResponseModel = "gen_ai.response.model"

    /**
     The system message or instructions provided to the GenAI model separately from the chat history.
      // Examples
      attributes[.genAiSystemInstructions] = [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
      attributes[.genAiSystemInstructions] = [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
     - Note: This attribute SHOULD be used when the corresponding provider or API
     allows to provide system instructions or messages separately from the
     chat history.

     Instructions that are part of the chat history SHOULD be recorded in
     `gen_ai.input.messages` attribute instead.

     Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

     When recorded on spans, it MAY be recorded as a JSON string if structured
     format is not supported and SHOULD be recorded in structured form otherwise.

     Instrumentations MAY provide a way for users to filter or truncate
     system instructions.

     > [!Warning]
     > This attribute may contain sensitive information.

     See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
     section for more details.
     - Requires: Value type should be `any`
    */
    case genAiSystemInstructions = "gen_ai.system_instructions"

    /**
     The type of token being counted.
      // Examples
      attributes[.genAiTokenType] = input
      attributes[.genAiTokenType] = output
     - Requires: Value should be one of [`/output/Attributes/GenAi_attributes.swift.GenAiTokenTypeValues`](x-source-tag://otelGenAiTokenTypeValues) (of type `String`)
    */
    case genAiTokenType = "gen_ai.token.type"

    /**
     The tool call identifier.
      // Examples
      attributes[.genAiToolCallId] = "call_mszuSIzqtI65i1wAUOE8w5H4"
     - Requires: Value type should be `String`
    */
    case genAiToolCallId = "gen_ai.tool.call.id"

    /**
     The tool description.
      // Examples
      attributes[.genAiToolDescription] = "Multiply two numbers"
     - Requires: Value type should be `String`
    */
    case genAiToolDescription = "gen_ai.tool.description"

    /**
     Name of the tool utilized by the agent.
      // Examples
      attributes[.genAiToolName] = "Flights"
     - Requires: Value type should be `String`
    */
    case genAiToolName = "gen_ai.tool.name"

    /**
     Type of the tool utilized by the agent
      // Examples
      attributes[.genAiToolType] = "function"
      attributes[.genAiToolType] = "extension"
      attributes[.genAiToolType] = "datastore"
     - Note: Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.
     Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.
     Function: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.
     Client-side operations are actions taken on the user's end or within the client application.
     Datastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.
     - Requires: Value type should be `String`
    */
    case genAiToolType = "gen_ai.tool.type"

    /**
     The number of tokens used in the GenAI input (prompt).
      // Examples
      attributes[.genAiUsageInputTokens] = 100
     - Requires: Value type should be `Int`
    */
    case genAiUsageInputTokens = "gen_ai.usage.input_tokens"

    /**
     The number of tokens used in the GenAI response (completion).
      // Examples
      attributes[.genAiUsageOutputTokens] = 180
     - Requires: Value type should be `Int`
    */
    case genAiUsageOutputTokens = "gen_ai.usage.output_tokens"


    /** 
      The name of the operation being performed.
    */
    /// - Tag: otelGenAiOperationNameValues
    public struct GenAiOperationNameValues: CustomStringConvertible {
      /**
      Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
      */
      public static let chat = GenAiOperationNameValues("chat") 
      /**
      Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
      */
      public static let generateContent = GenAiOperationNameValues("generate_content") 
      /**
      Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
      */
      public static let textCompletion = GenAiOperationNameValues("text_completion") 
      /**
      Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
      */
      public static let embeddings = GenAiOperationNameValues("embeddings") 
      /**
      Create GenAI agent
      */
      public static let createAgent = GenAiOperationNameValues("create_agent") 
      /**
      Invoke GenAI agent
      */
      public static let invokeAgent = GenAiOperationNameValues("invoke_agent") 
      /**
      Execute a tool
      */
      public static let executeTool = GenAiOperationNameValues("execute_tool") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Represents the content type requested by the client.
    */
    /// - Tag: otelGenAiOutputTypeValues
    public struct GenAiOutputTypeValues: CustomStringConvertible {
      /**
      Plain text
      */
      public static let text = GenAiOutputTypeValues("text") 
      /**
      JSON object with known or unknown schema
      */
      public static let json = GenAiOutputTypeValues("json") 
      /**
      Image
      */
      public static let image = GenAiOutputTypeValues("image") 
      /**
      Speech
      */
      public static let speech = GenAiOutputTypeValues("speech") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The Generative AI provider as identified by the client or server instrumentation.
    */
    /// - Tag: otelGenAiProviderNameValues
    public struct GenAiProviderNameValues: CustomStringConvertible {
      /**
      [OpenAI](https://openai.com/)
      */
      public static let openai = GenAiProviderNameValues("openai") 
      /**
      Any Google generative AI endpoint
      */
      public static let gcpGenAi = GenAiProviderNameValues("gcp.gen_ai") 
      /**
      [Vertex AI](https://cloud.google.com/vertex-ai)
      */
      public static let gcpVertexAi = GenAiProviderNameValues("gcp.vertex_ai") 
      /**
      [Gemini](https://cloud.google.com/products/gemini)
      */
      public static let gcpGemini = GenAiProviderNameValues("gcp.gemini") 
      /**
      [Anthropic](https://www.anthropic.com/)
      */
      public static let anthropic = GenAiProviderNameValues("anthropic") 
      /**
      [Cohere](https://cohere.com/)
      */
      public static let cohere = GenAiProviderNameValues("cohere") 
      /**
      Azure AI Inference
      */
      public static let azureAiInference = GenAiProviderNameValues("azure.ai.inference") 
      /**
      [Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)
      */
      public static let azureAiOpenai = GenAiProviderNameValues("azure.ai.openai") 
      /**
      [IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)
      */
      public static let ibmWatsonxAi = GenAiProviderNameValues("ibm.watsonx.ai") 
      /**
      [AWS Bedrock](https://aws.amazon.com/bedrock)
      */
      public static let awsBedrock = GenAiProviderNameValues("aws.bedrock") 
      /**
      [Perplexity](https://www.perplexity.ai/)
      */
      public static let perplexity = GenAiProviderNameValues("perplexity") 
      /**
      [xAI](https://x.ai/)
      */
      public static let xAi = GenAiProviderNameValues("x_ai") 
      /**
      [DeepSeek](https://www.deepseek.com/)
      */
      public static let deepseek = GenAiProviderNameValues("deepseek") 
      /**
      [Groq](https://groq.com/)
      */
      public static let groq = GenAiProviderNameValues("groq") 
      /**
      [Mistral AI](https://mistral.ai/)
      */
      public static let mistralAi = GenAiProviderNameValues("mistral_ai") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of token being counted.
    */
    /// - Tag: otelGenAiTokenTypeValues
    public struct GenAiTokenTypeValues: CustomStringConvertible {
      /**
      Input tokens (prompt, input, etc.)
      */
      public static let input = GenAiTokenTypeValues("input") 
      /**
      Output tokens (completion, response, etc.)
      */
      public static let output = GenAiTokenTypeValues("output") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}