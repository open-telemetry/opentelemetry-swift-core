/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Host: String {
    /**
     The CPU architecture the host system is running on.
     - Requires: Value should be one of [`/output/Attributes/Host_attributes.swift.ArchValues`](x-source-tag://otelArchValues) (of type `String`)
    */
    case arch = "host.arch"

    /**
     The amount of level 2 memory cache available to the processor (in Bytes).
      // Examples
      attributes[.hostCpuCacheL2Size] = 12288000
     - Requires: Value type should be `Int`
    */
    case cpuCacheL2Size = "host.cpu.cache.l2.size"

    /**
     Family or generation of the CPU.
      // Examples
      attributes[.hostCpuFamily] = "6"
      attributes[.hostCpuFamily] = "PA-RISC 1.1e"
     - Requires: Value type should be `String`
    */
    case cpuFamily = "host.cpu.family"

    /**
     Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.
      // Examples
      attributes[.hostCpuModelId] = "6"
      attributes[.hostCpuModelId] = "9000/778/B180L"
     - Requires: Value type should be `String`
    */
    case cpuModelId = "host.cpu.model.id"

    /**
     Model designation of the processor.
      // Examples
      attributes[.hostCpuModelName] = "11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz"
     - Requires: Value type should be `String`
    */
    case cpuModelName = "host.cpu.model.name"

    /**
     Stepping or core revisions.
      // Examples
      attributes[.hostCpuStepping] = "1"
      attributes[.hostCpuStepping] = "r1p1"
     - Requires: Value type should be `String`
    */
    case cpuStepping = "host.cpu.stepping"

    /**
     Processor manufacturer identifier. A maximum 12-character string.
      // Examples
      attributes[.hostCpuVendorId] = "GenuineIntel"
     - Note: [CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.
     - Requires: Value type should be `String`
    */
    case cpuVendorId = "host.cpu.vendor.id"

    /**
     Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.
      // Examples
      attributes[.hostId] = "fdbf79e8af94cb7f9e8df36789187052"
     - Requires: Value type should be `String`
    */
    case id = "host.id"

    /**
     VM image ID or host OS image ID. For Cloud, this value is from the provider.
      // Examples
      attributes[.hostImageId] = "ami-07b06b442921831e5"
     - Requires: Value type should be `String`
    */
    case imageId = "host.image.id"

    /**
     Name of the VM image or OS install the host was instantiated from.
      // Examples
      attributes[.hostImageName] = "infra-ami-eks-worker-node-7d4ec78312"
      attributes[.hostImageName] = "CentOS-8-x86_64-1905"
     - Requires: Value type should be `String`
    */
    case imageName = "host.image.name"

    /**
     The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
      // Examples
      attributes[.hostImageVersion] = "0.1"
     - Requires: Value type should be `String`
    */
    case imageVersion = "host.image.version"

    /**
     Available IP addresses of the host, excluding loopback interfaces.
      // Examples
      attributes[.hostIp] = ["192.168.1.140", "fe80::abc2:4a28:737a:609e"]
     - Note: IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.
     - Requires: Value type should be `[String]`
    */
    case ip = "host.ip"

    /**
     Available MAC addresses of the host, excluding loopback interfaces.
      // Examples
      attributes[.hostMac] = ["AC-DE-48-23-45-67", "AC-DE-48-23-45-67-01-9F"]
     - Note: MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.
     - Requires: Value type should be `[String]`
    */
    case mac = "host.mac"

    /**
     Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
      // Examples
      attributes[.hostName] = "opentelemetry-test"
     - Requires: Value type should be `String`
    */
    case name = "host.name"

    /**
     Type of host. For Cloud, this must be the machine type.
      // Examples
      attributes[.hostType] = "n1-standard-1"
     - Requires: Value type should be `String`
    */
    case type = "host.type"


    /** 
      The CPU architecture the host system is running on.
    */
    /// - Tag: otelArchValues
    public struct ArchValues: CustomStringConvertible {
      /**
      AMD64
      */
      public static let amd64 = ArchValues("amd64") 
      /**
      ARM32
      */
      public static let arm32 = ArchValues("arm32") 
      /**
      ARM64
      */
      public static let arm64 = ArchValues("arm64") 
      /**
      Itanium
      */
      public static let ia64 = ArchValues("ia64") 
      /**
      32-bit PowerPC
      */
      public static let ppc32 = ArchValues("ppc32") 
      /**
      64-bit PowerPC
      */
      public static let ppc64 = ArchValues("ppc64") 
      /**
      IBM z/Architecture
      */
      public static let s390x = ArchValues("s390x") 
      /**
      32-bit x86
      */
      public static let x86 = ArchValues("x86") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}