/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Telemetry: String {

    /**
     The name of the auto instrumentation agent or distribution, if used.

      - Examples:
      ```
      attributes[SemanticConventions.Telemetry.distroName.rawValue] = "parts-unlimited-java"
      ```

     - Note: Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to
       a string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.

     - Requires: Value type should be `String`
    */
    case distroName = "telemetry.distro.name"

    /**
     The version string of the auto instrumentation agent or distribution, if used.

      - Examples:
      ```
      attributes[SemanticConventions.Telemetry.distroVersion.rawValue] = "1.2.3"
      ```

     - Requires: Value type should be `String`
    */
    case distroVersion = "telemetry.distro.version"

    /**
     The language of the telemetry SDK.

     - Requires: Value should be one of ``SdkLanguageValues`` (of type `String`)
    */
    case sdkLanguage = "telemetry.sdk.language"

    /**
     The name of the telemetry SDK as defined above.

      - Examples:
      ```
      attributes[SemanticConventions.Telemetry.sdkName.rawValue] = "opentelemetry"
      ```

     - Note: The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.
       If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
       `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
       or another suitable identifier depending on the language.
       The identifier `opentelemetry` is reserved and MUST NOT be used in this case.
       All custom identifiers SHOULD be stable across different versions of an implementation.

     - Requires: Value type should be `String`
    */
    case sdkName = "telemetry.sdk.name"

    /**
     The version string of the telemetry SDK.

      - Examples:
      ```
      attributes[SemanticConventions.Telemetry.sdkVersion.rawValue] = "1.2.3"
      ```

     - Requires: Value type should be `String`
    */
    case sdkVersion = "telemetry.sdk.version"

    /** 
      The language of the telemetry SDK.
    */
    public struct SdkLanguageValues: CustomStringConvertible {
      public static let cpp = SdkLanguageValues("cpp") 
      public static let dotnet = SdkLanguageValues("dotnet") 
      public static let erlang = SdkLanguageValues("erlang") 
      public static let go = SdkLanguageValues("go") 
      public static let java = SdkLanguageValues("java") 
      public static let nodejs = SdkLanguageValues("nodejs") 
      public static let php = SdkLanguageValues("php") 
      public static let python = SdkLanguageValues("python") 
      public static let ruby = SdkLanguageValues("ruby") 
      public static let rust = SdkLanguageValues("rust") 
      public static let swift = SdkLanguageValues("swift") 
      public static let webjs = SdkLanguageValues("webjs") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}