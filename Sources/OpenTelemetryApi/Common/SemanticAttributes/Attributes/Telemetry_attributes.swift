/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Telemetry: String {
    /**
     The name of the auto instrumentation agent or distribution, if used.
      // Examples
      attributes[.telemetryDistroName] = "parts-unlimited-java"
     - Note: Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to
     a string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.
     - Requires: Value type should be `String`
    */
    case telemetryDistroName = "telemetry.distro.name"

    /**
     The version string of the auto instrumentation agent or distribution, if used.
      // Examples
      attributes[.telemetryDistroVersion] = "1.2.3"
     - Requires: Value type should be `String`
    */
    case telemetryDistroVersion = "telemetry.distro.version"

    /**
     The language of the telemetry SDK.
     - Requires: Value should be one of [`/output/Attributes/Telemetry_attributes.swift.TelemetrySdkLanguageValues`](x-source-tag://otelTelemetrySdkLanguageValues) (of type `String`)
    */
    case telemetrySdkLanguage = "telemetry.sdk.language"

    /**
     The name of the telemetry SDK as defined above.
      // Examples
      attributes[.telemetrySdkName] = "opentelemetry"
     - Note: The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.
     If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
     `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
     or another suitable identifier depending on the language.
     The identifier `opentelemetry` is reserved and MUST NOT be used in this case.
     All custom identifiers SHOULD be stable across different versions of an implementation.
     - Requires: Value type should be `String`
    */
    case telemetrySdkName = "telemetry.sdk.name"

    /**
     The version string of the telemetry SDK.
      // Examples
      attributes[.telemetrySdkVersion] = "1.2.3"
     - Requires: Value type should be `String`
    */
    case telemetrySdkVersion = "telemetry.sdk.version"


    /** 
      The language of the telemetry SDK.
    */
    /// - Tag: otelTelemetrySdkLanguageValues
    public struct TelemetrySdkLanguageValues: CustomStringConvertible {
      public static let cpp = TelemetrySdkLanguageValues("cpp") 
      public static let dotnet = TelemetrySdkLanguageValues("dotnet") 
      public static let erlang = TelemetrySdkLanguageValues("erlang") 
      public static let go = TelemetrySdkLanguageValues("go") 
      public static let java = TelemetrySdkLanguageValues("java") 
      public static let nodejs = TelemetrySdkLanguageValues("nodejs") 
      public static let php = TelemetrySdkLanguageValues("php") 
      public static let python = TelemetrySdkLanguageValues("python") 
      public static let ruby = TelemetrySdkLanguageValues("ruby") 
      public static let rust = TelemetrySdkLanguageValues("rust") 
      public static let swift = TelemetrySdkLanguageValues("swift") 
      public static let webjs = TelemetrySdkLanguageValues("webjs") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}