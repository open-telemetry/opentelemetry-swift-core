/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Tls: String {
    /**
     String indicating the [cipher](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5) used during the current connection.
      // Examples
      attributes[.tlsCipher] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
      attributes[.tlsCipher] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
     - Note: The values allowed for `tls.cipher` MUST be one of the `Descriptions` of the [registered TLS Cipher Suits](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4).
     - Requires: Value type should be `String`
    */
    case tlsCipher = "tls.cipher"

    /**
     PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.
      // Examples
      attributes[.tlsClientCertificate] = "MII..."
     - Requires: Value type should be `String`
    */
    case tlsClientCertificate = "tls.client.certificate"

    /**
     Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.
      // Examples
      attributes[.tlsClientCertificateChain] = ["MII...", "MI..."]
     - Requires: Value type should be `[String]`
    */
    case tlsClientCertificateChain = "tls.client.certificate_chain"

    /**
     Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
      // Examples
      attributes[.tlsClientHashMd5] = "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
     - Requires: Value type should be `String`
    */
    case tlsClientHashMd5 = "tls.client.hash.md5"

    /**
     Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
      // Examples
      attributes[.tlsClientHashSha1] = "9E393D93138888D288266C2D915214D1D1CCEB2A"
     - Requires: Value type should be `String`
    */
    case tlsClientHashSha1 = "tls.client.hash.sha1"

    /**
     Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
      // Examples
      attributes[.tlsClientHashSha256] = "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
     - Requires: Value type should be `String`
    */
    case tlsClientHashSha256 = "tls.client.hash.sha256"

    /**
     Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.
      // Examples
      attributes[.tlsClientIssuer] = "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
     - Requires: Value type should be `String`
    */
    case tlsClientIssuer = "tls.client.issuer"

    /**
     A hash that identifies clients based on how they perform an SSL/TLS handshake.
      // Examples
      attributes[.tlsClientJa3] = "d4e5b18d6b55c71272893221c96ba240"
     - Requires: Value type should be `String`
    */
    case tlsClientJa3 = "tls.client.ja3"

    /**
     Date/Time indicating when client certificate is no longer considered valid.
      // Examples
      attributes[.tlsClientNotAfter] = "2021-01-01T00:00:00.000Z"
     - Requires: Value type should be `String`
    */
    case tlsClientNotAfter = "tls.client.not_after"

    /**
     Date/Time indicating when client certificate is first considered valid.
      // Examples
      attributes[.tlsClientNotBefore] = "1970-01-01T00:00:00.000Z"
     - Requires: Value type should be `String`
    */
    case tlsClientNotBefore = "tls.client.not_before"

    /**
     Distinguished name of subject of the x.509 certificate presented by the client.
      // Examples
      attributes[.tlsClientSubject] = "CN=myclient, OU=Documentation Team, DC=example, DC=com"
     - Requires: Value type should be `String`
    */
    case tlsClientSubject = "tls.client.subject"

    /**
     Array of ciphers offered by the client during the client hello.
      // Examples
      attributes[.tlsClientSupportedCiphers] = ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"]
     - Requires: Value type should be `[String]`
    */
    case tlsClientSupportedCiphers = "tls.client.supported_ciphers"

    /**
     String indicating the curve used for the given cipher, when applicable
      // Examples
      attributes[.tlsCurve] = "secp256r1"
     - Requires: Value type should be `String`
    */
    case tlsCurve = "tls.curve"

    /**
     Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
      // Examples
      attributes[.tlsEstablished] = true
     - Requires: Value type should be `Bool`
    */
    case tlsEstablished = "tls.established"

    /**
     String indicating the protocol being tunneled. Per the values in the [IANA registry](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.
      // Examples
      attributes[.tlsNextProtocol] = "http/1.1"
     - Requires: Value type should be `String`
    */
    case tlsNextProtocol = "tls.next_protocol"

    /**
     Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
     - Requires: Value should be one of [`/output/Attributes/Tls_attributes.swift.TlsProtocolNameValues`](x-source-tag://otelTlsProtocolNameValues) (of type `String`)
    */
    case tlsProtocolName = "tls.protocol.name"

    /**
     Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
      // Examples
      attributes[.tlsProtocolVersion] = "1.2"
      attributes[.tlsProtocolVersion] = "3"
     - Requires: Value type should be `String`
    */
    case tlsProtocolVersion = "tls.protocol.version"

    /**
     Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
      // Examples
      attributes[.tlsResumed] = true
     - Requires: Value type should be `Bool`
    */
    case tlsResumed = "tls.resumed"

    /**
     PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.
      // Examples
      attributes[.tlsServerCertificate] = "MII..."
     - Requires: Value type should be `String`
    */
    case tlsServerCertificate = "tls.server.certificate"

    /**
     Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.
      // Examples
      attributes[.tlsServerCertificateChain] = ["MII...", "MI..."]
     - Requires: Value type should be `[String]`
    */
    case tlsServerCertificateChain = "tls.server.certificate_chain"

    /**
     Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
      // Examples
      attributes[.tlsServerHashMd5] = "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
     - Requires: Value type should be `String`
    */
    case tlsServerHashMd5 = "tls.server.hash.md5"

    /**
     Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
      // Examples
      attributes[.tlsServerHashSha1] = "9E393D93138888D288266C2D915214D1D1CCEB2A"
     - Requires: Value type should be `String`
    */
    case tlsServerHashSha1 = "tls.server.hash.sha1"

    /**
     Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
      // Examples
      attributes[.tlsServerHashSha256] = "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
     - Requires: Value type should be `String`
    */
    case tlsServerHashSha256 = "tls.server.hash.sha256"

    /**
     Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.
      // Examples
      attributes[.tlsServerIssuer] = "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
     - Requires: Value type should be `String`
    */
    case tlsServerIssuer = "tls.server.issuer"

    /**
     A hash that identifies servers based on how they perform an SSL/TLS handshake.
      // Examples
      attributes[.tlsServerJa3s] = "d4e5b18d6b55c71272893221c96ba240"
     - Requires: Value type should be `String`
    */
    case tlsServerJa3s = "tls.server.ja3s"

    /**
     Date/Time indicating when server certificate is no longer considered valid.
      // Examples
      attributes[.tlsServerNotAfter] = "2021-01-01T00:00:00.000Z"
     - Requires: Value type should be `String`
    */
    case tlsServerNotAfter = "tls.server.not_after"

    /**
     Date/Time indicating when server certificate is first considered valid.
      // Examples
      attributes[.tlsServerNotBefore] = "1970-01-01T00:00:00.000Z"
     - Requires: Value type should be `String`
    */
    case tlsServerNotBefore = "tls.server.not_before"

    /**
     Distinguished name of subject of the x.509 certificate presented by the server.
      // Examples
      attributes[.tlsServerSubject] = "CN=myserver, OU=Documentation Team, DC=example, DC=com"
     - Requires: Value type should be `String`
    */
    case tlsServerSubject = "tls.server.subject"


    /** 
      Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    */
    /// - Tag: otelTlsProtocolNameValues
    public struct TlsProtocolNameValues: CustomStringConvertible {
      public static let ssl = TlsProtocolNameValues("ssl") 
      public static let tls = TlsProtocolNameValues("tls") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}