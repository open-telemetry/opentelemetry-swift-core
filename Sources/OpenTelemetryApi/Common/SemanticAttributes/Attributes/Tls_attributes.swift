/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Tls: String {

    /**
     String indicating the [cipher](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5) used during the current connection.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.cipher.rawValue] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
      attributes[SemanticConventions.Tls.cipher.rawValue] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
      ```

     - Note: The values allowed for `tls.cipher` MUST be one of the `Descriptions` of the [registered TLS Cipher Suits](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4).

     - Requires: Value type should be `String`
    */
    case cipher = "tls.cipher"

    /**
     PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientCertificate.rawValue] = "MII..."
      ```

     - Requires: Value type should be `String`
    */
    case clientCertificate = "tls.client.certificate"

    /**
     Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientCertificateChain.rawValue] = ["MII...", "MI..."]
      ```

     - Requires: Value type should be `[String]`
    */
    case clientCertificateChain = "tls.client.certificate_chain"

    /**
     Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientHashMd5.rawValue] = "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
      ```

     - Requires: Value type should be `String`
    */
    case clientHashMd5 = "tls.client.hash.md5"

    /**
     Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientHashSha1.rawValue] = "9E393D93138888D288266C2D915214D1D1CCEB2A"
      ```

     - Requires: Value type should be `String`
    */
    case clientHashSha1 = "tls.client.hash.sha1"

    /**
     Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientHashSha256.rawValue] = "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
      ```

     - Requires: Value type should be `String`
    */
    case clientHashSha256 = "tls.client.hash.sha256"

    /**
     Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientIssuer.rawValue] = "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
      ```

     - Requires: Value type should be `String`
    */
    case clientIssuer = "tls.client.issuer"

    /**
     A hash that identifies clients based on how they perform an SSL/TLS handshake.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientJa3.rawValue] = "d4e5b18d6b55c71272893221c96ba240"
      ```

     - Requires: Value type should be `String`
    */
    case clientJa3 = "tls.client.ja3"

    /**
     Date/Time indicating when client certificate is no longer considered valid.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientNotAfter.rawValue] = "2021-01-01T00:00:00.000Z"
      ```

     - Requires: Value type should be `String`
    */
    case clientNotAfter = "tls.client.not_after"

    /**
     Date/Time indicating when client certificate is first considered valid.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientNotBefore.rawValue] = "1970-01-01T00:00:00.000Z"
      ```

     - Requires: Value type should be `String`
    */
    case clientNotBefore = "tls.client.not_before"

    /**
     Distinguished name of subject of the x.509 certificate presented by the client.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientSubject.rawValue] = "CN=myclient, OU=Documentation Team, DC=example, DC=com"
      ```

     - Requires: Value type should be `String`
    */
    case clientSubject = "tls.client.subject"

    /**
     Array of ciphers offered by the client during the client hello.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.clientSupportedCiphers.rawValue] = ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"]
      ```

     - Requires: Value type should be `[String]`
    */
    case clientSupportedCiphers = "tls.client.supported_ciphers"

    /**
     String indicating the curve used for the given cipher, when applicable

      - Examples:
      ```
      attributes[SemanticConventions.Tls.curve.rawValue] = "secp256r1"
      ```

     - Requires: Value type should be `String`
    */
    case curve = "tls.curve"

    /**
     Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.established.rawValue] = true
      ```

     - Requires: Value type should be `Bool`
    */
    case established = "tls.established"

    /**
     String indicating the protocol being tunneled. Per the values in the [IANA registry](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.nextProtocol.rawValue] = "http/1.1"
      ```

     - Requires: Value type should be `String`
    */
    case nextProtocol = "tls.next_protocol"

    /**
     Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)

     - Requires: Value should be one of ``ProtocolNameValues`` (of type `String`)
    */
    case protocolName = "tls.protocol.name"

    /**
     Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)

      - Examples:
      ```
      attributes[SemanticConventions.Tls.protocolVersion.rawValue] = "1.2"
      attributes[SemanticConventions.Tls.protocolVersion.rawValue] = "3"
      ```

     - Requires: Value type should be `String`
    */
    case protocolVersion = "tls.protocol.version"

    /**
     Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.resumed.rawValue] = true
      ```

     - Requires: Value type should be `Bool`
    */
    case resumed = "tls.resumed"

    /**
     PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverCertificate.rawValue] = "MII..."
      ```

     - Requires: Value type should be `String`
    */
    case serverCertificate = "tls.server.certificate"

    /**
     Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverCertificateChain.rawValue] = ["MII...", "MI..."]
      ```

     - Requires: Value type should be `[String]`
    */
    case serverCertificateChain = "tls.server.certificate_chain"

    /**
     Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverHashMd5.rawValue] = "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
      ```

     - Requires: Value type should be `String`
    */
    case serverHashMd5 = "tls.server.hash.md5"

    /**
     Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverHashSha1.rawValue] = "9E393D93138888D288266C2D915214D1D1CCEB2A"
      ```

     - Requires: Value type should be `String`
    */
    case serverHashSha1 = "tls.server.hash.sha1"

    /**
     Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverHashSha256.rawValue] = "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
      ```

     - Requires: Value type should be `String`
    */
    case serverHashSha256 = "tls.server.hash.sha256"

    /**
     Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverIssuer.rawValue] = "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
      ```

     - Requires: Value type should be `String`
    */
    case serverIssuer = "tls.server.issuer"

    /**
     A hash that identifies servers based on how they perform an SSL/TLS handshake.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverJa3s.rawValue] = "d4e5b18d6b55c71272893221c96ba240"
      ```

     - Requires: Value type should be `String`
    */
    case serverJa3s = "tls.server.ja3s"

    /**
     Date/Time indicating when server certificate is no longer considered valid.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverNotAfter.rawValue] = "2021-01-01T00:00:00.000Z"
      ```

     - Requires: Value type should be `String`
    */
    case serverNotAfter = "tls.server.not_after"

    /**
     Date/Time indicating when server certificate is first considered valid.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverNotBefore.rawValue] = "1970-01-01T00:00:00.000Z"
      ```

     - Requires: Value type should be `String`
    */
    case serverNotBefore = "tls.server.not_before"

    /**
     Distinguished name of subject of the x.509 certificate presented by the server.

      - Examples:
      ```
      attributes[SemanticConventions.Tls.serverSubject.rawValue] = "CN=myserver, OU=Documentation Team, DC=example, DC=com"
      ```

     - Requires: Value type should be `String`
    */
    case serverSubject = "tls.server.subject"

    /** 
      Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    */
    public struct ProtocolNameValues: CustomStringConvertible {
      public static let ssl = ProtocolNameValues("ssl") 
      public static let tls = ProtocolNameValues("tls") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}