/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Aspnetcore: String {
    /**
     The result of the authentication operation.
      // Examples
      attributes[.aspnetcoreAuthenticationResult] = success
      attributes[.aspnetcoreAuthenticationResult] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreAuthenticationResultValues`](x-source-tag://otelAspnetcoreAuthenticationResultValues) (of type `String`)
    */
    case aspnetcoreAuthenticationResult = "aspnetcore.authentication.result"

    /**
     The identifier that names a particular authentication handler.
      // Examples
      attributes[.aspnetcoreAuthenticationScheme] = "Cookies"
      attributes[.aspnetcoreAuthenticationScheme] = "Bearer"
      attributes[.aspnetcoreAuthenticationScheme] = "Identity.Application"
     - Requires: Value type should be `String`
    */
    case aspnetcoreAuthenticationScheme = "aspnetcore.authentication.scheme"

    /**
     The name of the authorization policy.
      // Examples
      attributes[.aspnetcoreAuthorizationPolicy] = "RequireAdminRole"
     - Requires: Value type should be `String`
    */
    case aspnetcoreAuthorizationPolicy = "aspnetcore.authorization.policy"

    /**
     The result of calling the authorization service.
      // Examples
      attributes[.aspnetcoreAuthorizationResult] = success
      attributes[.aspnetcoreAuthorizationResult] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreAuthorizationResultValues`](x-source-tag://otelAspnetcoreAuthorizationResultValues) (of type `String`)
    */
    case aspnetcoreAuthorizationResult = "aspnetcore.authorization.result"

    /**
     ASP.NET Core exception middleware handling result.
      // Examples
      attributes[.aspnetcoreDiagnosticsExceptionResult] = handled
      attributes[.aspnetcoreDiagnosticsExceptionResult] = unhandled
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreDiagnosticsExceptionResultValues`](x-source-tag://otelAspnetcoreDiagnosticsExceptionResultValues) (of type `String`)
    */
    case aspnetcoreDiagnosticsExceptionResult = "aspnetcore.diagnostics.exception.result"

    /**
     Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.
      // Examples
      attributes[.aspnetcoreDiagnosticsHandlerType] = "Contoso.MyHandler"
     - Requires: Value type should be `String`
    */
    case aspnetcoreDiagnosticsHandlerType = "aspnetcore.diagnostics.handler.type"

    /**
     The error code for a failed identity operation.
      // Examples
      attributes[.aspnetcoreIdentityErrorCode] = "DefaultError"
      attributes[.aspnetcoreIdentityErrorCode] = "PasswordMismatch"
     - Requires: Value type should be `String`
    */
    case aspnetcoreIdentityErrorCode = "aspnetcore.identity.error_code"

    /**
     The result from checking the password.
      // Examples
      attributes[.aspnetcoreIdentityPasswordCheckResult] = success
      attributes[.aspnetcoreIdentityPasswordCheckResult] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentityPasswordCheckResultValues`](x-source-tag://otelAspnetcoreIdentityPasswordCheckResultValues) (of type `String`)
    */
    case aspnetcoreIdentityPasswordCheckResult = "aspnetcore.identity.password_check_result"

    /**
     The result of the identity operation.
      // Examples
      attributes[.aspnetcoreIdentityResult] = success
      attributes[.aspnetcoreIdentityResult] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentityResultValues`](x-source-tag://otelAspnetcoreIdentityResultValues) (of type `String`)
    */
    case aspnetcoreIdentityResult = "aspnetcore.identity.result"

    /**
     Whether the sign in result was success or failure.
      // Examples
      attributes[.aspnetcoreIdentitySignInResult] = password
      attributes[.aspnetcoreIdentitySignInResult] = two_factor
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentitySignInResultValues`](x-source-tag://otelAspnetcoreIdentitySignInResultValues) (of type `String`)
    */
    case aspnetcoreIdentitySignInResult = "aspnetcore.identity.sign_in.result"

    /**
     The authentication type.
      // Examples
      attributes[.aspnetcoreIdentitySignInType] = password
      attributes[.aspnetcoreIdentitySignInType] = two_factor
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentitySignInTypeValues`](x-source-tag://otelAspnetcoreIdentitySignInTypeValues) (of type `String`)
    */
    case aspnetcoreIdentitySignInType = "aspnetcore.identity.sign_in.type"

    /**
     What the token will be used for.
      // Examples
      attributes[.aspnetcoreIdentityTokenPurpose] = success
      attributes[.aspnetcoreIdentityTokenPurpose] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentityTokenPurposeValues`](x-source-tag://otelAspnetcoreIdentityTokenPurposeValues) (of type `String`)
    */
    case aspnetcoreIdentityTokenPurpose = "aspnetcore.identity.token_purpose"

    /**
     The result of token verification.
      // Examples
      attributes[.aspnetcoreIdentityTokenVerified] = success
      attributes[.aspnetcoreIdentityTokenVerified] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentityTokenVerifiedValues`](x-source-tag://otelAspnetcoreIdentityTokenVerifiedValues) (of type `String`)
    */
    case aspnetcoreIdentityTokenVerified = "aspnetcore.identity.token_verified"

    /**
     The user update type.
      // Examples
      attributes[.aspnetcoreIdentityUserUpdateType] = update
      attributes[.aspnetcoreIdentityUserUpdateType] = user_name
      attributes[.aspnetcoreIdentityUserUpdateType] = reset_password
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreIdentityUserUpdateTypeValues`](x-source-tag://otelAspnetcoreIdentityUserUpdateTypeValues) (of type `String`)
    */
    case aspnetcoreIdentityUserUpdateType = "aspnetcore.identity.user.update_type"

    /**
     The full name of the identity user type.
      // Examples
      attributes[.aspnetcoreIdentityUserType] = "Contoso.ContosoUser"
     - Requires: Value type should be `String`
    */
    case aspnetcoreIdentityUserType = "aspnetcore.identity.user_type"

    /**
     The name of the library or subsystem using the memory pool instance.
      // Examples
      attributes[.aspnetcoreMemoryPoolOwner] = "kestrel"
      attributes[.aspnetcoreMemoryPoolOwner] = "iis"
     - Requires: Value type should be `String`
    */
    case aspnetcoreMemoryPoolOwner = "aspnetcore.memory_pool.owner"

    /**
     Rate limiting policy name.
      // Examples
      attributes[.aspnetcoreRateLimitingPolicy] = "fixed"
      attributes[.aspnetcoreRateLimitingPolicy] = "sliding"
      attributes[.aspnetcoreRateLimitingPolicy] = "token"
     - Requires: Value type should be `String`
    */
    case aspnetcoreRateLimitingPolicy = "aspnetcore.rate_limiting.policy"

    /**
     Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
      // Examples
      attributes[.aspnetcoreRateLimitingResult] = acquired
      attributes[.aspnetcoreRateLimitingResult] = request_canceled
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreRateLimitingResultValues`](x-source-tag://otelAspnetcoreRateLimitingResultValues) (of type `String`)
    */
    case aspnetcoreRateLimitingResult = "aspnetcore.rate_limiting.result"

    /**
     Flag indicating if request was handled by the application pipeline.
      // Examples
      attributes[.aspnetcoreRequestIsUnhandled] = true
     - Requires: Value type should be `Bool`
    */
    case aspnetcoreRequestIsUnhandled = "aspnetcore.request.is_unhandled"

    /**
     A value that indicates whether the matched route is a fallback route.
      // Examples
      attributes[.aspnetcoreRoutingIsFallback] = true
     - Requires: Value type should be `Bool`
    */
    case aspnetcoreRoutingIsFallback = "aspnetcore.routing.is_fallback"

    /**
     Match result - success or failure
      // Examples
      attributes[.aspnetcoreRoutingMatchStatus] = success
      attributes[.aspnetcoreRoutingMatchStatus] = failure
     - Requires: Value should be one of [`/output/Attributes/Aspnetcore_attributes.swift.AspnetcoreRoutingMatchStatusValues`](x-source-tag://otelAspnetcoreRoutingMatchStatusValues) (of type `String`)
    */
    case aspnetcoreRoutingMatchStatus = "aspnetcore.routing.match_status"

    /**
     A flag indicating whether the sign in is persistent.
     - Requires: Value type should be `Bool`
    */
    case aspnetcoreSignInIsPersistent = "aspnetcore.sign_in.is_persistent"

    /**
     A value that indicates whether the user is authenticated.
      // Examples
      attributes[.aspnetcoreUserIsAuthenticated] = true
     - Requires: Value type should be `Bool`
    */
    case aspnetcoreUserIsAuthenticated = "aspnetcore.user.is_authenticated"


    /** 
      The result of the authentication operation.
    */
    /// - Tag: otelAspnetcoreAuthenticationResultValues
    public struct AspnetcoreAuthenticationResultValues: CustomStringConvertible {
      /**
      Authentication was successful.
      */
      public static let success = AspnetcoreAuthenticationResultValues("success") 
      /**
      Authentication failed.
      */
      public static let failure = AspnetcoreAuthenticationResultValues("failure") 
      /**
      No authentication information returned.
      */
      public static let none = AspnetcoreAuthenticationResultValues("none") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of calling the authorization service.
    */
    /// - Tag: otelAspnetcoreAuthorizationResultValues
    public struct AspnetcoreAuthorizationResultValues: CustomStringConvertible {
      /**
      Authorization was successful.
      */
      public static let success = AspnetcoreAuthorizationResultValues("success") 
      /**
      Authorization failed.
      */
      public static let failure = AspnetcoreAuthorizationResultValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      ASP.NET Core exception middleware handling result.
    */
    /// - Tag: otelAspnetcoreDiagnosticsExceptionResultValues
    public struct AspnetcoreDiagnosticsExceptionResultValues: CustomStringConvertible {
      /**
      Exception was handled by the exception handling middleware.
      */
      public static let handled = AspnetcoreDiagnosticsExceptionResultValues("handled") 
      /**
      Exception was not handled by the exception handling middleware.
      */
      public static let unhandled = AspnetcoreDiagnosticsExceptionResultValues("unhandled") 
      /**
      Exception handling was skipped because the response had started.
      */
      public static let skipped = AspnetcoreDiagnosticsExceptionResultValues("skipped") 
      /**
      Exception handling didn't run because the request was aborted.
      */
      public static let aborted = AspnetcoreDiagnosticsExceptionResultValues("aborted") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result from checking the password.
    */
    /// - Tag: otelAspnetcoreIdentityPasswordCheckResultValues
    public struct AspnetcoreIdentityPasswordCheckResultValues: CustomStringConvertible {
      /**
      Password check was successful.
      */
      public static let success = AspnetcoreIdentityPasswordCheckResultValues("success") 
      /**
      Password check was successful however the password was encoded using a deprecated algorithm and should be rehashed and updated.
      */
      public static let successRehashNeeded = AspnetcoreIdentityPasswordCheckResultValues("success_rehash_needed") 
      /**
      Password check failed.
      */
      public static let failure = AspnetcoreIdentityPasswordCheckResultValues("failure") 
      /**
      Password check couldn't proceed because the password was missing from the user.
      */
      public static let passwordMissing = AspnetcoreIdentityPasswordCheckResultValues("password_missing") 
      /**
      Password check couldn't proceed because the user was missing.
      */
      public static let userMissing = AspnetcoreIdentityPasswordCheckResultValues("user_missing") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of the identity operation.
    */
    /// - Tag: otelAspnetcoreIdentityResultValues
    public struct AspnetcoreIdentityResultValues: CustomStringConvertible {
      /**
      Identity operation was successful.
      */
      public static let success = AspnetcoreIdentityResultValues("success") 
      /**
      Identity operation failed.
      */
      public static let failure = AspnetcoreIdentityResultValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Whether the sign in result was success or failure.
    */
    /// - Tag: otelAspnetcoreIdentitySignInResultValues
    public struct AspnetcoreIdentitySignInResultValues: CustomStringConvertible {
      /**
      Sign in was successful.
      */
      public static let success = AspnetcoreIdentitySignInResultValues("success") 
      /**
      User is locked out.
      */
      public static let lockedOut = AspnetcoreIdentitySignInResultValues("locked_out") 
      /**
      User is not allowed to sign in.
      */
      public static let notAllowed = AspnetcoreIdentitySignInResultValues("not_allowed") 
      /**
      User requires two factory authentication to sign in.
      */
      public static let requiresTwoFactor = AspnetcoreIdentitySignInResultValues("requires_two_factor") 
      /**
      Sign in failed.
      */
      public static let failure = AspnetcoreIdentitySignInResultValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The authentication type.
    */
    /// - Tag: otelAspnetcoreIdentitySignInTypeValues
    public struct AspnetcoreIdentitySignInTypeValues: CustomStringConvertible {
      /**
      Sign in with password.
      */
      public static let password = AspnetcoreIdentitySignInTypeValues("password") 
      /**
      Sign in with two factory recovery code.
      */
      public static let twoFactorRecoveryCode = AspnetcoreIdentitySignInTypeValues("two_factor_recovery_code") 
      /**
      Sign in with two factor authenticator app.
      */
      public static let twoFactorAuthenticator = AspnetcoreIdentitySignInTypeValues("two_factor_authenticator") 
      /**
      Sign in with a two factor provider.
      */
      public static let twoFactor = AspnetcoreIdentitySignInTypeValues("two_factor") 
      /**
      Sign in with a previously registered third-party login.
      */
      public static let external = AspnetcoreIdentitySignInTypeValues("external") 
      /**
      Sign in with passkey.
      */
      public static let passkey = AspnetcoreIdentitySignInTypeValues("passkey") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      What the token will be used for.
    */
    /// - Tag: otelAspnetcoreIdentityTokenPurposeValues
    public struct AspnetcoreIdentityTokenPurposeValues: CustomStringConvertible {
      /**
      The token is for resetting a user password.
      */
      public static let resetPassword = AspnetcoreIdentityTokenPurposeValues("reset_password") 
      /**
      The token is for changing a user phone number.
      */
      public static let changePhoneNumber = AspnetcoreIdentityTokenPurposeValues("change_phone_number") 
      /**
      The token is for confirming user email address.
      */
      public static let emailConfirmation = AspnetcoreIdentityTokenPurposeValues("email_confirmation") 
      /**
      The token is for changing the user email address.
      */
      public static let changeEmail = AspnetcoreIdentityTokenPurposeValues("change_email") 
      /**
      The token is for changing user two factor settings.
      */
      public static let twoFactor = AspnetcoreIdentityTokenPurposeValues("two_factor") 
      /**
      Any token purpose that the instrumentation has no prior knowledge of.
      */
      public static let other = AspnetcoreIdentityTokenPurposeValues("_OTHER") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of token verification.
    */
    /// - Tag: otelAspnetcoreIdentityTokenVerifiedValues
    public struct AspnetcoreIdentityTokenVerifiedValues: CustomStringConvertible {
      /**
      Token verification was successful.
      */
      public static let success = AspnetcoreIdentityTokenVerifiedValues("success") 
      /**
      Token verification failed.
      */
      public static let failure = AspnetcoreIdentityTokenVerifiedValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The user update type.
    */
    /// - Tag: otelAspnetcoreIdentityUserUpdateTypeValues
    public struct AspnetcoreIdentityUserUpdateTypeValues: CustomStringConvertible {
      /**
      Identity user updated.
      */
      public static let update = AspnetcoreIdentityUserUpdateTypeValues("update") 
      /**
      Identity user name updated.
      */
      public static let userName = AspnetcoreIdentityUserUpdateTypeValues("user_name") 
      /**
      Identity user password added.
      */
      public static let addPassword = AspnetcoreIdentityUserUpdateTypeValues("add_password") 
      /**
      Identity user password changed.
      */
      public static let changePassword = AspnetcoreIdentityUserUpdateTypeValues("change_password") 
      /**
      Identity user security stamp updated.
      */
      public static let securityStamp = AspnetcoreIdentityUserUpdateTypeValues("security_stamp") 
      /**
      Identity user password reset.
      */
      public static let resetPassword = AspnetcoreIdentityUserUpdateTypeValues("reset_password") 
      /**
      Identity user login removed.
      */
      public static let removeLogin = AspnetcoreIdentityUserUpdateTypeValues("remove_login") 
      /**
      Identity user login added.
      */
      public static let addLogin = AspnetcoreIdentityUserUpdateTypeValues("add_login") 
      /**
      Identity user claims added.
      */
      public static let addClaims = AspnetcoreIdentityUserUpdateTypeValues("add_claims") 
      /**
      Identity user claim replaced.
      */
      public static let replaceClaim = AspnetcoreIdentityUserUpdateTypeValues("replace_claim") 
      /**
      Identity user claims removed.
      */
      public static let removeClaims = AspnetcoreIdentityUserUpdateTypeValues("remove_claims") 
      /**
      Identity user added to roles.
      */
      public static let addToRoles = AspnetcoreIdentityUserUpdateTypeValues("add_to_roles") 
      /**
      Identity user removed from roles.
      */
      public static let removeFromRoles = AspnetcoreIdentityUserUpdateTypeValues("remove_from_roles") 
      /**
      Identity user email set.
      */
      public static let setEmail = AspnetcoreIdentityUserUpdateTypeValues("set_email") 
      /**
      Identity user email confirmed.
      */
      public static let confirmEmail = AspnetcoreIdentityUserUpdateTypeValues("confirm_email") 
      /**
      Identity user password rehashed.
      */
      public static let passwordRehash = AspnetcoreIdentityUserUpdateTypeValues("password_rehash") 
      /**
      Identity user password removed.
      */
      public static let removePassword = AspnetcoreIdentityUserUpdateTypeValues("remove_password") 
      /**
      Identity user email changed.
      */
      public static let changeEmail = AspnetcoreIdentityUserUpdateTypeValues("change_email") 
      /**
      Identity user phone number set.
      */
      public static let setPhoneNumber = AspnetcoreIdentityUserUpdateTypeValues("set_phone_number") 
      /**
      Identity user phone number changed.
      */
      public static let changePhoneNumber = AspnetcoreIdentityUserUpdateTypeValues("change_phone_number") 
      /**
      Identity user two-factor authentication enabled or disabled.
      */
      public static let setTwoFactorEnabled = AspnetcoreIdentityUserUpdateTypeValues("set_two_factor_enabled") 
      /**
      Identity user lockout enabled or disabled.
      */
      public static let setLockoutEnabled = AspnetcoreIdentityUserUpdateTypeValues("set_lockout_enabled") 
      /**
      Identity user lockout end date set.
      */
      public static let setLockoutEndDate = AspnetcoreIdentityUserUpdateTypeValues("set_lockout_end_date") 
      /**
      Identity user access failure recorded.
      */
      public static let accessFailed = AspnetcoreIdentityUserUpdateTypeValues("access_failed") 
      /**
      Identity user access failure count reset.
      */
      public static let resetAccessFailedCount = AspnetcoreIdentityUserUpdateTypeValues("reset_access_failed_count") 
      /**
      Identity user authentication token set.
      */
      public static let setAuthenticationToken = AspnetcoreIdentityUserUpdateTypeValues("set_authentication_token") 
      /**
      Identity user authentication token removed.
      */
      public static let removeAuthenticationToken = AspnetcoreIdentityUserUpdateTypeValues("remove_authentication_token") 
      /**
      Identity user authenticator key reset.
      */
      public static let resetAuthenticatorKey = AspnetcoreIdentityUserUpdateTypeValues("reset_authenticator_key") 
      /**
      Identity user new two-factor recovery codes generated.
      */
      public static let generateNewTwoFactorRecoveryCodes = AspnetcoreIdentityUserUpdateTypeValues("generate_new_two_factor_recovery_codes") 
      /**
      Identity user two-factor recovery code redeemed.
      */
      public static let redeemTwoFactorRecoveryCode = AspnetcoreIdentityUserUpdateTypeValues("redeem_two_factor_recovery_code") 
      /**
      Identity user passkey set.
      */
      public static let setPasskey = AspnetcoreIdentityUserUpdateTypeValues("set_passkey") 
      /**
      Identity user passkey removed.
      */
      public static let removePasskey = AspnetcoreIdentityUserUpdateTypeValues("remove_passkey") 
      /**
      Any update type that the instrumentation has no prior knowledge of.
      */
      public static let other = AspnetcoreIdentityUserUpdateTypeValues("_OTHER") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
    */
    /// - Tag: otelAspnetcoreRateLimitingResultValues
    public struct AspnetcoreRateLimitingResultValues: CustomStringConvertible {
      /**
      Lease was acquired
      */
      public static let acquired = AspnetcoreRateLimitingResultValues("acquired") 
      /**
      Lease request was rejected by the endpoint limiter
      */
      public static let endpointLimiter = AspnetcoreRateLimitingResultValues("endpoint_limiter") 
      /**
      Lease request was rejected by the global limiter
      */
      public static let globalLimiter = AspnetcoreRateLimitingResultValues("global_limiter") 
      /**
      Lease request was canceled
      */
      public static let requestCanceled = AspnetcoreRateLimitingResultValues("request_canceled") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Match result - success or failure
    */
    /// - Tag: otelAspnetcoreRoutingMatchStatusValues
    public struct AspnetcoreRoutingMatchStatusValues: CustomStringConvertible {
      /**
      Match succeeded
      */
      public static let success = AspnetcoreRoutingMatchStatusValues("success") 
      /**
      Match failed
      */
      public static let failure = AspnetcoreRoutingMatchStatusValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}