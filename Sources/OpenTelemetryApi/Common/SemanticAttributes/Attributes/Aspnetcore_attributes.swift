/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Aspnetcore: String {

    /**
     The result of the authentication operation.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.authenticationResult.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.authenticationResult.rawValue] = .failure
      ```

     - Requires: Value should be one of ``AuthenticationResultValues`` (of type `String`)
    */
    case authenticationResult = "aspnetcore.authentication.result"

    /**
     The identifier that names a particular authentication handler.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.authenticationScheme.rawValue] = "Cookies"
      attributes[SemanticConventions.Aspnetcore.authenticationScheme.rawValue] = "Bearer"
      attributes[SemanticConventions.Aspnetcore.authenticationScheme.rawValue] = "Identity.Application"
      ```

     - Requires: Value type should be `String`
    */
    case authenticationScheme = "aspnetcore.authentication.scheme"

    /**
     The name of the authorization policy.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.authorizationPolicy.rawValue] = "RequireAdminRole"
      ```

     - Requires: Value type should be `String`
    */
    case authorizationPolicy = "aspnetcore.authorization.policy"

    /**
     The result of calling the authorization service.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.authorizationResult.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.authorizationResult.rawValue] = .failure
      ```

     - Requires: Value should be one of ``AuthorizationResultValues`` (of type `String`)
    */
    case authorizationResult = "aspnetcore.authorization.result"

    /**
     ASP.NET Core exception middleware handling result.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.diagnosticsExceptionResult.rawValue] = .handled
      attributes[SemanticConventions.Aspnetcore.diagnosticsExceptionResult.rawValue] = .unhandled
      ```

     - Requires: Value should be one of ``DiagnosticsExceptionResultValues`` (of type `String`)
    */
    case diagnosticsExceptionResult = "aspnetcore.diagnostics.exception.result"

    /**
     Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.diagnosticsHandlerType.rawValue] = "Contoso.MyHandler"
      ```

     - Requires: Value type should be `String`
    */
    case diagnosticsHandlerType = "aspnetcore.diagnostics.handler.type"

    /**
     The error code for a failed identity operation.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityErrorCode.rawValue] = "DefaultError"
      attributes[SemanticConventions.Aspnetcore.identityErrorCode.rawValue] = "PasswordMismatch"
      ```

     - Requires: Value type should be `String`
    */
    case identityErrorCode = "aspnetcore.identity.error_code"

    /**
     The result from checking the password.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityPasswordCheckResult.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.identityPasswordCheckResult.rawValue] = .failure
      ```

     - Requires: Value should be one of ``IdentityPasswordCheckResultValues`` (of type `String`)
    */
    case identityPasswordCheckResult = "aspnetcore.identity.password_check_result"

    /**
     The result of the identity operation.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityResult.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.identityResult.rawValue] = .failure
      ```

     - Requires: Value should be one of ``IdentityResultValues`` (of type `String`)
    */
    case identityResult = "aspnetcore.identity.result"

    /**
     Whether the sign in result was success or failure.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identitySignInResult.rawValue] = .password
      attributes[SemanticConventions.Aspnetcore.identitySignInResult.rawValue] = .two_factor
      ```

     - Requires: Value should be one of ``IdentitySignInResultValues`` (of type `String`)
    */
    case identitySignInResult = "aspnetcore.identity.sign_in.result"

    /**
     The authentication type.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identitySignInType.rawValue] = .password
      attributes[SemanticConventions.Aspnetcore.identitySignInType.rawValue] = .two_factor
      ```

     - Requires: Value should be one of ``IdentitySignInTypeValues`` (of type `String`)
    */
    case identitySignInType = "aspnetcore.identity.sign_in.type"

    /**
     What the token will be used for.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityTokenPurpose.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.identityTokenPurpose.rawValue] = .failure
      ```

     - Requires: Value should be one of ``IdentityTokenPurposeValues`` (of type `String`)
    */
    case identityTokenPurpose = "aspnetcore.identity.token_purpose"

    /**
     The result of token verification.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityTokenVerified.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.identityTokenVerified.rawValue] = .failure
      ```

     - Requires: Value should be one of ``IdentityTokenVerifiedValues`` (of type `String`)
    */
    case identityTokenVerified = "aspnetcore.identity.token_verified"

    /**
     The user update type.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityUserUpdateType.rawValue] = .update
      attributes[SemanticConventions.Aspnetcore.identityUserUpdateType.rawValue] = .user_name
      attributes[SemanticConventions.Aspnetcore.identityUserUpdateType.rawValue] = .reset_password
      ```

     - Requires: Value should be one of ``IdentityUserUpdateTypeValues`` (of type `String`)
    */
    case identityUserUpdateType = "aspnetcore.identity.user.update_type"

    /**
     The full name of the identity user type.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.identityUserType.rawValue] = "Contoso.ContosoUser"
      ```

     - Requires: Value type should be `String`
    */
    case identityUserType = "aspnetcore.identity.user_type"

    /**
     The name of the library or subsystem using the memory pool instance.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.memoryPoolOwner.rawValue] = "kestrel"
      attributes[SemanticConventions.Aspnetcore.memoryPoolOwner.rawValue] = "iis"
      ```

     - Requires: Value type should be `String`
    */
    case memoryPoolOwner = "aspnetcore.memory_pool.owner"

    /**
     Rate limiting policy name.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.rateLimitingPolicy.rawValue] = "fixed"
      attributes[SemanticConventions.Aspnetcore.rateLimitingPolicy.rawValue] = "sliding"
      attributes[SemanticConventions.Aspnetcore.rateLimitingPolicy.rawValue] = "token"
      ```

     - Requires: Value type should be `String`
    */
    case rateLimitingPolicy = "aspnetcore.rate_limiting.policy"

    /**
     Rate-limiting result, shows whether the lease was acquired or contains a rejection reason

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.rateLimitingResult.rawValue] = .acquired
      attributes[SemanticConventions.Aspnetcore.rateLimitingResult.rawValue] = .request_canceled
      ```

     - Requires: Value should be one of ``RateLimitingResultValues`` (of type `String`)
    */
    case rateLimitingResult = "aspnetcore.rate_limiting.result"

    /**
     Flag indicating if request was handled by the application pipeline.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.requestIsUnhandled.rawValue] = true
      ```

     - Requires: Value type should be `Bool`
    */
    case requestIsUnhandled = "aspnetcore.request.is_unhandled"

    /**
     A value that indicates whether the matched route is a fallback route.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.routingIsFallback.rawValue] = true
      ```

     - Requires: Value type should be `Bool`
    */
    case routingIsFallback = "aspnetcore.routing.is_fallback"

    /**
     Match result - success or failure

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.routingMatchStatus.rawValue] = .success
      attributes[SemanticConventions.Aspnetcore.routingMatchStatus.rawValue] = .failure
      ```

     - Requires: Value should be one of ``RoutingMatchStatusValues`` (of type `String`)
    */
    case routingMatchStatus = "aspnetcore.routing.match_status"

    /**
     A flag indicating whether the sign in is persistent.

     - Requires: Value type should be `Bool`
    */
    case signInIsPersistent = "aspnetcore.sign_in.is_persistent"

    /**
     A value that indicates whether the user is authenticated.

      - Examples:
      ```
      attributes[SemanticConventions.Aspnetcore.userIsAuthenticated.rawValue] = true
      ```

     - Requires: Value type should be `Bool`
    */
    case userIsAuthenticated = "aspnetcore.user.is_authenticated"

    /** 
      The result of the authentication operation.
    */
    public struct AuthenticationResultValues: CustomStringConvertible {
      
      /// Authentication was successful.
      public static let success = AuthenticationResultValues("success") 
      
      /// Authentication failed.
      public static let failure = AuthenticationResultValues("failure") 
      
      /// No authentication information returned.
      public static let none = AuthenticationResultValues("none") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of calling the authorization service.
    */
    public struct AuthorizationResultValues: CustomStringConvertible {
      
      /// Authorization was successful.
      public static let success = AuthorizationResultValues("success") 
      
      /// Authorization failed.
      public static let failure = AuthorizationResultValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      ASP.NET Core exception middleware handling result.
    */
    public struct DiagnosticsExceptionResultValues: CustomStringConvertible {
      
      /// Exception was handled by the exception handling middleware.
      public static let handled = DiagnosticsExceptionResultValues("handled") 
      
      /// Exception was not handled by the exception handling middleware.
      public static let unhandled = DiagnosticsExceptionResultValues("unhandled") 
      
      /// Exception handling was skipped because the response had started.
      public static let skipped = DiagnosticsExceptionResultValues("skipped") 
      
      /// Exception handling didn't run because the request was aborted.
      public static let aborted = DiagnosticsExceptionResultValues("aborted") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result from checking the password.
    */
    public struct IdentityPasswordCheckResultValues: CustomStringConvertible {
      
      /// Password check was successful.
      public static let success = IdentityPasswordCheckResultValues("success") 
      
      /// Password check was successful however the password was encoded using a deprecated algorithm and should be rehashed and updated.
      public static let successRehashNeeded = IdentityPasswordCheckResultValues("success_rehash_needed") 
      
      /// Password check failed.
      public static let failure = IdentityPasswordCheckResultValues("failure") 
      
      /// Password check couldn't proceed because the password was missing from the user.
      public static let passwordMissing = IdentityPasswordCheckResultValues("password_missing") 
      
      /// Password check couldn't proceed because the user was missing.
      public static let userMissing = IdentityPasswordCheckResultValues("user_missing") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of the identity operation.
    */
    public struct IdentityResultValues: CustomStringConvertible {
      
      /// Identity operation was successful.
      public static let success = IdentityResultValues("success") 
      
      /// Identity operation failed.
      public static let failure = IdentityResultValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Whether the sign in result was success or failure.
    */
    public struct IdentitySignInResultValues: CustomStringConvertible {
      
      /// Sign in was successful.
      public static let success = IdentitySignInResultValues("success") 
      
      /// User is locked out.
      public static let lockedOut = IdentitySignInResultValues("locked_out") 
      
      /// User is not allowed to sign in.
      public static let notAllowed = IdentitySignInResultValues("not_allowed") 
      
      /// User requires two factory authentication to sign in.
      public static let requiresTwoFactor = IdentitySignInResultValues("requires_two_factor") 
      
      /// Sign in failed.
      public static let failure = IdentitySignInResultValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The authentication type.
    */
    public struct IdentitySignInTypeValues: CustomStringConvertible {
      
      /// Sign in with password.
      public static let password = IdentitySignInTypeValues("password") 
      
      /// Sign in with two factory recovery code.
      public static let twoFactorRecoveryCode = IdentitySignInTypeValues("two_factor_recovery_code") 
      
      /// Sign in with two factor authenticator app.
      public static let twoFactorAuthenticator = IdentitySignInTypeValues("two_factor_authenticator") 
      
      /// Sign in with a two factor provider.
      public static let twoFactor = IdentitySignInTypeValues("two_factor") 
      
      /// Sign in with a previously registered third-party login.
      public static let external = IdentitySignInTypeValues("external") 
      
      /// Sign in with passkey.
      public static let passkey = IdentitySignInTypeValues("passkey") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      What the token will be used for.
    */
    public struct IdentityTokenPurposeValues: CustomStringConvertible {
      
      /// The token is for resetting a user password.
      public static let resetPassword = IdentityTokenPurposeValues("reset_password") 
      
      /// The token is for changing a user phone number.
      public static let changePhoneNumber = IdentityTokenPurposeValues("change_phone_number") 
      
      /// The token is for confirming user email address.
      public static let emailConfirmation = IdentityTokenPurposeValues("email_confirmation") 
      
      /// The token is for changing the user email address.
      public static let changeEmail = IdentityTokenPurposeValues("change_email") 
      
      /// The token is for changing user two factor settings.
      public static let twoFactor = IdentityTokenPurposeValues("two_factor") 
      
      /// Any token purpose that the instrumentation has no prior knowledge of.
      public static let other = IdentityTokenPurposeValues("_OTHER") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of token verification.
    */
    public struct IdentityTokenVerifiedValues: CustomStringConvertible {
      
      /// Token verification was successful.
      public static let success = IdentityTokenVerifiedValues("success") 
      
      /// Token verification failed.
      public static let failure = IdentityTokenVerifiedValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The user update type.
    */
    public struct IdentityUserUpdateTypeValues: CustomStringConvertible {
      
      /// Identity user updated.
      public static let update = IdentityUserUpdateTypeValues("update") 
      
      /// Identity user name updated.
      public static let userName = IdentityUserUpdateTypeValues("user_name") 
      
      /// Identity user password added.
      public static let addPassword = IdentityUserUpdateTypeValues("add_password") 
      
      /// Identity user password changed.
      public static let changePassword = IdentityUserUpdateTypeValues("change_password") 
      
      /// Identity user security stamp updated.
      public static let securityStamp = IdentityUserUpdateTypeValues("security_stamp") 
      
      /// Identity user password reset.
      public static let resetPassword = IdentityUserUpdateTypeValues("reset_password") 
      
      /// Identity user login removed.
      public static let removeLogin = IdentityUserUpdateTypeValues("remove_login") 
      
      /// Identity user login added.
      public static let addLogin = IdentityUserUpdateTypeValues("add_login") 
      
      /// Identity user claims added.
      public static let addClaims = IdentityUserUpdateTypeValues("add_claims") 
      
      /// Identity user claim replaced.
      public static let replaceClaim = IdentityUserUpdateTypeValues("replace_claim") 
      
      /// Identity user claims removed.
      public static let removeClaims = IdentityUserUpdateTypeValues("remove_claims") 
      
      /// Identity user added to roles.
      public static let addToRoles = IdentityUserUpdateTypeValues("add_to_roles") 
      
      /// Identity user removed from roles.
      public static let removeFromRoles = IdentityUserUpdateTypeValues("remove_from_roles") 
      
      /// Identity user email set.
      public static let setEmail = IdentityUserUpdateTypeValues("set_email") 
      
      /// Identity user email confirmed.
      public static let confirmEmail = IdentityUserUpdateTypeValues("confirm_email") 
      
      /// Identity user password rehashed.
      public static let passwordRehash = IdentityUserUpdateTypeValues("password_rehash") 
      
      /// Identity user password removed.
      public static let removePassword = IdentityUserUpdateTypeValues("remove_password") 
      
      /// Identity user email changed.
      public static let changeEmail = IdentityUserUpdateTypeValues("change_email") 
      
      /// Identity user phone number set.
      public static let setPhoneNumber = IdentityUserUpdateTypeValues("set_phone_number") 
      
      /// Identity user phone number changed.
      public static let changePhoneNumber = IdentityUserUpdateTypeValues("change_phone_number") 
      
      /// Identity user two-factor authentication enabled or disabled.
      public static let setTwoFactorEnabled = IdentityUserUpdateTypeValues("set_two_factor_enabled") 
      
      /// Identity user lockout enabled or disabled.
      public static let setLockoutEnabled = IdentityUserUpdateTypeValues("set_lockout_enabled") 
      
      /// Identity user lockout end date set.
      public static let setLockoutEndDate = IdentityUserUpdateTypeValues("set_lockout_end_date") 
      
      /// Identity user access failure recorded.
      public static let accessFailed = IdentityUserUpdateTypeValues("access_failed") 
      
      /// Identity user access failure count reset.
      public static let resetAccessFailedCount = IdentityUserUpdateTypeValues("reset_access_failed_count") 
      
      /// Identity user authentication token set.
      public static let setAuthenticationToken = IdentityUserUpdateTypeValues("set_authentication_token") 
      
      /// Identity user authentication token removed.
      public static let removeAuthenticationToken = IdentityUserUpdateTypeValues("remove_authentication_token") 
      
      /// Identity user authenticator key reset.
      public static let resetAuthenticatorKey = IdentityUserUpdateTypeValues("reset_authenticator_key") 
      
      /// Identity user new two-factor recovery codes generated.
      public static let generateNewTwoFactorRecoveryCodes = IdentityUserUpdateTypeValues("generate_new_two_factor_recovery_codes") 
      
      /// Identity user two-factor recovery code redeemed.
      public static let redeemTwoFactorRecoveryCode = IdentityUserUpdateTypeValues("redeem_two_factor_recovery_code") 
      
      /// Identity user passkey set.
      public static let setPasskey = IdentityUserUpdateTypeValues("set_passkey") 
      
      /// Identity user passkey removed.
      public static let removePasskey = IdentityUserUpdateTypeValues("remove_passkey") 
      
      /// Any update type that the instrumentation has no prior knowledge of.
      public static let other = IdentityUserUpdateTypeValues("_OTHER") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
    */
    public struct RateLimitingResultValues: CustomStringConvertible {
      
      /// Lease was acquired
      public static let acquired = RateLimitingResultValues("acquired") 
      
      /// Lease request was rejected by the endpoint limiter
      public static let endpointLimiter = RateLimitingResultValues("endpoint_limiter") 
      
      /// Lease request was rejected by the global limiter
      public static let globalLimiter = RateLimitingResultValues("global_limiter") 
      
      /// Lease request was canceled
      public static let requestCanceled = RateLimitingResultValues("request_canceled") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Match result - success or failure
    */
    public struct RoutingMatchStatusValues: CustomStringConvertible {
      
      /// Match succeeded
      public static let success = RoutingMatchStatusValues("success") 
      
      /// Match failed
      public static let failure = RoutingMatchStatusValues("failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}