/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Test: String {

    /**
     The fully qualified human readable name of the [test case](https://wikipedia.org/wiki/Test_case).

      - Examples:
      ```
      attributes[SemanticConventions.Test.caseName.rawValue] = "org.example.TestCase1.test1"
      attributes[SemanticConventions.Test.caseName.rawValue] = "example/tests/TestCase1.test1"
      attributes[SemanticConventions.Test.caseName.rawValue] = "ExampleTestCase1_test1"
      ```

     - Requires: Value type should be `String`
    */
    case caseName = "test.case.name"

    /**
     The status of the actual test case result from test execution.

      - Examples:
      ```
      attributes[SemanticConventions.Test.caseResultStatus.rawValue] = .pass
      attributes[SemanticConventions.Test.caseResultStatus.rawValue] = .fail
      ```

     - Requires: Value should be one of ``CaseResultStatusValues`` (of type `String`)
    */
    case caseResultStatus = "test.case.result.status"

    /**
     The human readable name of a [test suite](https://wikipedia.org/wiki/Test_suite).

      - Examples:
      ```
      attributes[SemanticConventions.Test.suiteName.rawValue] = "TestSuite1"
      ```

     - Requires: Value type should be `String`
    */
    case suiteName = "test.suite.name"

    /**
     The status of the test suite run.

      - Examples:
      ```
      attributes[SemanticConventions.Test.suiteRunStatus.rawValue] = .success
      attributes[SemanticConventions.Test.suiteRunStatus.rawValue] = .failure
      attributes[SemanticConventions.Test.suiteRunStatus.rawValue] = .skipped
      attributes[SemanticConventions.Test.suiteRunStatus.rawValue] = .aborted
      attributes[SemanticConventions.Test.suiteRunStatus.rawValue] = .timed_out
      attributes[SemanticConventions.Test.suiteRunStatus.rawValue] = .in_progress
      ```

     - Requires: Value should be one of ``SuiteRunStatusValues`` (of type `String`)
    */
    case suiteRunStatus = "test.suite.run.status"

    /** 
      The status of the actual test case result from test execution.
    */
    public struct CaseResultStatusValues: CustomStringConvertible {
      
      /// pass
      public static let pass = CaseResultStatusValues("pass") 
      
      /// fail
      public static let fail = CaseResultStatusValues("fail") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The status of the test suite run.
    */
    public struct SuiteRunStatusValues: CustomStringConvertible {
      
      /// success
      public static let success = SuiteRunStatusValues("success") 
      
      /// failure
      public static let failure = SuiteRunStatusValues("failure") 
      
      /// skipped
      public static let skipped = SuiteRunStatusValues("skipped") 
      
      /// aborted
      public static let aborted = SuiteRunStatusValues("aborted") 
      
      /// timed_out
      public static let timedOut = SuiteRunStatusValues("timed_out") 
      
      /// in_progress
      public static let inProgress = SuiteRunStatusValues("in_progress") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}