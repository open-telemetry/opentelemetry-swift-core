/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Rpc: String {
    /**
     The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
     - Requires: Value should be one of [`/output/Attributes/Rpc_attributes.swift.RpcConnectRpcErrorCodeValues`](x-source-tag://otelRpcConnectRpcErrorCodeValues) (of type `String`)
    */
    case rpcConnectRpcErrorCode = "rpc.connect_rpc.error_code"

    /**
     Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
      // Examples
      attributes[.rpcConnectRpcRequestMetadata] = ["1.2.3.4", "1.2.3.5"]
     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
     Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

     For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
     the `rpc.connect_rpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
     - Requires: Value type should be `template[string[]]`
    */
    case rpcConnectRpcRequestMetadata = "rpc.connect_rpc.request.metadata"

    /**
     Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
      // Examples
      attributes[.rpcConnectRpcResponseMetadata] = ["attribute_value"]
     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
     Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

     For example, a property `my-custom-key` with value `"attribute_value"` SHOULD be recorded as
     the `rpc.connect_rpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
     - Requires: Value type should be `template[string[]]`
    */
    case rpcConnectRpcResponseMetadata = "rpc.connect_rpc.response.metadata"

    /**
     gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
      // Examples
      attributes[.rpcGrpcRequestMetadata] = ["1.2.3.4", "1.2.3.5"]
     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
     Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

     For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
     `rpc.grpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
     - Requires: Value type should be `template[string[]]`
    */
    case rpcGrpcRequestMetadata = "rpc.grpc.request.metadata"

    /**
     gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
      // Examples
      attributes[.rpcGrpcResponseMetadata] = ["attribute_value"]
     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
     Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

     For example, a property `my-custom-key` with value `["attribute_value"]` SHOULD be recorded as
     the `rpc.grpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
     - Requires: Value type should be `template[string[]]`
    */
    case rpcGrpcResponseMetadata = "rpc.grpc.response.metadata"

    /**
     The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
     - Requires: Value should be one of [`/output/Attributes/Rpc_attributes.swift.RpcGrpcStatusCodeValues`](x-source-tag://otelRpcGrpcStatusCodeValues) (of type `Int`)
    */
    case rpcGrpcStatusCode = "rpc.grpc.status_code"

    /**
     `error.code` property of response if it is an error response.
      // Examples
      attributes[.rpcJsonrpcErrorCode] = -32700
      attributes[.rpcJsonrpcErrorCode] = 100
     - Requires: Value type should be `Int`
    */
    case rpcJsonrpcErrorCode = "rpc.jsonrpc.error_code"

    /**
     `error.message` property of response if it is an error response.
      // Examples
      attributes[.rpcJsonrpcErrorMessage] = "Parse error"
      attributes[.rpcJsonrpcErrorMessage] = "User already exists"
     - Requires: Value type should be `String`
    */
    case rpcJsonrpcErrorMessage = "rpc.jsonrpc.error_message"

    /**
     `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.
      // Examples
      attributes[.rpcJsonrpcRequestId] = "10"
      attributes[.rpcJsonrpcRequestId] = "request-7"
      attributes[.rpcJsonrpcRequestId] = ""
     - Requires: Value type should be `String`
    */
    case rpcJsonrpcRequestId = "rpc.jsonrpc.request_id"

    /**
     Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.
      // Examples
      attributes[.rpcJsonrpcVersion] = "2.0"
      attributes[.rpcJsonrpcVersion] = "1.0"
     - Requires: Value type should be `String`
    */
    case rpcJsonrpcVersion = "rpc.jsonrpc.version"

    /**
     Compressed size of the message in bytes.
     - Requires: Value type should be `Int`
    */
    case rpcMessageCompressedSize = "rpc.message.compressed_size"

    /**
     MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.
     - Note: This way we guarantee that the values will be consistent between different implementations.
     - Requires: Value type should be `Int`
    */
    case rpcMessageId = "rpc.message.id"

    /**
     Whether this is a received or sent message.
     - Requires: Value should be one of [`/output/Attributes/Rpc_attributes.swift.RpcMessageTypeValues`](x-source-tag://otelRpcMessageTypeValues) (of type `String`)
    */
    case rpcMessageType = "rpc.message.type"

    /**
     Uncompressed size of the message in bytes.
     - Requires: Value type should be `Int`
    */
    case rpcMessageUncompressedSize = "rpc.message.uncompressed_size"

    /**
     The name of the (logical) method being called, must be equal to the $method part in the span name.
      // Examples
  
   attributes[.rpcMethod] = "exampleMethod"
     - Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
     - Requires: Value type should be `String`
    */
    case rpcMethod = "rpc.method"

    /**
     The full (logical) name of the service being called, including its package name, if applicable.
      // Examples
  
   attributes[.rpcService] = "myservice.EchoService"
     - Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
     - Requires: Value type should be `String`
    */
    case rpcService = "rpc.service"

    /**
     A string identifying the remoting system. See below for a list of well-known identifiers.
     - Requires: Value should be one of [`/output/Attributes/Rpc_attributes.swift.RpcSystemValues`](x-source-tag://otelRpcSystemValues) (of type `String`)
    */
    case rpcSystem = "rpc.system"


    /** 
      The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    */
    /// - Tag: otelRpcConnectRpcErrorCodeValues
    public struct RpcConnectRpcErrorCodeValues: CustomStringConvertible {
      public static let cancelled = RpcConnectRpcErrorCodeValues("cancelled") 
      public static let unknown = RpcConnectRpcErrorCodeValues("unknown") 
      public static let invalidArgument = RpcConnectRpcErrorCodeValues("invalid_argument") 
      public static let deadlineExceeded = RpcConnectRpcErrorCodeValues("deadline_exceeded") 
      public static let notFound = RpcConnectRpcErrorCodeValues("not_found") 
      public static let alreadyExists = RpcConnectRpcErrorCodeValues("already_exists") 
      public static let permissionDenied = RpcConnectRpcErrorCodeValues("permission_denied") 
      public static let resourceExhausted = RpcConnectRpcErrorCodeValues("resource_exhausted") 
      public static let failedPrecondition = RpcConnectRpcErrorCodeValues("failed_precondition") 
      public static let aborted = RpcConnectRpcErrorCodeValues("aborted") 
      public static let outOfRange = RpcConnectRpcErrorCodeValues("out_of_range") 
      public static let unimplemented = RpcConnectRpcErrorCodeValues("unimplemented") 
      public static let _internal = RpcConnectRpcErrorCodeValues("internal") 
      public static let unavailable = RpcConnectRpcErrorCodeValues("unavailable") 
      public static let dataLoss = RpcConnectRpcErrorCodeValues("data_loss") 
      public static let unauthenticated = RpcConnectRpcErrorCodeValues("unauthenticated") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    */
    /// - Tag: otelRpcGrpcStatusCodeValues
    public struct RpcGrpcStatusCodeValues: CustomStringConvertible {
      /**
      OK
      */
      public static let ok = RpcGrpcStatusCodeValues(0) 
      /**
      CANCELLED
      */
      public static let cancelled = RpcGrpcStatusCodeValues(1) 
      /**
      UNKNOWN
      */
      public static let unknown = RpcGrpcStatusCodeValues(2) 
      /**
      INVALID_ARGUMENT
      */
      public static let invalidArgument = RpcGrpcStatusCodeValues(3) 
      /**
      DEADLINE_EXCEEDED
      */
      public static let deadlineExceeded = RpcGrpcStatusCodeValues(4) 
      /**
      NOT_FOUND
      */
      public static let notFound = RpcGrpcStatusCodeValues(5) 
      /**
      ALREADY_EXISTS
      */
      public static let alreadyExists = RpcGrpcStatusCodeValues(6) 
      /**
      PERMISSION_DENIED
      */
      public static let permissionDenied = RpcGrpcStatusCodeValues(7) 
      /**
      RESOURCE_EXHAUSTED
      */
      public static let resourceExhausted = RpcGrpcStatusCodeValues(8) 
      /**
      FAILED_PRECONDITION
      */
      public static let failedPrecondition = RpcGrpcStatusCodeValues(9) 
      /**
      ABORTED
      */
      public static let aborted = RpcGrpcStatusCodeValues(10) 
      /**
      OUT_OF_RANGE
      */
      public static let outOfRange = RpcGrpcStatusCodeValues(11) 
      /**
      UNIMPLEMENTED
      */
      public static let unimplemented = RpcGrpcStatusCodeValues(12) 
      /**
      INTERNAL
      */
      public static let _internal = RpcGrpcStatusCodeValues(13) 
      /**
      UNAVAILABLE
      */
      public static let unavailable = RpcGrpcStatusCodeValues(14) 
      /**
      DATA_LOSS
      */
      public static let dataLoss = RpcGrpcStatusCodeValues(15) 
      /**
      UNAUTHENTICATED
      */
      public static let unauthenticated = RpcGrpcStatusCodeValues(16) 

      internal let value: Int 

      public init(_ customValue: Int) {
        self.value = customValue
      }

      public var description: String { 
        return "\(value)" 
      }
    }

    /** 
      Whether this is a received or sent message.
    */
    /// - Tag: otelRpcMessageTypeValues
    public struct RpcMessageTypeValues: CustomStringConvertible {
      public static let sent = RpcMessageTypeValues("SENT") 
      public static let received = RpcMessageTypeValues("RECEIVED") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      A string identifying the remoting system. See below for a list of well-known identifiers.
    */
    /// - Tag: otelRpcSystemValues
    public struct RpcSystemValues: CustomStringConvertible {
      /**
      gRPC
      */
      public static let grpc = RpcSystemValues("grpc") 
      /**
      Java RMI
      */
      public static let javaRmi = RpcSystemValues("java_rmi") 
      /**
      .NET WCF
      */
      public static let dotnetWcf = RpcSystemValues("dotnet_wcf") 
      /**
      Apache Dubbo
      */
      public static let apacheDubbo = RpcSystemValues("apache_dubbo") 
      /**
      Connect RPC
      */
      public static let connectRpc = RpcSystemValues("connect_rpc") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}