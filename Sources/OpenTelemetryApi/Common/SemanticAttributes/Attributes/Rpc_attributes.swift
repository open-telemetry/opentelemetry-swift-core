/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Rpc: String {

    /**
     The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.

     - Requires: Value should be one of ``ConnectErrorCodeValues`` (of type `String`)
    */
    case connectErrorCode = "rpc.connect_rpc.error_code"

    /**
     Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.connectRequestMetadata.rawValue] = ["1.2.3.4", "1.2.3.5"]
      ```

     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
       Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

       For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
       the `rpc.connect_rpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`

     - Requires: Value type should be `template[string[]]`
    */
    case connectRequestMetadata = "rpc.connect_rpc.request.metadata"

    /**
     Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.connectResponseMetadata.rawValue] = ["attribute_value"]
      ```

     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
       Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

       For example, a property `my-custom-key` with value `"attribute_value"` SHOULD be recorded as
       the `rpc.connect_rpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`

     - Requires: Value type should be `template[string[]]`
    */
    case connectResponseMetadata = "rpc.connect_rpc.response.metadata"

    /**
     gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.gRequestMetadata.rawValue] = ["1.2.3.4", "1.2.3.5"]
      ```

     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
       Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

       For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
       `rpc.grpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`

     - Requires: Value type should be `template[string[]]`
    */
    case gRequestMetadata = "rpc.grpc.request.metadata"

    /**
     gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.gResponseMetadata.rawValue] = ["attribute_value"]
      ```

     - Note: Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
       Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

       For example, a property `my-custom-key` with value `["attribute_value"]` SHOULD be recorded as
       the `rpc.grpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`

     - Requires: Value type should be `template[string[]]`
    */
    case gResponseMetadata = "rpc.grpc.response.metadata"

    /**
     The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.

     - Requires: Value should be one of ``GStatusCodeValues`` (of type `Int`)
    */
    case gStatusCode = "rpc.grpc.status_code"

    /**
     `error.code` property of response if it is an error response.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.jsonErrorCode.rawValue] = -32700
      attributes[SemanticConventions.Rpc.jsonErrorCode.rawValue] = 100
      ```

     - Requires: Value type should be `Int`
    */
    case jsonErrorCode = "rpc.jsonrpc.error_code"

    /**
     `error.message` property of response if it is an error response.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.jsonErrorMessage.rawValue] = "Parse error"
      attributes[SemanticConventions.Rpc.jsonErrorMessage.rawValue] = "User already exists"
      ```

     - Requires: Value type should be `String`
    */
    case jsonErrorMessage = "rpc.jsonrpc.error_message"

    /**
     `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.jsonRequestId.rawValue] = "10"
      attributes[SemanticConventions.Rpc.jsonRequestId.rawValue] = "request-7"
      attributes[SemanticConventions.Rpc.jsonRequestId.rawValue] = ""
      ```

     - Requires: Value type should be `String`
    */
    case jsonRequestId = "rpc.jsonrpc.request_id"

    /**
     Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.jsonVersion.rawValue] = "2.0"
      attributes[SemanticConventions.Rpc.jsonVersion.rawValue] = "1.0"
      ```

     - Requires: Value type should be `String`
    */
    case jsonVersion = "rpc.jsonrpc.version"

    /**
     Compressed size of the message in bytes.

     - Requires: Value type should be `Int`
    */
    case messageCompressedSize = "rpc.message.compressed_size"

    /**
     MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.

     - Note: This way we guarantee that the values will be consistent between different implementations.

     - Requires: Value type should be `Int`
    */
    case messageId = "rpc.message.id"

    /**
     Whether this is a received or sent message.

     - Requires: Value should be one of ``MessageTypeValues`` (of type `String`)
    */
    case messageType = "rpc.message.type"

    /**
     Uncompressed size of the message in bytes.

     - Requires: Value type should be `Int`
    */
    case messageUncompressedSize = "rpc.message.uncompressed_size"

    /**
     The name of the (logical) method being called, must be equal to the $method part in the span name.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.method.rawValue] = "exampleMethod"
      ```

     - Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).

     - Requires: Value type should be `String`
    */
    case method = "rpc.method"

    /**
     The full (logical) name of the service being called, including its package name, if applicable.

      - Examples:
      ```
      attributes[SemanticConventions.Rpc.service.rawValue] = "myservice.EchoService"
      ```

     - Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).

     - Requires: Value type should be `String`
    */
    case service = "rpc.service"

    /**
     A string identifying the remoting system. See below for a list of well-known identifiers.

     - Requires: Value should be one of ``SystemValues`` (of type `String`)
    */
    case system = "rpc.system"

    /** 
      The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    */
    public struct ConnectErrorCodeValues: CustomStringConvertible {
      public static let cancelled = ConnectErrorCodeValues("cancelled") 
      public static let unknown = ConnectErrorCodeValues("unknown") 
      public static let invalidArgument = ConnectErrorCodeValues("invalid_argument") 
      public static let deadlineExceeded = ConnectErrorCodeValues("deadline_exceeded") 
      public static let notFound = ConnectErrorCodeValues("not_found") 
      public static let alreadyExists = ConnectErrorCodeValues("already_exists") 
      public static let permissionDenied = ConnectErrorCodeValues("permission_denied") 
      public static let resourceExhausted = ConnectErrorCodeValues("resource_exhausted") 
      public static let failedPrecondition = ConnectErrorCodeValues("failed_precondition") 
      public static let aborted = ConnectErrorCodeValues("aborted") 
      public static let outOfRange = ConnectErrorCodeValues("out_of_range") 
      public static let unimplemented = ConnectErrorCodeValues("unimplemented") 
      public static let _internal = ConnectErrorCodeValues("internal") 
      public static let unavailable = ConnectErrorCodeValues("unavailable") 
      public static let dataLoss = ConnectErrorCodeValues("data_loss") 
      public static let unauthenticated = ConnectErrorCodeValues("unauthenticated") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    */
    public struct GStatusCodeValues: CustomStringConvertible {
      
      /// OK
      public static let ok = GStatusCodeValues(0) 
      
      /// CANCELLED
      public static let cancelled = GStatusCodeValues(1) 
      
      /// UNKNOWN
      public static let unknown = GStatusCodeValues(2) 
      
      /// INVALID_ARGUMENT
      public static let invalidArgument = GStatusCodeValues(3) 
      
      /// DEADLINE_EXCEEDED
      public static let deadlineExceeded = GStatusCodeValues(4) 
      
      /// NOT_FOUND
      public static let notFound = GStatusCodeValues(5) 
      
      /// ALREADY_EXISTS
      public static let alreadyExists = GStatusCodeValues(6) 
      
      /// PERMISSION_DENIED
      public static let permissionDenied = GStatusCodeValues(7) 
      
      /// RESOURCE_EXHAUSTED
      public static let resourceExhausted = GStatusCodeValues(8) 
      
      /// FAILED_PRECONDITION
      public static let failedPrecondition = GStatusCodeValues(9) 
      
      /// ABORTED
      public static let aborted = GStatusCodeValues(10) 
      
      /// OUT_OF_RANGE
      public static let outOfRange = GStatusCodeValues(11) 
      
      /// UNIMPLEMENTED
      public static let unimplemented = GStatusCodeValues(12) 
      
      /// INTERNAL
      public static let _internal = GStatusCodeValues(13) 
      
      /// UNAVAILABLE
      public static let unavailable = GStatusCodeValues(14) 
      
      /// DATA_LOSS
      public static let dataLoss = GStatusCodeValues(15) 
      
      /// UNAUTHENTICATED
      public static let unauthenticated = GStatusCodeValues(16) 

      internal let value: Int 

      public init(_ customValue: Int) {
        self.value = customValue
      }

      public var description: String { 
        return "\(value)" 
      }
    }

    /** 
      Whether this is a received or sent message.
    */
    public struct MessageTypeValues: CustomStringConvertible {
      public static let sent = MessageTypeValues("SENT") 
      public static let received = MessageTypeValues("RECEIVED") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      A string identifying the remoting system. See below for a list of well-known identifiers.
    */
    public struct SystemValues: CustomStringConvertible {
      
      /// gRPC
      public static let grpc = SystemValues("grpc") 
      
      /// Java RMI
      public static let javaRmi = SystemValues("java_rmi") 
      
      /// .NET WCF
      public static let dotnetWcf = SystemValues("dotnet_wcf") 
      
      /// Apache Dubbo
      public static let apacheDubbo = SystemValues("apache_dubbo") 
      
      /// Connect RPC
      public static let connectRpc = SystemValues("connect_rpc") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}