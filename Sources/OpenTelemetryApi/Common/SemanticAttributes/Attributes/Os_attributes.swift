/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Os: String {
    /**
     Unique identifier for a particular build or compilation of the operating system.
      // Examples
      attributes[.osBuildId] = "TQ3C.230805.001.B2"
      attributes[.osBuildId] = "20E247"
      attributes[.osBuildId] = "22621"
     - Requires: Value type should be `String`
    */
    case osBuildId = "os.build_id"

    /**
     Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.
      // Examples
      attributes[.osDescription] = "Microsoft Windows [Version 10.0.18363.778]"
      attributes[.osDescription] = "Ubuntu 18.04.1 LTS"
     - Requires: Value type should be `String`
    */
    case osDescription = "os.description"

    /**
     Human readable operating system name.
      // Examples
      attributes[.osName] = "iOS"
      attributes[.osName] = "Android"
      attributes[.osName] = "Ubuntu"
     - Requires: Value type should be `String`
    */
    case osName = "os.name"

    /**
     The operating system type.
     - Requires: Value should be one of [`/output/Attributes/Os_attributes.swift.OsTypeValues`](x-source-tag://otelOsTypeValues) (of type `String`)
    */
    case osType = "os.type"

    /**
     The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
      // Examples
      attributes[.osVersion] = "14.2.1"
      attributes[.osVersion] = "18.04.1"
     - Requires: Value type should be `String`
    */
    case osVersion = "os.version"


    /** 
      The operating system type.
    */
    /// - Tag: otelOsTypeValues
    public struct OsTypeValues: CustomStringConvertible {
      /**
      Microsoft Windows
      */
      public static let windows = OsTypeValues("windows") 
      /**
      Linux
      */
      public static let linux = OsTypeValues("linux") 
      /**
      Apple Darwin
      */
      public static let darwin = OsTypeValues("darwin") 
      /**
      FreeBSD
      */
      public static let freebsd = OsTypeValues("freebsd") 
      /**
      NetBSD
      */
      public static let netbsd = OsTypeValues("netbsd") 
      /**
      OpenBSD
      */
      public static let openbsd = OsTypeValues("openbsd") 
      /**
      DragonFly BSD
      */
      public static let dragonflybsd = OsTypeValues("dragonflybsd") 
      /**
      HP-UX (Hewlett Packard Unix)
      */
      public static let hpux = OsTypeValues("hpux") 
      /**
      AIX (Advanced Interactive eXecutive)
      */
      public static let aix = OsTypeValues("aix") 
      /**
      SunOS, Oracle Solaris
      */
      public static let solaris = OsTypeValues("solaris") 
      /**
      IBM z/OS
      */
      public static let zos = OsTypeValues("zos") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}