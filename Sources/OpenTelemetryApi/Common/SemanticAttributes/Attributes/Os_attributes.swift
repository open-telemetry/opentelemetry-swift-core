/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Os: String {

    /**
     Unique identifier for a particular build or compilation of the operating system.

      - Examples:
      ```
      attributes[SemanticConventions.Os.buildId.rawValue] = "TQ3C.230805.001.B2"
      attributes[SemanticConventions.Os.buildId.rawValue] = "20E247"
      attributes[SemanticConventions.Os.buildId.rawValue] = "22621"
      ```

     - Requires: Value type should be `String`
    */
    case buildId = "os.build_id"

    /**
     Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.

      - Examples:
      ```
      attributes[SemanticConventions.Os.description.rawValue] = "Microsoft Windows [Version 10.0.18363.778]"
      attributes[SemanticConventions.Os.description.rawValue] = "Ubuntu 18.04.1 LTS"
      ```

     - Requires: Value type should be `String`
    */
    case description = "os.description"

    /**
     Human readable operating system name.

      - Examples:
      ```
      attributes[SemanticConventions.Os.name.rawValue] = "iOS"
      attributes[SemanticConventions.Os.name.rawValue] = "Android"
      attributes[SemanticConventions.Os.name.rawValue] = "Ubuntu"
      ```

     - Requires: Value type should be `String`
    */
    case name = "os.name"

    /**
     The operating system type.

     - Requires: Value should be one of ``TypeValues`` (of type `String`)
    */
    case type = "os.type"

    /**
     The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).

      - Examples:
      ```
      attributes[SemanticConventions.Os.version.rawValue] = "14.2.1"
      attributes[SemanticConventions.Os.version.rawValue] = "18.04.1"
      ```

     - Requires: Value type should be `String`
    */
    case version = "os.version"

    /** 
      The operating system type.
    */
    public struct TypeValues: CustomStringConvertible {
      
      /// Microsoft Windows
      public static let windows = TypeValues("windows") 
      
      /// Linux
      public static let linux = TypeValues("linux") 
      
      /// Apple Darwin
      public static let darwin = TypeValues("darwin") 
      
      /// FreeBSD
      public static let freebsd = TypeValues("freebsd") 
      
      /// NetBSD
      public static let netbsd = TypeValues("netbsd") 
      
      /// OpenBSD
      public static let openbsd = TypeValues("openbsd") 
      
      /// DragonFly BSD
      public static let dragonflybsd = TypeValues("dragonflybsd") 
      
      /// HP-UX (Hewlett Packard Unix)
      public static let hpux = TypeValues("hpux") 
      
      /// AIX (Advanced Interactive eXecutive)
      public static let aix = TypeValues("aix") 
      
      /// SunOS, Oracle Solaris
      public static let solaris = TypeValues("solaris") 
      
      /// IBM z/OS
      public static let zos = TypeValues("zos") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}