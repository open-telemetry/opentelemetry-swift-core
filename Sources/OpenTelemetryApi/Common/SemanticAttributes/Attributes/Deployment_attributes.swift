/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Deployment: String {
    /**
     Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).
      // Examples
      attributes[.deploymentEnvironmentName] = "staging"
      attributes[.deploymentEnvironmentName] = "production"
     - Note: `deployment.environment.name` does not affect the uniqueness constraints defined through
     the `service.namespace`, `service.name` and `service.instance.id` resource attributes.
     This implies that resources carrying the following attribute combinations MUST be
     considered to be identifying the same service:

     - `service.name=frontend`, `deployment.environment.name=production`
     - `service.name=frontend`, `deployment.environment.name=staging`.
     - Requires: Value type should be `String`
    */
    case deploymentEnvironmentName = "deployment.environment.name"

    /**
     The id of the deployment.
      // Examples
      attributes[.deploymentId] = "1208"
     - Requires: Value type should be `String`
    */
    case deploymentId = "deployment.id"

    /**
     The name of the deployment.
      // Examples
      attributes[.deploymentName] = "deploy my app"
      attributes[.deploymentName] = "deploy-frontend"
     - Requires: Value type should be `String`
    */
    case deploymentName = "deployment.name"

    /**
     The status of the deployment.
     - Requires: Value should be one of [`/output/Attributes/Deployment_attributes.swift.DeploymentStatusValues`](x-source-tag://otelDeploymentStatusValues) (of type `String`)
    */
    case deploymentStatus = "deployment.status"


    /** 
      The status of the deployment.
    */
    /// - Tag: otelDeploymentStatusValues
    public struct DeploymentStatusValues: CustomStringConvertible {
      /**
      failed
      */
      public static let failed = DeploymentStatusValues("failed") 
      /**
      succeeded
      */
      public static let succeeded = DeploymentStatusValues("succeeded") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}