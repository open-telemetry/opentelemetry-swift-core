/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Deployment: String {

    /**
     Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).

      - Examples:
      ```
      attributes[SemanticConventions.Deployment.environmentName.rawValue] = "staging"
      attributes[SemanticConventions.Deployment.environmentName.rawValue] = "production"
      ```

     - Note: `deployment.environment.name` does not affect the uniqueness constraints defined through
       the `service.namespace`, `service.name` and `service.instance.id` resource attributes.
       This implies that resources carrying the following attribute combinations MUST be
       considered to be identifying the same service:

       - `service.name=frontend`, `deployment.environment.name=production`
       - `service.name=frontend`, `deployment.environment.name=staging`.

     - Requires: Value type should be `String`
    */
    case environmentName = "deployment.environment.name"

    /**
     The id of the deployment.

      - Examples:
      ```
      attributes[SemanticConventions.Deployment.id.rawValue] = "1208"
      ```

     - Requires: Value type should be `String`
    */
    case id = "deployment.id"

    /**
     The name of the deployment.

      - Examples:
      ```
      attributes[SemanticConventions.Deployment.name.rawValue] = "deploy my app"
      attributes[SemanticConventions.Deployment.name.rawValue] = "deploy-frontend"
      ```

     - Requires: Value type should be `String`
    */
    case name = "deployment.name"

    /**
     The status of the deployment.

     - Requires: Value should be one of ``StatusValues`` (of type `String`)
    */
    case status = "deployment.status"

    /** 
      The status of the deployment.
    */
    public struct StatusValues: CustomStringConvertible {
      
      /// failed
      public static let failed = StatusValues("failed") 
      
      /// succeeded
      public static let succeeded = StatusValues("succeeded") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}