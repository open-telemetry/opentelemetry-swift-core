/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Cicd: String {
    /**
     The kind of action a pipeline run is performing.
      // Examples
      attributes[.cicdPipelineActionName] = BUILD
      attributes[.cicdPipelineActionName] = RUN
      attributes[.cicdPipelineActionName] = SYNC
     - Requires: Value should be one of [`/output/Attributes/Cicd_attributes.swift.PipelineActionNameValues`](x-source-tag://otelPipelineActionNameValues) (of type `String`)
    */
    case pipelineActionName = "cicd.pipeline.action.name"

    /**
     The human readable name of the pipeline within a CI/CD system.
      // Examples
      attributes[.cicdPipelineName] = "Build and Test"
      attributes[.cicdPipelineName] = "Lint"
      attributes[.cicdPipelineName] = "Deploy Go Project"
      attributes[.cicdPipelineName] = "deploy_to_environment"
     - Requires: Value type should be `String`
    */
    case pipelineName = "cicd.pipeline.name"

    /**
     The result of a pipeline run.
      // Examples
      attributes[.cicdPipelineResult] = success
      attributes[.cicdPipelineResult] = failure
      attributes[.cicdPipelineResult] = timeout
      attributes[.cicdPipelineResult] = skipped
     - Requires: Value should be one of [`/output/Attributes/Cicd_attributes.swift.PipelineResultValues`](x-source-tag://otelPipelineResultValues) (of type `String`)
    */
    case pipelineResult = "cicd.pipeline.result"

    /**
     The unique identifier of a pipeline run within a CI/CD system.
      // Examples
      attributes[.cicdPipelineRunId] = "120912"
     - Requires: Value type should be `String`
    */
    case pipelineRunId = "cicd.pipeline.run.id"

    /**
     The pipeline run goes through these states during its lifecycle.
      // Examples
      attributes[.cicdPipelineRunState] = pending
      attributes[.cicdPipelineRunState] = executing
      attributes[.cicdPipelineRunState] = finalizing
     - Requires: Value should be one of [`/output/Attributes/Cicd_attributes.swift.PipelineRunStateValues`](x-source-tag://otelPipelineRunStateValues) (of type `String`)
    */
    case pipelineRunState = "cicd.pipeline.run.state"

    /**
     The [URL](https://wikipedia.org/wiki/URL) of the pipeline run, providing the complete address in order to locate and identify the pipeline run.
      // Examples
      attributes[.cicdPipelineRunUrlFull] = "https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763?pr=1075"
     - Requires: Value type should be `String`
    */
    case pipelineRunUrlFull = "cicd.pipeline.run.url.full"

    /**
     The human readable name of a task within a pipeline. Task here most closely aligns with a [computing process](https://wikipedia.org/wiki/Pipeline_(computing)) in a pipeline. Other terms for tasks include commands, steps, and procedures.
      // Examples
      attributes[.cicdPipelineTaskName] = "Run GoLang Linter"
      attributes[.cicdPipelineTaskName] = "Go Build"
      attributes[.cicdPipelineTaskName] = "go-test"
      attributes[.cicdPipelineTaskName] = "deploy_binary"
     - Requires: Value type should be `String`
    */
    case pipelineTaskName = "cicd.pipeline.task.name"

    /**
     The unique identifier of a task run within a pipeline.
      // Examples
      attributes[.cicdPipelineTaskRunId] = "12097"
     - Requires: Value type should be `String`
    */
    case pipelineTaskRunId = "cicd.pipeline.task.run.id"

    /**
     The result of a task run.
      // Examples
      attributes[.cicdPipelineTaskRunResult] = success
      attributes[.cicdPipelineTaskRunResult] = failure
      attributes[.cicdPipelineTaskRunResult] = timeout
      attributes[.cicdPipelineTaskRunResult] = skipped
     - Requires: Value should be one of [`/output/Attributes/Cicd_attributes.swift.PipelineTaskRunResultValues`](x-source-tag://otelPipelineTaskRunResultValues) (of type `String`)
    */
    case pipelineTaskRunResult = "cicd.pipeline.task.run.result"

    /**
     The [URL](https://wikipedia.org/wiki/URL) of the pipeline task run, providing the complete address in order to locate and identify the pipeline task run.
      // Examples
      attributes[.cicdPipelineTaskRunUrlFull] = "https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763/job/26920038674?pr=1075"
     - Requires: Value type should be `String`
    */
    case pipelineTaskRunUrlFull = "cicd.pipeline.task.run.url.full"

    /**
     The type of the task within a pipeline.
      // Examples
      attributes[.cicdPipelineTaskType] = build
      attributes[.cicdPipelineTaskType] = test
      attributes[.cicdPipelineTaskType] = deploy
     - Requires: Value should be one of [`/output/Attributes/Cicd_attributes.swift.PipelineTaskTypeValues`](x-source-tag://otelPipelineTaskTypeValues) (of type `String`)
    */
    case pipelineTaskType = "cicd.pipeline.task.type"

    /**
     The name of a component of the CICD system.
      // Examples
      attributes[.cicdSystemComponent] = "controller"
      attributes[.cicdSystemComponent] = "scheduler"
      attributes[.cicdSystemComponent] = "agent"
     - Requires: Value type should be `String`
    */
    case systemComponent = "cicd.system.component"

    /**
     The unique identifier of a worker within a CICD system.
      // Examples
      attributes[.cicdWorkerId] = "abc123"
      attributes[.cicdWorkerId] = "10.0.1.2"
      attributes[.cicdWorkerId] = "controller"
     - Requires: Value type should be `String`
    */
    case workerId = "cicd.worker.id"

    /**
     The name of a worker within a CICD system.
      // Examples
      attributes[.cicdWorkerName] = "agent-abc"
      attributes[.cicdWorkerName] = "controller"
      attributes[.cicdWorkerName] = "Ubuntu LTS"
     - Requires: Value type should be `String`
    */
    case workerName = "cicd.worker.name"

    /**
     The state of a CICD worker / agent.
      // Examples
      attributes[.cicdWorkerState] = idle
      attributes[.cicdWorkerState] = busy
      attributes[.cicdWorkerState] = down
     - Requires: Value should be one of [`/output/Attributes/Cicd_attributes.swift.WorkerStateValues`](x-source-tag://otelWorkerStateValues) (of type `String`)
    */
    case workerState = "cicd.worker.state"

    /**
     The [URL](https://wikipedia.org/wiki/URL) of the worker, providing the complete address in order to locate and identify the worker.
      // Examples
      attributes[.cicdWorkerUrlFull] = "https://cicd.example.org/worker/abc123"
     - Requires: Value type should be `String`
    */
    case workerUrlFull = "cicd.worker.url.full"


    /** 
      The kind of action a pipeline run is performing.
    */
    /// - Tag: otelPipelineActionNameValues
    public struct PipelineActionNameValues: CustomStringConvertible {
      /**
      The pipeline run is executing a build.
      */
      public static let build = PipelineActionNameValues("BUILD") 
      /**
      The pipeline run is executing.
      */
      public static let run = PipelineActionNameValues("RUN") 
      /**
      The pipeline run is executing a sync.
      */
      public static let sync = PipelineActionNameValues("SYNC") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of a pipeline run.
    */
    /// - Tag: otelPipelineResultValues
    public struct PipelineResultValues: CustomStringConvertible {
      /**
      The pipeline run finished successfully.
      */
      public static let success = PipelineResultValues("success") 
      /**
      The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.
      */
      public static let failure = PipelineResultValues("failure") 
      /**
      The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.
      */
      public static let error = PipelineResultValues("error") 
      /**
      A timeout caused the pipeline run to be interrupted.
      */
      public static let timeout = PipelineResultValues("timeout") 
      /**
      The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.
      */
      public static let cancellation = PipelineResultValues("cancellation") 
      /**
      The pipeline run was skipped, eg. due to a precondition not being met.
      */
      public static let skip = PipelineResultValues("skip") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The pipeline run goes through these states during its lifecycle.
    */
    /// - Tag: otelPipelineRunStateValues
    public struct PipelineRunStateValues: CustomStringConvertible {
      /**
      The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).
      */
      public static let pending = PipelineRunStateValues("pending") 
      /**
      The executing state spans the execution of any run tasks (eg. build, test).
      */
      public static let executing = PipelineRunStateValues("executing") 
      /**
      The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).
      */
      public static let finalizing = PipelineRunStateValues("finalizing") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of a task run.
    */
    /// - Tag: otelPipelineTaskRunResultValues
    public struct PipelineTaskRunResultValues: CustomStringConvertible {
      /**
      The task run finished successfully.
      */
      public static let success = PipelineTaskRunResultValues("success") 
      /**
      The task run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the task run.
      */
      public static let failure = PipelineTaskRunResultValues("failure") 
      /**
      The task run failed due to an error in the CICD system, eg. due to the worker being killed.
      */
      public static let error = PipelineTaskRunResultValues("error") 
      /**
      A timeout caused the task run to be interrupted.
      */
      public static let timeout = PipelineTaskRunResultValues("timeout") 
      /**
      The task run was cancelled, eg. by a user manually cancelling the task run.
      */
      public static let cancellation = PipelineTaskRunResultValues("cancellation") 
      /**
      The task run was skipped, eg. due to a precondition not being met.
      */
      public static let skip = PipelineTaskRunResultValues("skip") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of the task within a pipeline.
    */
    /// - Tag: otelPipelineTaskTypeValues
    public struct PipelineTaskTypeValues: CustomStringConvertible {
      /**
      build
      */
      public static let build = PipelineTaskTypeValues("build") 
      /**
      test
      */
      public static let test = PipelineTaskTypeValues("test") 
      /**
      deploy
      */
      public static let deploy = PipelineTaskTypeValues("deploy") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The state of a CICD worker / agent.
    */
    /// - Tag: otelWorkerStateValues
    public struct WorkerStateValues: CustomStringConvertible {
      /**
      The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).
      */
      public static let available = WorkerStateValues("available") 
      /**
      The worker is performing work for the CICD system.
      */
      public static let busy = WorkerStateValues("busy") 
      /**
      The worker is not available to the CICD system (disconnected / down).
      */
      public static let offline = WorkerStateValues("offline") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}