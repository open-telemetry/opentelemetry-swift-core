/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum Cicd: String {

    /**
     The kind of action a pipeline run is performing.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineActionName.rawValue] = .BUILD
      attributes[SemanticConventions.Cicd.pipelineActionName.rawValue] = .RUN
      attributes[SemanticConventions.Cicd.pipelineActionName.rawValue] = .SYNC
      ```

     - Requires: Value should be one of ``PipelineActionNameValues`` (of type `String`)
    */
    case pipelineActionName = "cicd.pipeline.action.name"

    /**
     The human readable name of the pipeline within a CI/CD system.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineName.rawValue] = "Build and Test"
      attributes[SemanticConventions.Cicd.pipelineName.rawValue] = "Lint"
      attributes[SemanticConventions.Cicd.pipelineName.rawValue] = "Deploy Go Project"
      attributes[SemanticConventions.Cicd.pipelineName.rawValue] = "deploy_to_environment"
      ```

     - Requires: Value type should be `String`
    */
    case pipelineName = "cicd.pipeline.name"

    /**
     The result of a pipeline run.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineResult.rawValue] = .success
      attributes[SemanticConventions.Cicd.pipelineResult.rawValue] = .failure
      attributes[SemanticConventions.Cicd.pipelineResult.rawValue] = .timeout
      attributes[SemanticConventions.Cicd.pipelineResult.rawValue] = .skipped
      ```

     - Requires: Value should be one of ``PipelineResultValues`` (of type `String`)
    */
    case pipelineResult = "cicd.pipeline.result"

    /**
     The unique identifier of a pipeline run within a CI/CD system.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineRunId.rawValue] = "120912"
      ```

     - Requires: Value type should be `String`
    */
    case pipelineRunId = "cicd.pipeline.run.id"

    /**
     The pipeline run goes through these states during its lifecycle.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineRunState.rawValue] = .pending
      attributes[SemanticConventions.Cicd.pipelineRunState.rawValue] = .executing
      attributes[SemanticConventions.Cicd.pipelineRunState.rawValue] = .finalizing
      ```

     - Requires: Value should be one of ``PipelineRunStateValues`` (of type `String`)
    */
    case pipelineRunState = "cicd.pipeline.run.state"

    /**
     The [URL](https://wikipedia.org/wiki/URL) of the pipeline run, providing the complete address in order to locate and identify the pipeline run.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineRunUrlFull.rawValue] = "https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763?pr=1075"
      ```

     - Requires: Value type should be `String`
    */
    case pipelineRunUrlFull = "cicd.pipeline.run.url.full"

    /**
     The human readable name of a task within a pipeline. Task here most closely aligns with a [computing process](https://wikipedia.org/wiki/Pipeline_(computing)) in a pipeline. Other terms for tasks include commands, steps, and procedures.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineTaskName.rawValue] = "Run GoLang Linter"
      attributes[SemanticConventions.Cicd.pipelineTaskName.rawValue] = "Go Build"
      attributes[SemanticConventions.Cicd.pipelineTaskName.rawValue] = "go-test"
      attributes[SemanticConventions.Cicd.pipelineTaskName.rawValue] = "deploy_binary"
      ```

     - Requires: Value type should be `String`
    */
    case pipelineTaskName = "cicd.pipeline.task.name"

    /**
     The unique identifier of a task run within a pipeline.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineTaskRunId.rawValue] = "12097"
      ```

     - Requires: Value type should be `String`
    */
    case pipelineTaskRunId = "cicd.pipeline.task.run.id"

    /**
     The result of a task run.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineTaskRunResult.rawValue] = .success
      attributes[SemanticConventions.Cicd.pipelineTaskRunResult.rawValue] = .failure
      attributes[SemanticConventions.Cicd.pipelineTaskRunResult.rawValue] = .timeout
      attributes[SemanticConventions.Cicd.pipelineTaskRunResult.rawValue] = .skipped
      ```

     - Requires: Value should be one of ``PipelineTaskRunResultValues`` (of type `String`)
    */
    case pipelineTaskRunResult = "cicd.pipeline.task.run.result"

    /**
     The [URL](https://wikipedia.org/wiki/URL) of the pipeline task run, providing the complete address in order to locate and identify the pipeline task run.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineTaskRunUrlFull.rawValue] = "https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763/job/26920038674?pr=1075"
      ```

     - Requires: Value type should be `String`
    */
    case pipelineTaskRunUrlFull = "cicd.pipeline.task.run.url.full"

    /**
     The type of the task within a pipeline.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.pipelineTaskType.rawValue] = .build
      attributes[SemanticConventions.Cicd.pipelineTaskType.rawValue] = .test
      attributes[SemanticConventions.Cicd.pipelineTaskType.rawValue] = .deploy
      ```

     - Requires: Value should be one of ``PipelineTaskTypeValues`` (of type `String`)
    */
    case pipelineTaskType = "cicd.pipeline.task.type"

    /**
     The name of a component of the CICD system.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.systemComponent.rawValue] = "controller"
      attributes[SemanticConventions.Cicd.systemComponent.rawValue] = "scheduler"
      attributes[SemanticConventions.Cicd.systemComponent.rawValue] = "agent"
      ```

     - Requires: Value type should be `String`
    */
    case systemComponent = "cicd.system.component"

    /**
     The unique identifier of a worker within a CICD system.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.workerId.rawValue] = "abc123"
      attributes[SemanticConventions.Cicd.workerId.rawValue] = "10.0.1.2"
      attributes[SemanticConventions.Cicd.workerId.rawValue] = "controller"
      ```

     - Requires: Value type should be `String`
    */
    case workerId = "cicd.worker.id"

    /**
     The name of a worker within a CICD system.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.workerName.rawValue] = "agent-abc"
      attributes[SemanticConventions.Cicd.workerName.rawValue] = "controller"
      attributes[SemanticConventions.Cicd.workerName.rawValue] = "Ubuntu LTS"
      ```

     - Requires: Value type should be `String`
    */
    case workerName = "cicd.worker.name"

    /**
     The state of a CICD worker / agent.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.workerState.rawValue] = .idle
      attributes[SemanticConventions.Cicd.workerState.rawValue] = .busy
      attributes[SemanticConventions.Cicd.workerState.rawValue] = .down
      ```

     - Requires: Value should be one of ``WorkerStateValues`` (of type `String`)
    */
    case workerState = "cicd.worker.state"

    /**
     The [URL](https://wikipedia.org/wiki/URL) of the worker, providing the complete address in order to locate and identify the worker.

      - Examples:
      ```
      attributes[SemanticConventions.Cicd.workerUrlFull.rawValue] = "https://cicd.example.org/worker/abc123"
      ```

     - Requires: Value type should be `String`
    */
    case workerUrlFull = "cicd.worker.url.full"

    /** 
      The kind of action a pipeline run is performing.
    */
    public struct PipelineActionNameValues: CustomStringConvertible {
      
      /// The pipeline run is executing a build.
      public static let build = PipelineActionNameValues("BUILD") 
      
      /// The pipeline run is executing.
      public static let run = PipelineActionNameValues("RUN") 
      
      /// The pipeline run is executing a sync.
      public static let sync = PipelineActionNameValues("SYNC") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of a pipeline run.
    */
    public struct PipelineResultValues: CustomStringConvertible {
      
      /// The pipeline run finished successfully.
      public static let success = PipelineResultValues("success") 
      
      /// The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.
      public static let failure = PipelineResultValues("failure") 
      
      /// The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.
      public static let error = PipelineResultValues("error") 
      
      /// A timeout caused the pipeline run to be interrupted.
      public static let timeout = PipelineResultValues("timeout") 
      
      /// The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.
      public static let cancellation = PipelineResultValues("cancellation") 
      
      /// The pipeline run was skipped, eg. due to a precondition not being met.
      public static let skip = PipelineResultValues("skip") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The pipeline run goes through these states during its lifecycle.
    */
    public struct PipelineRunStateValues: CustomStringConvertible {
      
      /// The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).
      public static let pending = PipelineRunStateValues("pending") 
      
      /// The executing state spans the execution of any run tasks (eg. build, test).
      public static let executing = PipelineRunStateValues("executing") 
      
      /// The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).
      public static let finalizing = PipelineRunStateValues("finalizing") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The result of a task run.
    */
    public struct PipelineTaskRunResultValues: CustomStringConvertible {
      
      /// The task run finished successfully.
      public static let success = PipelineTaskRunResultValues("success") 
      
      /// The task run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the task run.
      public static let failure = PipelineTaskRunResultValues("failure") 
      
      /// The task run failed due to an error in the CICD system, eg. due to the worker being killed.
      public static let error = PipelineTaskRunResultValues("error") 
      
      /// A timeout caused the task run to be interrupted.
      public static let timeout = PipelineTaskRunResultValues("timeout") 
      
      /// The task run was cancelled, eg. by a user manually cancelling the task run.
      public static let cancellation = PipelineTaskRunResultValues("cancellation") 
      
      /// The task run was skipped, eg. due to a precondition not being met.
      public static let skip = PipelineTaskRunResultValues("skip") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The type of the task within a pipeline.
    */
    public struct PipelineTaskTypeValues: CustomStringConvertible {
      
      /// build
      public static let build = PipelineTaskTypeValues("build") 
      
      /// test
      public static let test = PipelineTaskTypeValues("test") 
      
      /// deploy
      public static let deploy = PipelineTaskTypeValues("deploy") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The state of a CICD worker / agent.
    */
    public struct WorkerStateValues: CustomStringConvertible {
      
      /// The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).
      public static let available = WorkerStateValues("available") 
      
      /// The worker is performing work for the CICD system.
      public static let busy = WorkerStateValues("busy") 
      
      /// The worker is not available to the CICD system (disconnected / down).
      public static let offline = WorkerStateValues("offline") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}