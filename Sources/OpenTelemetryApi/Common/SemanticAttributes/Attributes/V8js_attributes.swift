/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum V8js: String {

    /**
     The type of garbage collection.

     - Requires: Value should be one of ``GcTypeValues`` (of type `String`)
    */
    case gcType = "v8js.gc.type"

    /**
     The name of the space type of heap memory.

     - Note: Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)

     - Requires: Value should be one of ``HeapSpaceNameValues`` (of type `String`)
    */
    case heapSpaceName = "v8js.heap.space.name"

    /** 
      The type of garbage collection.
    */
    public struct GcTypeValues: CustomStringConvertible {
      
      /// Major (Mark Sweep Compact).
      public static let major = GcTypeValues("major") 
      
      /// Minor (Scavenge).
      public static let minor = GcTypeValues("minor") 
      
      /// Incremental (Incremental Marking).
      public static let incremental = GcTypeValues("incremental") 
      
      /// Weak Callbacks (Process Weak Callbacks).
      public static let weakcb = GcTypeValues("weakcb") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The name of the space type of heap memory.
    */
    public struct HeapSpaceNameValues: CustomStringConvertible {
      
      /// New memory space.
      public static let newSpace = HeapSpaceNameValues("new_space") 
      
      /// Old memory space.
      public static let oldSpace = HeapSpaceNameValues("old_space") 
      
      /// Code memory space.
      public static let codeSpace = HeapSpaceNameValues("code_space") 
      
      /// Map memory space.
      public static let mapSpace = HeapSpaceNameValues("map_space") 
      
      /// Large object memory space.
      public static let largeObjectSpace = HeapSpaceNameValues("large_object_space") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}