/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  enum Hw: String {
    /**
     Design capacity in Watts-hours or Amper-hours
      // Examples
      attributes[.hwBatteryCapacity] = "9.3Ah"
      attributes[.hwBatteryCapacity] = "50Wh"
     - Requires: Value type should be `String`
    */
    case batteryCapacity = "hw.battery.capacity"

    /**
     Battery [chemistry](https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html), e.g. Lithium-Ion, Nickel-Cadmium, etc.
      // Examples
      attributes[.hwBatteryChemistry] = "Li-ion"
      attributes[.hwBatteryChemistry] = "NiMH"
     - Requires: Value type should be `String`
    */
    case batteryChemistry = "hw.battery.chemistry"

    /**
     The current state of the battery
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.BatteryStateValues`](x-source-tag://otelBatteryStateValues) (of type `String`)
    */
    case batteryState = "hw.battery.state"

    /**
     BIOS version of the hardware component
      // Examples
      attributes[.hwBiosVersion] = "1.2.3"
     - Requires: Value type should be `String`
    */
    case biosVersion = "hw.bios_version"

    /**
     Driver version for the hardware component
      // Examples
      attributes[.hwDriverVersion] = "10.2.1-3"
     - Requires: Value type should be `String`
    */
    case driverVersion = "hw.driver_version"

    /**
     Type of the enclosure (useful for modular systems)
      // Examples
      attributes[.hwEnclosureType] = "Computer"
      attributes[.hwEnclosureType] = "Storage"
      attributes[.hwEnclosureType] = "Switch"
     - Requires: Value type should be `String`
    */
    case enclosureType = "hw.enclosure.type"

    /**
     Firmware version of the hardware component
      // Examples
      attributes[.hwFirmwareVersion] = "2.0.1"
     - Requires: Value type should be `String`
    */
    case firmwareVersion = "hw.firmware_version"

    /**
     Type of task the GPU is performing
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.GpuTaskValues`](x-source-tag://otelGpuTaskValues) (of type `String`)
    */
    case gpuTask = "hw.gpu.task"

    /**
     An identifier for the hardware component, unique within the monitored host
      // Examples
      attributes[.hwId] = "win32battery_battery_testsysa33_1"
     - Requires: Value type should be `String`
    */
    case id = "hw.id"

    /**
     Type of limit for hardware components
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.LimitTypeValues`](x-source-tag://otelLimitTypeValues) (of type `String`)
    */
    case limitType = "hw.limit_type"

    /**
     RAID Level of the logical disk
      // Examples
      attributes[.hwLogicalDiskRaidLevel] = "RAID0+1"
      attributes[.hwLogicalDiskRaidLevel] = "RAID5"
      attributes[.hwLogicalDiskRaidLevel] = "RAID10"
     - Requires: Value type should be `String`
    */
    case logicalDiskRaidLevel = "hw.logical_disk.raid_level"

    /**
     State of the logical disk space usage
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.LogicalDiskStateValues`](x-source-tag://otelLogicalDiskStateValues) (of type `String`)
    */
    case logicalDiskState = "hw.logical_disk.state"

    /**
     Type of the memory module
      // Examples
      attributes[.hwMemoryType] = "DDR4"
      attributes[.hwMemoryType] = "DDR5"
      attributes[.hwMemoryType] = "LPDDR5"
     - Requires: Value type should be `String`
    */
    case memoryType = "hw.memory.type"

    /**
     Descriptive model name of the hardware component
      // Examples
      attributes[.hwModel] = "PERC H740P"
      attributes[.hwModel] = "Intel(R) Core(TM) i7-10700K"
      attributes[.hwModel] = "Dell XPS 15 Battery"
     - Requires: Value type should be `String`
    */
    case model = "hw.model"

    /**
     An easily-recognizable name for the hardware component
      // Examples
      attributes[.hwName] = "eth0"
     - Requires: Value type should be `String`
    */
    case name = "hw.name"

    /**
     Logical addresses of the adapter (e.g. IP address, or WWPN)
      // Examples
      attributes[.hwNetworkLogicalAddresses] = ["172.16.8.21", "57.11.193.42"]
     - Requires: Value type should be `[String]`
    */
    case networkLogicalAddresses = "hw.network.logical_addresses"

    /**
     Physical address of the adapter (e.g. MAC address, or WWNN)
      // Examples
      attributes[.hwNetworkPhysicalAddress] = "00-90-F5-E9-7B-36"
     - Requires: Value type should be `String`
    */
    case networkPhysicalAddress = "hw.network.physical_address"

    /**
     Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
      // Examples
      attributes[.hwParent] = "dellStorage_perc_0"
     - Requires: Value type should be `String`
    */
    case parent = "hw.parent"

    /**
     [S.M.A.R.T.](https://wikipedia.org/wiki/S.M.A.R.T.) (Self-Monitoring, Analysis, and Reporting Technology) attribute of the physical disk
      // Examples
      attributes[.hwPhysicalDiskSmartAttribute] = "Spin Retry Count"
      attributes[.hwPhysicalDiskSmartAttribute] = "Seek Error Rate"
      attributes[.hwPhysicalDiskSmartAttribute] = "Raw Read Error Rate"
     - Requires: Value type should be `String`
    */
    case physicalDiskSmartAttribute = "hw.physical_disk.smart_attribute"

    /**
     State of the physical disk endurance utilization
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.PhysicalDiskStateValues`](x-source-tag://otelPhysicalDiskStateValues) (of type `String`)
    */
    case physicalDiskState = "hw.physical_disk.state"

    /**
     Type of the physical disk
      // Examples
      attributes[.hwPhysicalDiskType] = "HDD"
      attributes[.hwPhysicalDiskType] = "SSD"
      attributes[.hwPhysicalDiskType] = "10K"
     - Requires: Value type should be `String`
    */
    case physicalDiskType = "hw.physical_disk.type"

    /**
     Location of the sensor
      // Examples
      attributes[.hwSensorLocation] = "cpu0"
      attributes[.hwSensorLocation] = "ps1"
      attributes[.hwSensorLocation] = "INLET"
      attributes[.hwSensorLocation] = "CPU0_DIE"
      attributes[.hwSensorLocation] = "AMBIENT"
      attributes[.hwSensorLocation] = "MOTHERBOARD"
      attributes[.hwSensorLocation] = "PS0 V3_3"
      attributes[.hwSensorLocation] = "MAIN_12V"
      attributes[.hwSensorLocation] = "CPU_VCORE"
     - Requires: Value type should be `String`
    */
    case sensorLocation = "hw.sensor_location"

    /**
     Serial number of the hardware component
      // Examples
      attributes[.hwSerialNumber] = "CNFCP0123456789"
     - Requires: Value type should be `String`
    */
    case serialNumber = "hw.serial_number"

    /**
     The current state of the component
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.StateValues`](x-source-tag://otelStateValues) (of type `String`)
    */
    case state = "hw.state"

    /**
     Type of tape drive operation
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.TapeDriveOperationTypeValues`](x-source-tag://otelTapeDriveOperationTypeValues) (of type `String`)
    */
    case tapeDriveOperationType = "hw.tape_drive.operation_type"

    /**
     Type of the component
     - Note: Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
     - Requires: Value should be one of [`/output/Attributes/Hw_attributes.swift.TypeValues`](x-source-tag://otelTypeValues) (of type `String`)
    */
    case type = "hw.type"

    /**
     Vendor name of the hardware component
      // Examples
      attributes[.hwVendor] = "Dell"
      attributes[.hwVendor] = "HP"
      attributes[.hwVendor] = "Intel"
      attributes[.hwVendor] = "AMD"
      attributes[.hwVendor] = "LSI"
      attributes[.hwVendor] = "Lenovo"
     - Requires: Value type should be `String`
    */
    case vendor = "hw.vendor"


    /** 
      The current state of the battery
    */
    /// - Tag: otelBatteryStateValues
    public struct BatteryStateValues: CustomStringConvertible {
      /**
      Charging
      */
      public static let charging = BatteryStateValues("charging") 
      /**
      Discharging
      */
      public static let discharging = BatteryStateValues("discharging") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Type of task the GPU is performing
    */
    /// - Tag: otelGpuTaskValues
    public struct GpuTaskValues: CustomStringConvertible {
      /**
      Decoder
      */
      public static let decoder = GpuTaskValues("decoder") 
      /**
      Encoder
      */
      public static let encoder = GpuTaskValues("encoder") 
      /**
      General
      */
      public static let general = GpuTaskValues("general") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Type of limit for hardware components
    */
    /// - Tag: otelLimitTypeValues
    public struct LimitTypeValues: CustomStringConvertible {
      /**
      Critical
      */
      public static let critical = LimitTypeValues("critical") 
      /**
      Degraded
      */
      public static let degraded = LimitTypeValues("degraded") 
      /**
      High Critical
      */
      public static let highCritical = LimitTypeValues("high.critical") 
      /**
      High Degraded
      */
      public static let highDegraded = LimitTypeValues("high.degraded") 
      /**
      Low Critical
      */
      public static let lowCritical = LimitTypeValues("low.critical") 
      /**
      Low Degraded
      */
      public static let lowDegraded = LimitTypeValues("low.degraded") 
      /**
      Maximum
      */
      public static let max = LimitTypeValues("max") 
      /**
      Throttled
      */
      public static let throttled = LimitTypeValues("throttled") 
      /**
      Turbo
      */
      public static let turbo = LimitTypeValues("turbo") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      State of the logical disk space usage
    */
    /// - Tag: otelLogicalDiskStateValues
    public struct LogicalDiskStateValues: CustomStringConvertible {
      /**
      Used
      */
      public static let used = LogicalDiskStateValues("used") 
      /**
      Free
      */
      public static let free = LogicalDiskStateValues("free") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      State of the physical disk endurance utilization
    */
    /// - Tag: otelPhysicalDiskStateValues
    public struct PhysicalDiskStateValues: CustomStringConvertible {
      /**
      Remaining
      */
      public static let remaining = PhysicalDiskStateValues("remaining") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      The current state of the component
    */
    /// - Tag: otelStateValues
    public struct StateValues: CustomStringConvertible {
      /**
      Degraded
      */
      public static let degraded = StateValues("degraded") 
      /**
      Failed
      */
      public static let failed = StateValues("failed") 
      /**
      Needs Cleaning
      */
      public static let needsCleaning = StateValues("needs_cleaning") 
      /**
      OK
      */
      public static let ok = StateValues("ok") 
      /**
      Predicted Failure
      */
      public static let predictedFailure = StateValues("predicted_failure") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Type of tape drive operation
    */
    /// - Tag: otelTapeDriveOperationTypeValues
    public struct TapeDriveOperationTypeValues: CustomStringConvertible {
      /**
      Mount
      */
      public static let mount = TapeDriveOperationTypeValues("mount") 
      /**
      Unmount
      */
      public static let unmount = TapeDriveOperationTypeValues("unmount") 
      /**
      Clean
      */
      public static let clean = TapeDriveOperationTypeValues("clean") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }

    /** 
      Type of the component
    */
    /// - Tag: otelTypeValues
    public struct TypeValues: CustomStringConvertible {
      /**
      Battery
      */
      public static let battery = TypeValues("battery") 
      /**
      CPU
      */
      public static let cpu = TypeValues("cpu") 
      /**
      Disk controller
      */
      public static let diskController = TypeValues("disk_controller") 
      /**
      Enclosure
      */
      public static let enclosure = TypeValues("enclosure") 
      /**
      Fan
      */
      public static let fan = TypeValues("fan") 
      /**
      GPU
      */
      public static let gpu = TypeValues("gpu") 
      /**
      Logical disk
      */
      public static let logicalDisk = TypeValues("logical_disk") 
      /**
      Memory
      */
      public static let memory = TypeValues("memory") 
      /**
      Network
      */
      public static let network = TypeValues("network") 
      /**
      Physical disk
      */
      public static let physicalDisk = TypeValues("physical_disk") 
      /**
      Power supply
      */
      public static let powerSupply = TypeValues("power_supply") 
      /**
      Tape drive
      */
      public static let tapeDrive = TypeValues("tape_drive") 
      /**
      Temperature
      */
      public static let temperature = TypeValues("temperature") 
      /**
      Voltage
      */
      public static let voltage = TypeValues("voltage") 

      internal let value: String 

      public init(_ customValue: String) {
        self.value = customValue
      }

      public var description: String { 
        return value
      }
    }
  }
}