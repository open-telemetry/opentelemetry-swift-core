{%- macro reserved_words_filter(string) -%}
{%- if string in ["internal", "extension", "defer", "static", "default", "as", "in"] -%}
_{{string}}
{%- else -%}
{{string}}
{%- endif -%}
{%- endmacro -%}


{%- macro to_swift_return_type(type) -%}
{%   if type == "string" %}
String
{%-   elif type == "string[]" %}
[String]
{%-  elif type == "boolean" %}
Bool
{%-   elif type == "number" %}
Int
{%-   elif type == "int" %}
Int
{%-   elif type == "double" %}
Double
{%-   else %}
{{type}}
{%-   endif %}
{%- endmacro -%}

{%- macro print_value(type, value) -%}
{{ "\"" if type == "String"}}{{value}}{{ "\"" if type == "String"}}
{%- endmacro -%}

{%- set enum_name = ctx.root_namespace | pascal_case | replace('-', "") %}
{%- set filename = ctx.output + (ctx.root_namespace | pascal_case | replace('-', '')) ~ "_attributes.swift" -%}
{{ template.set_file_name(filename) }}

{%- macro print_example(attribute, example) -%}
{%- set attribute_name = "SemanticConventions." + ctx.root_namespace|pascal_case + "." + attribute.name | replace(ctx.root_namespace, "") | camel_case ~ ".rawValue" -%}
{%    if attribute.type|lower == "string" or attribute.type|lower == "template[string]" -%}
attributes[{{attribute_name}}] = "{{example | replace("\"", "\\\"")}}"
{%   elif attribute is enum %}
attributes[{{attribute_name}}] = .{{example}}
{%   else %}
attributes[{{attribute_name}}] = {{example}}
{%-   endif %}
{%- endmacro -%}

/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

extension SemanticConventions {
  public enum {{ enum_name }}: String {
{% set attributes = ctx.attributes %}
{% if ctx.root_namespace == "exception" %}

    // MARK: - Manual Definitions
    // Some definitions have not yet been added to the YAML which generates this script.
    // As such as we have some manually defined cases.
    /**
      An exception event **MUST** be called "exception" as per the [specification](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/exceptions/exceptions-spans.md#exception-event).
    */
    case exception = "exception"

{% endif %}
{% for attribute in attributes | unique(attribute="name") %}
{%    set class_name = attribute.name | replace(ctx.root_namespace, '') | pascal_case ~ "Values" %}

    /**
     {{attribute.brief | comment }}
{%    if attribute.examples %}

      - Examples:
      ```
{%      if attribute.examples is sequence %}
{%        for example in attribute.examples -%}  
{{ print_example(attribute, example) | indent(6, true) }}
{%        endfor %}
{%      else -%}  
{{ print_example(attribute, attribute.examples) | indent(6, true) }}
{%      endif %}
      ```
{%    endif %}
{%    if attribute.note %}

     - Note: {{attribute.note | comment(indent=7) }}
{%    endif %}
{%    if attribute.deprecated %}

     - Warning: Deprecated â€¢ {{attribute.deprecated | comment}}
{%    endif %}
{%    if attribute is enum %}

     - Requires: Value should be one of ``{{class_name}}`` (of type `{{to_swift_return_type(attribute.type | enum_type |lower)}}`)
{%    else %}

     - Requires: Value type should be `{{to_swift_return_type(attribute.type|lower)}}`
{%    endif %}
    */
{%    if attribute.deprecated %}
    @available(*, deprecated)
{%    endif %}
    case {{reserved_words_filter(attribute.name | replace(ctx.root_namespace, "") | camel_case)}} = "{{attribute.name}}"
{% endfor %}
{% for attribute in attributes | unique(attribute="name") %}
{%   set class_name = attribute.name | replace(ctx.root_namespace, "") | pascal_case ~ "Values" %}
{%   set type = to_swift_return_type(attribute.type) %}
{%   if attribute is enum %}

    /** 
      {{attribute.brief | comment}}
    */
{%     if attribute is enum %}
    public struct {{class_name}}: CustomStringConvertible {
{%       for member in attribute.type.members %}
{%         if member.brief is defined %}
      
      /// {{member.brief | comment}}
{%         endif %}
      public static let {{ reserved_words_filter(member.id | camel_case) }} = {{class_name}}({{ print_value(to_swift_return_type(attribute.type | enum_type), member.value) }}) 
{%      endfor %}

      internal let value: {{ to_swift_return_type(attribute.type | enum_type) }} 

      public init(_ customValue: {{to_swift_return_type(attribute.type | enum_type)}}) {
        self.value = customValue
      }

      public var description: String {
        {%- if attribute.type | enum_type == "string" %} 
        return value
        {% else %} 
        return "\(value)" 
        {% endif %}
      }
    }
{%    else %}
  public enum {{class_name}}: {{ type }} {
{%       for member in attribute.type.members -%}
{%         if member.brief is defined -%}
    /*
     {{member.brief | comment}}
    */
{%         endif %}
    case {{ member.member_id | replace(".", "_") | replace("internal", "`internal`") }} = {{ print_value(type, member.value) }}
{%       endfor %}
} 
{%     endif %}
{%   endif %}
{% endfor %}
{% if filename == "ResourceAttributes" %}

public func ==(left: ResourceAttributes, right: String) -> Bool {
  return left.rawValue == right
}

public func ==(left: String, right: ResourceAttributes) -> Bool {
  return left == right.rawValue
}
{% endif %}
  }
}
