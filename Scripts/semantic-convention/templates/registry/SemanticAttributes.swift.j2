{%- macro to_swift_return_type(type) -%}
{%   if type == "string" %}
String
{%-   elif type == "string[]" %}
[String]
{%-  elif type == "boolean" %}
Bool
{%-   elif type == "number" %}
Int
{%-   elif type == "int" %}
Int
{%-   elif type == "double" %}
Double
{%-   else %}
{{type}}
{%-   endif %}
{%- endmacro -%}

{%- macro print_value(type, value) -%}
{{ "\"" if type == "String"}}{{value}}{{ "\"" if type == "String"}}
{%- endmacro -%}

{%- set filename = params.enum -%}

{%- macro print_example(attribute, example) -%}
{%    if attribute.type|lower == "string" or attribute.type|lower == "template[string]" -%}
attributes[.{{attribute.name | camel_case}}] = "{{example | replace("\"", "\\\"")}}"
{%-    else -%}
attributes[.{{attribute.name | camel_case}}] = {{example}}
{%-   endif %}
{%- endmacro -%}

/*
 * Copyright The OpenTelemetry Authors 
 * SPDX-License-Identifier: Apache-2.0
 */

// DO **NOT** EDIT. This file is automatically generated.

import Foundation 

public enum {{ filename }}: String {

{% set attributes = ctx | list | map(attribute="attributes") | flatten %}
{% for attribute in attributes | unique(attribute="name") %}
{%    set class_name = attribute.name | pascal_case ~ "Values" %}
  /**
   {{attribute.brief | comment }}
{%    if attribute.examples %}
   ~~~
   // Examples
{%      if attribute.examples is sequence %}
{%        for example in attribute.examples -%}  
{{ print_example(attribute, example) | indent(3, true) }}
{%        endfor %}
{%      else %}  
{{ print_example(attribute, attribute.examples) | indent(3, true) }}
{%      endif %}
   ~~~
{%    endif %}
{%    if attribute.note %}
   - Note: {{attribute.note | comment(indent=5) }}
{%    endif %}
{%    if attribute.deprecated %}
   - Warning: Deprecated â€¢ {{attribute.deprecated | comment}}
{%    endif %}
{%    if attribute is enum %}
   - Requires: Value should be one of [`{{filename}}.{{class_name}}`](x-source-tag://otel{{class_name}}) (of type `{{to_swift_return_type(attribute.type | enum_type |lower)}}`)
{%    else %}
   - Requires: Value type should be `{{to_swift_return_type(attribute.type|lower)}}`
{%    endif %}
  */
{%    if attribute.deprecated %}
  @available(*, deprecated)
{%    endif %}
  case {{attribute.name | camel_case}} = "{{attribute.name}}"
{%    if not loop.last -%} 
{{ '\n' }}
{%-    endif %}
{% endfor %}

{% if filename == "SemanticAttributes" %}
// MARK: - Manual Definitions
// Some definitions have not yet been added to the YAML which generates this script.
// As such as we have some manually defined cases.

/**
An exception event **MUST** be called "exception" as per the [specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md).
*/
case exception = "exception";
{% endif %}
{% for attribute in attributes | unique(attribute="name") %}
{% set main_loop = loop %}
{%   set class_name = attribute.name | pascal_case ~ "Values" %}
{%   set type = to_swift_return_type(attribute.type) %}
{%   if attribute is enum %}

/** 
  {{attribute.brief | comment}}
*/
/// - Tag: otel{{class_name}}
{%     if attribute is enum %}
public struct {{class_name}}: CustomStringConvertible {
{%       for member in attribute.type.members %}
{%         if member.brief is defined %}
  /**
   {{member.brief | comment}}
   */
{%         endif %}
  public static let {{ member.id | camel_case }} = {{class_name}}({{ print_value(to_swift_return_type(attribute.type | enum_type), member.value) }}) 
{%      endfor %}

  internal let value: String

  public init(_ customValue: String) {
    self.value = customValue
  }

  public var description: String {
    return value
  }
}
{%    else %}
public enum {{class_name}}: {{ type }} {
{%       for member in attribute.type.members -%}
{%         if member.brief is defined -%}
  /*
   {{member.brief | comment}}
   */
{%         endif %}
  case {{ member.member_id | replace(".", "_") | replace("internal", "`internal`") }} = {{ print_value(type, member.value) }}
{%       endfor %}
} 
{%     endif %}
{%   endif %}
{% endfor %}
{% if filename == "ResourceAttributes" %}

public func ==(left: ResourceAttributes, right: String) -> Bool {
  return left.rawValue == right
}

public func ==(left: String, right: ResourceAttributes) -> Bool {
  return left == right.rawValue
}
{% endif %}
